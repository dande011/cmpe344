//By Kevmatic
//This is a heavily modified version of this code by MattyHild:
//http://www.youtube.com/watch?v=ELtsEPXV2xE
//Designed for Processing. Uses minim.
//Hardware is Chr's design with stock firmware.
//http://www.instructables.com/id/Led-Cube-8x8x8/
//Modofications by SuperTech-IT
//http://www.instructables.com/id/CHRs-8X8X8-LED-Cube-Revisited-with-improvements/
 
import ddf.minim.analysis.*;
import ddf.minim.*;
//http://code.compartmental.net/tools/minim/
import processing.serial.*;
//http://www.processing.org/reference/libraries/serial/index.html
Serial port;
Minim minim;
AudioInput in;
FFT fftLog;
int[] bandAmp = new int[8];
byte[][] cube = new byte[8][8];
 
 
void setup ()
{
    size(1024, 512, P3D);
    minim = new Minim(this);
    minim.debugOn();
    in = minim.getLineIn(Minim.STEREO, 1024);
    fftLog = new FFT(in.bufferSize(), in.sampleRate());
    fftLog.logAverages(48,1);
    rectMode(CORNERS);
    fftLog.window(FFT.HAMMING);
    println(Serial.list());
    port = new Serial(this, Serial.list()[1], 38400,'N',8,1);
 
   
  }
 
void draw()
{
  background(0);
  fftLog.forward(in.mix);
  stroke(255);
  int w = int(width/8);
  for(int i = 0; i < 8; i++)
  {
    fill(i*32, 255 - 32*i,0);
    if(i > 1)
    {
       rect(i*w, height, i*w + w, height - (fftLog.getAvg(i)*i*i));
       bandAmp[i] =int(fftLog.getAvg(i)*(i*1.5));
    }
    else
    {
      rect(i*w, height, i*w + w, height - fftLog.getAvg(i)*2);
       bandAmp[i] =int(fftLog.getAvg(i)*1.3);
    }
 
     
  }
 
 
 
  shiftback();
 
 
  clearX();
    for(int i = 0; i < 8; i++)
    {
     
    for(int y = 0; y < 8; y++)
      {
        if((bandAmp[i]/16) > y)
       
        setvoxel(i,0,y);
    }
    }
   
writecube();
}
    void shiftback()
    {
       for(int hght=0;hght<7;hght++)
       {
         for(int y=6; y>-1; y--)
         {
           
           cube[hght][y+1]=cube[hght][y];
         }
       }
 
     
    }
void clearX()
{
         //clear X
       for(int x=0;x<8;x++)
       {
       cube[x][0]=(byte)0x00;
       }
}
 
void setvoxel(int x, int y, int z)
{
                cube[z][y] |= (byte)(0x01 << x);
 
}
void writecube()
{
  int x,y,i;
 
        i= 0;
 
        byte[] buffer = new byte[150];
     
        buffer[i++] = (byte)0xff; // escape
        buffer[i++] = (byte)0x00; // reset to 0,0
 
        for (x=0;x<8;x++)
        {
                for (y=0;y<8;y++)
                {
                        buffer[i++] = (cube[x][y]);
                        // 0xFF is escape char and must be double transmitted. On plus side, sets up compatible additions to the protocol!
                        if (cube[x][y] == (byte)0xFF)
                        {
                               
                                buffer[i++] = (cube[x][y]);
                        }
                }
               
        }
 
       //You can't send the data a byte at a time in Windows or you'll only get about an fps. But iterators and buffers and stuff don't like working with primitives and I'm lazy
       //So I just create a new array the correct size each time, since you don't know how much data will be sent each time.
       
       //Since each 0xFF is sent twice, biggest buffer size is (64 * 2) + 2 = 130 bytes if you're sending a solid cube.
       
       byte[] buffer2 = new byte[i];
 
      for (int s = 0; s<i; s++)
         buffer2[s]=buffer[s];
         
       port.write(buffer2);
         
       
}