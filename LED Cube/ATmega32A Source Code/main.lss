
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a06  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  00007a06  00007aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000092  008001ac  008001ac  00007c06  2**0
                  ALLOC
  3 .eeprom       0000022f  00810000  00810000  00007c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  00007e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000082d  00000000  00000000  00007f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003488  00000000  00000000  00008742  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a64  00000000  00000000  0000bbca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e27  00000000  00000000  0000c62e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  00010458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093f  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004480  00000000  00000000  00011467  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000158e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_4>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	98 31       	cpi	r25, 0x18	; 24
      56:	c7 31       	cpi	r28, 0x17	; 23
      58:	14 32       	cpi	r17, 0x24	; 36
      5a:	ee 32       	cpi	r30, 0x2E	; 46
      5c:	01 33       	cpi	r16, 0x31	; 49
      5e:	15 33       	cpi	r17, 0x35	; 53
      60:	4b 33       	cpi	r20, 0x3B	; 59
      62:	5d 33       	cpi	r21, 0x3D	; 61
      64:	75 33       	cpi	r23, 0x35	; 53
      66:	83 33       	cpi	r24, 0x33	; 51
      68:	95 31       	cpi	r25, 0x15	; 21
      6a:	e2 33       	cpi	r30, 0x32	; 50
      6c:	7f 34       	cpi	r23, 0x4F	; 79
      6e:	a3 34       	cpi	r26, 0x43	; 67
      70:	24 35       	cpi	r18, 0x54	; 84
      72:	34 35       	cpi	r19, 0x54	; 84
      74:	4c 35       	cpi	r20, 0x5C	; 92
      76:	5c 35       	cpi	r21, 0x5C	; 92
      78:	ab 35       	cpi	r26, 0x5B	; 91
      7a:	bf 35       	cpi	r27, 0x5F	; 95
      7c:	e2 35       	cpi	r30, 0x52	; 82
      7e:	f4 35       	cpi	r31, 0x54	; 84
      80:	07 36       	cpi	r16, 0x67	; 103
      82:	1a 36       	cpi	r17, 0x6A	; 106
      84:	2c 36       	cpi	r18, 0x6C	; 108
      86:	3e 36       	cpi	r19, 0x6E	; 110
      88:	4c 36       	cpi	r20, 0x6C	; 108
      8a:	5f 36       	cpi	r21, 0x6F	; 111
      8c:	6d 36       	cpi	r22, 0x6D	; 109
      8e:	85 36       	cpi	r24, 0x65	; 101
      90:	99 36       	cpi	r25, 0x69	; 105
      92:	a9 36       	cpi	r26, 0x69	; 105
      94:	ee 36       	cpi	r30, 0x6E	; 110
      96:	00 37       	cpi	r16, 0x70	; 112
      98:	11 37       	cpi	r17, 0x71	; 113
      9a:	23 37       	cpi	r18, 0x73	; 115
      9c:	05 a8       	ldd	r0, Z+53	; 0x35
      9e:	4c cd       	rjmp	.-1384   	; 0xfffffb38 <__eeprom_end+0xff7ef909>
      a0:	b2 d4       	rcall	.+2404   	; 0xa06 <__stack+0x1a7>
      a2:	4e b9       	out	0x0e, r20	; 14
      a4:	38 36       	cpi	r19, 0x68	; 104
      a6:	a9 02       	muls	r26, r25
      a8:	0c 50       	subi	r16, 0x0C	; 12
      aa:	b9 91       	ld	r27, Y+
      ac:	86 88       	ldd	r8, Z+22	; 0x16
      ae:	08 3c       	cpi	r16, 0xC8	; 200
      b0:	a6 aa       	std	Z+54, r10	; 0x36
      b2:	aa 2a       	or	r10, r26
      b4:	be 00       	.word	0x00be	; ????
      b6:	00 00       	nop
      b8:	80 3f       	cpi	r24, 0xF0	; 240
      ba:	06 64       	ori	r16, 0x46	; 70
      bc:	ec 1b       	sub	r30, r28
      be:	3c 04       	cpc	r3, r12
      c0:	bc 16       	cp	r11, r28
      c2:	3e 3b       	cpi	r19, 0xBE	; 190
      c4:	e5 b9       	out	0x05, r30	; 5
      c6:	3c c9       	rjmp	.-3464   	; 0xfffff340 <__eeprom_end+0xff7ef111>
      c8:	3c 37       	cpi	r19, 0x7C	; 124
      ca:	c2 9e       	mul	r12, r18
      cc:	5a 3d       	cpi	r21, 0xDA	; 218
      ce:	66 04       	cpc	r6, r6
      d0:	98 08       	sbc	r9, r8
      d2:	3e ea       	ldi	r19, 0xAE	; 174
      d4:	69 aa       	std	Y+49, r6	; 0x31
      d6:	aa 3e       	cpi	r26, 0xEA	; 234
      d8:	00 00       	nop
      da:	00 80       	ld	r0, Z
      dc:	3f 07       	cpc	r19, r31

000000dd <paths>:
      dd:	07 06 05 04 03 02 01 00 10 20 30 40 50 60 70 71     ......... 0@P`pq
      ed:	72 73 74 75 76 77 67 57 47 37 27 17 04 03 12 21     rstuvwgWG7'....!
      fd:	30 40 51 62 73 74 65 56 47 37 26 15 00              0@QbsteVG7&..

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf e5       	ldi	r28, 0x5F	; 95
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	11 e0       	ldi	r17, 0x01	; 1
     118:	a0 e6       	ldi	r26, 0x60	; 96
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e6 e0       	ldi	r30, 0x06	; 6
     11e:	fa e7       	ldi	r31, 0x7A	; 122
     120:	02 c0       	rjmp	.+4      	; 0x126 <.do_copy_data_start>

00000122 <.do_copy_data_loop>:
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0

00000126 <.do_copy_data_start>:
     126:	ac 3a       	cpi	r26, 0xAC	; 172
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <.do_copy_data_loop>

0000012c <__do_clear_bss>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	ac ea       	ldi	r26, 0xAC	; 172
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	ae 33       	cpi	r26, 0x3E	; 62
     138:	b1 07       	cpc	r27, r17
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 de 02 	call	0x5bc	; 0x5bc <main>
     140:	0c 94 01 3d 	jmp	0x7a02	; 0x7a02 <_exit>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <__vector_4>:
 * 6) Increment the current_layer variable, so the next layer is
 *    drawn the next time this function runs.
*/

ISR(TIMER2_COMP_vect)
{
     148:	1f 92       	push	r1
     14a:	0f 92       	push	r0
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	0f 92       	push	r0
     150:	11 24       	eor	r1, r1
     152:	2f 93       	push	r18
     154:	3f 93       	push	r19
     156:	8f 93       	push	r24
     158:	9f 93       	push	r25
     15a:	ef 93       	push	r30
     15c:	ff 93       	push	r31
int i;

	LAYER_SELECT = 0x00;  // Turn all cathode layers off. (all transistors off)
     15e:	15 ba       	out	0x15, r1	; 21
	OE_PORT |= OE_MASK;  // Set OE high, disabling all outputs on latch array
     160:	c3 9a       	sbi	0x18, 3	; 24
xit = 0;
xit = (!(PIND & MUSIC_BTN)); // see if button to exit animation pressed
     162:	80 b3       	in	r24, 0x10	; 16
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	26 e0       	ldi	r18, 0x06	; 6
     168:	96 95       	lsr	r25
     16a:	87 95       	ror	r24
     16c:	2a 95       	dec	r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <__vector_4+0x20>
     170:	80 95       	com	r24
     172:	90 95       	com	r25
     174:	81 70       	andi	r24, 0x01	; 1
     176:	90 70       	andi	r25, 0x00	; 0
     178:	90 93 b4 01 	sts	0x01B4, r25
     17c:	80 93 b3 01 	sts	0x01B3, r24
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
	// Loop through all 8 bytes of data in the current layer
	// and latch it onto the cube.
	for (i = 0;  i < 8;  i++)
	{
		// Set the data on the data-bus of the latch array.
		PORTA = cube[current_layer][i]; 
     184:	e0 91 3d 02 	lds	r30, 0x023D
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	8a 95       	dec	r24
     192:	e1 f7       	brne	.-8      	; 0x18c <__vector_4+0x44>
     194:	e2 0f       	add	r30, r18
     196:	f3 1f       	adc	r31, r19
     198:	e9 50       	subi	r30, 0x09	; 9
     19a:	fe 4f       	sbci	r31, 0xFE	; 254
     19c:	80 81       	ld	r24, Z
     19e:	8b bb       	out	0x1b, r24	; 27
		// Increment the latch address chip, 74HC138, to create
		// a rising edge (LOW to HIGH) on the current latch.
		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1)); 
     1a0:	98 b3       	in	r25, 0x18	; 24
     1a2:	82 2f       	mov	r24, r18
     1a4:	8f 5f       	subi	r24, 0xFF	; 255
     1a6:	87 70       	andi	r24, 0x07	; 7
     1a8:	98 7f       	andi	r25, 0xF8	; 248
     1aa:	89 2b       	or	r24, r25
     1ac:	88 bb       	out	0x18, r24	; 24
xit = 0;
xit = (!(PIND & MUSIC_BTN)); // see if button to exit animation pressed

	// Loop through all 8 bytes of data in the current layer
	// and latch it onto the cube.
	for (i = 0;  i < 8;  i++)
     1ae:	2f 5f       	subi	r18, 0xFF	; 255
     1b0:	3f 4f       	sbci	r19, 0xFF	; 255
     1b2:	28 30       	cpi	r18, 0x08	; 8
     1b4:	31 05       	cpc	r19, r1
     1b6:	31 f7       	brne	.-52     	; 0x184 <__vector_4+0x3c>
		// Increment the latch address chip, 74HC138, to create
		// a rising edge (LOW to HIGH) on the current latch.
		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1)); 
	}

	OE_PORT &= ~OE_MASK;  // Set OE low, enabling outputs on the latch array
     1b8:	c3 98       	cbi	0x18, 3	; 24
	LAYER_SELECT = (0x01 << current_layer);  // Transistor ON for current layer
     1ba:	20 91 3d 02 	lds	r18, 0x023D
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__vector_4+0x80>
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	2a 95       	dec	r18
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <__vector_4+0x7c>
     1cc:	85 bb       	out	0x15, r24	; 21

	// Increment the curren_layer counter so that the next layer is
	// drawn the next time this function runs.
	current_layer++; 
     1ce:	80 91 3d 02 	lds	r24, 0x023D
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	80 93 3d 02 	sts	0x023D, r24
	// We want to count from 0-7, so set it to 0 when it reaches 8.
	if (current_layer == 8)
     1d8:	80 91 3d 02 	lds	r24, 0x023D
     1dc:	88 30       	cpi	r24, 0x08	; 8
     1de:	11 f4       	brne	.+4      	; 0x1e4 <__vector_4+0x9c>
		current_layer = 0; 
     1e0:	10 92 3d 02 	sts	0x023D, r1

}
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	3f 91       	pop	r19
     1ee:	2f 91       	pop	r18
     1f0:	0f 90       	pop	r0
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	0f 90       	pop	r0
     1f6:	1f 90       	pop	r1
     1f8:	18 95       	reti

000001fa <ioinit>:


void ioinit (void)
{
	DDRA = 0xff; 	// DATA bus output
     1fa:	9f ef       	ldi	r25, 0xFF	; 255
     1fc:	9a bb       	out	0x1a, r25	; 26
	DDRB = 0xef; 	// Button on B4
     1fe:	8f ee       	ldi	r24, 0xEF	; 239
     200:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff; 	// Layer select output
     202:	94 bb       	out	0x14, r25	; 20
	// DDRD = 0xdf; 	// Button on D5
	DDRD = 0x1f;    // Button on D5 and D6 and music on D7
     204:	8f e1       	ldi	r24, 0x1F	; 31
     206:	81 bb       	out	0x11, r24	; 17
	
	PORTA = 0x00;  // Set data bus off
     208:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;  // Set layer select off
     20a:	15 ba       	out	0x15, r1	; 21
	PORTB = 0x10;  // Enable pull up on button.
     20c:	80 e1       	ldi	r24, 0x10	; 16
     20e:	88 bb       	out	0x18, r24	; 24
	PORTD = 0x60;  // Enable pull up on button + music select.
     210:	80 e6       	ldi	r24, 0x60	; 96
     212:	82 bb       	out	0x12, r24	; 18

	// Timer 2
	// Frame buffer interrupt
	// 14745600/128/11 = 10472.72 interrupts per second
	// 10472.72/8 = 1309 frames per second
	OCR2 = 20;  	// interrupt at counter = 10
     214:	84 e1       	ldi	r24, 0x14	; 20
     216:	83 bd       	out	0x23, r24	; 35
    TCCR2 |= (1 << CS20) | (1 << CS22);  // Prescaler = 128.
     218:	85 b5       	in	r24, 0x25	; 37
     21a:	85 60       	ori	r24, 0x05	; 5
     21c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << WGM21);  // CTC mode. Reset counter when OCR2 is reached.
     21e:	85 b5       	in	r24, 0x25	; 37
     220:	88 60       	ori	r24, 0x08	; 8
     222:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00; 	// initial counter value = 0; 
     224:	14 bc       	out	0x24, r1	; 36
	TIMSK |= (1 << OCIE2);  // Enable CTC interrupt
     226:	89 b7       	in	r24, 0x39	; 57
     228:	80 68       	ori	r24, 0x80	; 128
     22a:	89 bf       	out	0x39, r24	; 57



    // Initiate RS232
    // USART Baud rate is defined in MYUBRR
    UBRRH = MYUBRR >> 8; 
     22c:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR; 
     22e:	89 e1       	ldi	r24, 0x19	; 25
     230:	89 b9       	out	0x09, r24	; 9
    // bit 7-6      sync/ascyn 00 = async,  01 = sync
    // bit 5-4      parity 00 = disabled
    // bit 3        stop bits 0 = 1 bit  1 = 2 bits
    // bit 2-1      frame length 11 = 8
    // bit 0        clock polarity = 0
    UCSRC  = 0b10000110; 
     232:	86 e8       	ldi	r24, 0x86	; 134
     234:	80 bd       	out	0x20, r24	; 32
    // Enable RS232, tx and rx
    UCSRB = (1<<RXEN)|(1<<TXEN); 
     236:	88 e1       	ldi	r24, 0x18	; 24
     238:	8a b9       	out	0x0a, r24	; 10
    UDR = 0x00;  // send an empty byte to indicate powerup.
     23a:	1c b8       	out	0x0c, r1	; 12


}
     23c:	08 95       	ret

0000023e <USART_send>:


void USART_send( unsigned char data){
 
 //while(!(UCSRA & (1<<TXC)));
while(!(UCSRA & (1<<UDRE)));
     23e:	5d 9b       	sbis	0x0b, 5	; 11
     240:	fe cf       	rjmp	.-4      	; 0x23e <USART_send>
 UDR = data;
     242:	8c b9       	out	0x0c, r24	; 12
 
}
     244:	08 95       	ret

00000246 <Serprint>:
void Serprint(char* StringPtr){
     246:	fc 01       	movw	r30, r24
// int i; 
// while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
while(*StringPtr != i){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     248:	40 91 39 02 	lds	r20, 0x0239
     24c:	50 91 3a 02 	lds	r21, 0x023A
     250:	04 c0       	rjmp	.+8      	; 0x25a <Serprint+0x14>


void USART_send( unsigned char data){
 
 //while(!(UCSRA & (1<<TXC)));
while(!(UCSRA & (1<<UDRE)));
     252:	5d 9b       	sbis	0x0b, 5	; 11
     254:	fe cf       	rjmp	.-4      	; 0x252 <Serprint+0xc>
 UDR = data;
     256:	2c b9       	out	0x0c, r18	; 12
void Serprint(char* StringPtr){
// int i; 
// while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
while(*StringPtr != i){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 USART_send(*StringPtr);    //Using the simple send function we send one char at a time
 StringPtr++;}        //We increment the pointer so we can read the next char
     258:	31 96       	adiw	r30, 0x01	; 1
 
}
void Serprint(char* StringPtr){
// int i; 
// while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
while(*StringPtr != i){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     25a:	20 81       	ld	r18, Z
     25c:	82 2f       	mov	r24, r18
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	84 17       	cp	r24, r20
     262:	95 07       	cpc	r25, r21
     264:	b1 f7       	brne	.-20     	; 0x252 <Serprint+0xc>
 USART_send(*StringPtr);    //Using the simple send function we send one char at a time
 StringPtr++;}        //We increment the pointer so we can read the next char
 
}
     266:	08 95       	ret

00000268 <selftest>:

void selftest (void)

{
     268:	1f 93       	push	r17
// LED_PORT != LED_RED + LED_GREEN + LED_PGM; // turn off all LEDs
for (y=0; y<8; y++){
     26a:	10 92 3c 02 	sts	0x023C, r1
     26e:	10 92 3b 02 	sts	0x023B, r1
for (x=0; x<8; x++){
LED_PORT ^= LED_PGM; // change state of diag LED
     272:	10 e1       	ldi	r17, 0x10	; 16
     274:	9b c0       	rjmp	.+310    	; 0x3ac <selftest+0x144>
void selftest (void)

{
// LED_PORT != LED_RED + LED_GREEN + LED_PGM; // turn off all LEDs
for (y=0; y<8; y++){
for (x=0; x<8; x++){
     276:	10 92 b2 01 	sts	0x01B2, r1
     27a:	10 92 b1 01 	sts	0x01B1, r1
     27e:	86 c0       	rjmp	.+268    	; 0x38c <selftest+0x124>
LED_PORT ^= LED_PGM; // change state of diag LED
     280:	82 b3       	in	r24, 0x12	; 18
     282:	81 27       	eor	r24, r17
     284:	82 bb       	out	0x12, r24	; 18
for (z=0; z<8; z++){
     286:	10 92 38 02 	sts	0x0238, r1
     28a:	10 92 37 02 	sts	0x0237, r1
     28e:	13 c0       	rjmp	.+38     	; 0x2b6 <selftest+0x4e>

setvoxel (x,y,z); 
     290:	60 91 3b 02 	lds	r22, 0x023B
     294:	70 91 3c 02 	lds	r23, 0x023C
     298:	80 91 b1 01 	lds	r24, 0x01B1
     29c:	90 91 b2 01 	lds	r25, 0x01B2
     2a0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
{
// LED_PORT != LED_RED + LED_GREEN + LED_PGM; // turn off all LEDs
for (y=0; y<8; y++){
for (x=0; x<8; x++){
LED_PORT ^= LED_PGM; // change state of diag LED
for (z=0; z<8; z++){
     2a4:	80 91 37 02 	lds	r24, 0x0237
     2a8:	90 91 38 02 	lds	r25, 0x0238
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	90 93 38 02 	sts	0x0238, r25
     2b2:	80 93 37 02 	sts	0x0237, r24
     2b6:	40 91 37 02 	lds	r20, 0x0237
     2ba:	50 91 38 02 	lds	r21, 0x0238
     2be:	48 30       	cpi	r20, 0x08	; 8
     2c0:	51 05       	cpc	r21, r1
     2c2:	34 f3       	brlt	.-52     	; 0x290 <selftest+0x28>

setvoxel (x,y,z); 
}

for (m=0;m<selftestDelay*2;m++)
     2c4:	10 92 af 01 	sts	0x01AF, r1
     2c8:	10 92 ae 01 	sts	0x01AE, r1
     2cc:	e0 91 7f 00 	lds	r30, 0x007F
     2d0:	f0 91 80 00 	lds	r31, 0x0080
     2d4:	df 01       	movw	r26, r30
     2d6:	aa 0f       	add	r26, r26
     2d8:	bb 1f       	adc	r27, r27
     2da:	60 91 81 00 	lds	r22, 0x0081
     2de:	70 91 82 00 	lds	r23, 0x0082
     2e2:	40 91 ac 01 	lds	r20, 0x01AC
     2e6:	50 91 ad 01 	lds	r21, 0x01AD
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	1b c0       	rjmp	.+54     	; 0x326 <selftest+0xbe>
 
}

void selftest (void)

{
     2f0:	6f 5f       	subi	r22, 0xFF	; 255
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255

for (m=0;m<selftestDelay*2;m++)
{
seed ++;

if (!(PINB & MAIN_BTN))
     2f4:	b4 9b       	sbis	0x16, 4	; 22
     2f6:	07 c0       	rjmp	.+14     	; 0x306 <selftest+0x9e>
			return;
if (!(PIND & RS232_BTN))
     2f8:	85 9b       	sbis	0x10, 5	; 16
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <selftest+0x9e>
			return;
if (!(PIND & MUSIC_BTN))
     2fc:	86 9b       	sbis	0x10, 6	; 16
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <selftest+0x9e>
			return; 
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0a c0       	rjmp	.+20     	; 0x31a <selftest+0xb2>
     306:	70 93 82 00 	sts	0x0082, r23
     30a:	60 93 81 00 	sts	0x0081, r22
     30e:	50 93 ad 01 	sts	0x01AD, r21
     312:	40 93 ac 01 	sts	0x01AC, r20
     316:	94 c0       	rjmp	.+296    	; 0x440 <selftest+0x1d8>
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	ac 01       	movw	r20, r24
for (n=0; n<selftestDelay; n++)
     31c:	8e 17       	cp	r24, r30
     31e:	9f 07       	cpc	r25, r31
     320:	dc f3       	brlt	.-10     	; 0x318 <selftest+0xb0>
     322:	2f 5f       	subi	r18, 0xFF	; 255
     324:	3f 4f       	sbci	r19, 0xFF	; 255
for (z=0; z<8; z++){

setvoxel (x,y,z); 
}

for (m=0;m<selftestDelay*2;m++)
     326:	2a 17       	cp	r18, r26
     328:	3b 07       	cpc	r19, r27
     32a:	14 f3       	brlt	.-60     	; 0x2f0 <selftest+0x88>
     32c:	70 93 82 00 	sts	0x0082, r23
     330:	60 93 81 00 	sts	0x0081, r22
     334:	50 93 ad 01 	sts	0x01AD, r21
     338:	40 93 ac 01 	sts	0x01AC, r20
     33c:	30 93 af 01 	sts	0x01AF, r19
     340:	20 93 ae 01 	sts	0x01AE, r18
			return; 
for (n=0; n<selftestDelay; n++)
{
}
}
for (z=0; z<8; z++){
     344:	10 92 38 02 	sts	0x0238, r1
     348:	10 92 37 02 	sts	0x0237, r1
     34c:	0f c0       	rjmp	.+30     	; 0x36c <selftest+0x104>
clrvoxel (x,y,z); 
     34e:	60 91 3b 02 	lds	r22, 0x023B
     352:	70 91 3c 02 	lds	r23, 0x023C
     356:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
			return; 
for (n=0; n<selftestDelay; n++)
{
}
}
for (z=0; z<8; z++){
     35a:	80 91 37 02 	lds	r24, 0x0237
     35e:	90 91 38 02 	lds	r25, 0x0238
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	90 93 38 02 	sts	0x0238, r25
     368:	80 93 37 02 	sts	0x0237, r24
     36c:	40 91 37 02 	lds	r20, 0x0237
     370:	50 91 38 02 	lds	r21, 0x0238
     374:	80 91 b1 01 	lds	r24, 0x01B1
     378:	90 91 b2 01 	lds	r25, 0x01B2
     37c:	48 30       	cpi	r20, 0x08	; 8
     37e:	51 05       	cpc	r21, r1
     380:	34 f3       	brlt	.-52     	; 0x34e <selftest+0xe6>
void selftest (void)

{
// LED_PORT != LED_RED + LED_GREEN + LED_PGM; // turn off all LEDs
for (y=0; y<8; y++){
for (x=0; x<8; x++){
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	90 93 b2 01 	sts	0x01B2, r25
     388:	80 93 b1 01 	sts	0x01B1, r24
     38c:	80 91 b1 01 	lds	r24, 0x01B1
     390:	90 91 b2 01 	lds	r25, 0x01B2
     394:	08 97       	sbiw	r24, 0x08	; 8
     396:	0c f4       	brge	.+2      	; 0x39a <selftest+0x132>
     398:	73 cf       	rjmp	.-282    	; 0x280 <selftest+0x18>

void selftest (void)

{
// LED_PORT != LED_RED + LED_GREEN + LED_PGM; // turn off all LEDs
for (y=0; y<8; y++){
     39a:	80 91 3b 02 	lds	r24, 0x023B
     39e:	90 91 3c 02 	lds	r25, 0x023C
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 3c 02 	sts	0x023C, r25
     3a8:	80 93 3b 02 	sts	0x023B, r24
     3ac:	80 91 3b 02 	lds	r24, 0x023B
     3b0:	90 91 3c 02 	lds	r25, 0x023C
     3b4:	08 97       	sbiw	r24, 0x08	; 8
     3b6:	0c f4       	brge	.+2      	; 0x3ba <selftest+0x152>
     3b8:	5e cf       	rjmp	.-324    	; 0x276 <selftest+0xe>
for (z=0; z<8; z++){
clrvoxel (x,y,z); 
}
}}

for (z=0; z<8; z++){
     3ba:	10 92 38 02 	sts	0x0238, r1
     3be:	10 92 37 02 	sts	0x0237, r1
for (y=0; y<8; y++){
LED_PORT ^= LED_PGM; // change state of status LED
     3c2:	10 e1       	ldi	r17, 0x10	; 16
     3c4:	83 c0       	rjmp	.+262    	; 0x4cc <selftest+0x264>
clrvoxel (x,y,z); 
}
}}

for (z=0; z<8; z++){
for (y=0; y<8; y++){
     3c6:	10 92 3c 02 	sts	0x023C, r1
     3ca:	10 92 3b 02 	sts	0x023B, r1
     3ce:	6e c0       	rjmp	.+220    	; 0x4ac <selftest+0x244>
LED_PORT ^= LED_PGM; // change state of status LED
     3d0:	82 b3       	in	r24, 0x12	; 18
     3d2:	81 27       	eor	r24, r17
     3d4:	82 bb       	out	0x12, r24	; 18
for (x=0; x<8; x++){
     3d6:	10 92 b2 01 	sts	0x01B2, r1
     3da:	10 92 b1 01 	sts	0x01B1, r1
     3de:	54 c0       	rjmp	.+168    	; 0x488 <selftest+0x220>

setvoxel (x,y,z);
     3e0:	40 91 37 02 	lds	r20, 0x0237
     3e4:	50 91 38 02 	lds	r21, 0x0238
     3e8:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>

 
for (m=0;m<selftestDelay/4;m++)
     3ec:	10 92 af 01 	sts	0x01AF, r1
     3f0:	10 92 ae 01 	sts	0x01AE, r1
     3f4:	80 91 7f 00 	lds	r24, 0x007F
     3f8:	90 91 80 00 	lds	r25, 0x0080
     3fc:	64 e0       	ldi	r22, 0x04	; 4
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     404:	ab 01       	movw	r20, r22
     406:	e0 91 81 00 	lds	r30, 0x0081
     40a:	f0 91 82 00 	lds	r31, 0x0082
     40e:	60 91 ac 01 	lds	r22, 0x01AC
     412:	70 91 ad 01 	lds	r23, 0x01AD
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	1e c0       	rjmp	.+60     	; 0x458 <selftest+0x1f0>
 
}

void selftest (void)

{
     41c:	31 96       	adiw	r30, 0x01	; 1
 
for (m=0;m<selftestDelay/4;m++)
{
seed ++; // seed for random in case diagnostic interrupted by run button.

if (!(PINB & MAIN_BTN))
     41e:	b4 9b       	sbis	0x16, 4	; 22
     420:	07 c0       	rjmp	.+14     	; 0x430 <selftest+0x1c8>
			return;
if (!(PIND & RS232_BTN))
     422:	85 9b       	sbis	0x10, 5	; 16
     424:	05 c0       	rjmp	.+10     	; 0x430 <selftest+0x1c8>
			return;
if (!(PIND & MUSIC_BTN)) 
     426:	86 9b       	sbis	0x10, 6	; 16
     428:	03 c0       	rjmp	.+6      	; 0x430 <selftest+0x1c8>
			return; 
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e c0       	rjmp	.+28     	; 0x44c <selftest+0x1e4>
     430:	f0 93 82 00 	sts	0x0082, r31
     434:	e0 93 81 00 	sts	0x0081, r30
     438:	70 93 ad 01 	sts	0x01AD, r23
     43c:	60 93 ac 01 	sts	0x01AC, r22
     440:	30 93 af 01 	sts	0x01AF, r19
     444:	20 93 ae 01 	sts	0x01AE, r18
     448:	49 c0       	rjmp	.+146    	; 0x4dc <selftest+0x274>
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	bc 01       	movw	r22, r24
for (n=0; n<selftestDelay/4; n++)
     44e:	84 17       	cp	r24, r20
     450:	95 07       	cpc	r25, r21
     452:	dc f3       	brlt	.-10     	; 0x44a <selftest+0x1e2>
     454:	2f 5f       	subi	r18, 0xFF	; 255
     456:	3f 4f       	sbci	r19, 0xFF	; 255
for (x=0; x<8; x++){

setvoxel (x,y,z);

 
for (m=0;m<selftestDelay/4;m++)
     458:	24 17       	cp	r18, r20
     45a:	35 07       	cpc	r19, r21
     45c:	fc f2       	brlt	.-66     	; 0x41c <selftest+0x1b4>
     45e:	f0 93 82 00 	sts	0x0082, r31
     462:	e0 93 81 00 	sts	0x0081, r30
     466:	70 93 ad 01 	sts	0x01AD, r23
     46a:	60 93 ac 01 	sts	0x01AC, r22
     46e:	30 93 af 01 	sts	0x01AF, r19
     472:	20 93 ae 01 	sts	0x01AE, r18
}}

for (z=0; z<8; z++){
for (y=0; y<8; y++){
LED_PORT ^= LED_PGM; // change state of status LED
for (x=0; x<8; x++){
     476:	80 91 b1 01 	lds	r24, 0x01B1
     47a:	90 91 b2 01 	lds	r25, 0x01B2
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	90 93 b2 01 	sts	0x01B2, r25
     484:	80 93 b1 01 	sts	0x01B1, r24
     488:	80 91 b1 01 	lds	r24, 0x01B1
     48c:	90 91 b2 01 	lds	r25, 0x01B2
     490:	60 91 3b 02 	lds	r22, 0x023B
     494:	70 91 3c 02 	lds	r23, 0x023C
     498:	88 30       	cpi	r24, 0x08	; 8
     49a:	91 05       	cpc	r25, r1
     49c:	0c f4       	brge	.+2      	; 0x4a0 <selftest+0x238>
     49e:	a0 cf       	rjmp	.-192    	; 0x3e0 <selftest+0x178>
clrvoxel (x,y,z); 
}
}}

for (z=0; z<8; z++){
for (y=0; y<8; y++){
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	70 93 3c 02 	sts	0x023C, r23
     4a8:	60 93 3b 02 	sts	0x023B, r22
     4ac:	80 91 3b 02 	lds	r24, 0x023B
     4b0:	90 91 3c 02 	lds	r25, 0x023C
     4b4:	08 97       	sbiw	r24, 0x08	; 8
     4b6:	0c f4       	brge	.+2      	; 0x4ba <selftest+0x252>
     4b8:	8b cf       	rjmp	.-234    	; 0x3d0 <selftest+0x168>
for (z=0; z<8; z++){
clrvoxel (x,y,z); 
}
}}

for (z=0; z<8; z++){
     4ba:	80 91 37 02 	lds	r24, 0x0237
     4be:	90 91 38 02 	lds	r25, 0x0238
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	90 93 38 02 	sts	0x0238, r25
     4c8:	80 93 37 02 	sts	0x0237, r24
     4cc:	80 91 37 02 	lds	r24, 0x0237
     4d0:	90 91 38 02 	lds	r25, 0x0238
     4d4:	08 97       	sbiw	r24, 0x08	; 8
     4d6:	0c f4       	brge	.+2      	; 0x4da <selftest+0x272>
     4d8:	76 cf       	rjmp	.-276    	; 0x3c6 <selftest+0x15e>
//}
//}


//}}}
LED_PORT &= ~LED_PGM; // turn off diag LED
     4da:	94 98       	cbi	0x12, 4	; 18

}
     4dc:	1f 91       	pop	r17
     4de:	08 95       	ret

000004e0 <rs232>:
	}
}

// Take input from a computer and load it onto the cube buffer
void rs232(void)
{
     4e0:	1f 93       	push	r17
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
	while (1)
	{
		// Switch state on red LED for debugging
		// Should switch state every time the code
		// is waiting for a byte to be received.
		LED_PORT ^= LED_RED; 
     4ea:	14 e0       	ldi	r17, 0x04	; 4
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <rs232+0x16>
	}
}

// Take input from a computer and load it onto the cube buffer
void rs232(void)
{
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
	while (1)
	{
		// Switch state on red LED for debugging
		// Should switch state every time the code
		// is waiting for a byte to be received.
		LED_PORT ^= LED_RED; 
     4f6:	82 b3       	in	r24, 0x12	; 18
     4f8:	81 27       	eor	r24, r17
     4fa:	82 bb       	out	0x12, r24	; 18

		// Wait until a byte has been received
		while ( !(UCSRA & (1<<RXC)) ); 
     4fc:	5f 9b       	sbis	0x0b, 7	; 11
     4fe:	fe cf       	rjmp	.-4      	; 0x4fc <rs232+0x1c>

		// Load the received byte from rs232 into a buffer.
		tempval = UDR; 
     500:	8c b1       	in	r24, 0x0c	; 12
     502:	90 e0       	ldi	r25, 0x00	; 0
		// are reset to 0. This way the x and y counters are
		// always the same on the computer and in the cube.
		// To send an 0xff byte, you have to send it twice!

		// Go into sync escape mode
		if (tempval == 0xff)
     504:	8f 3f       	cpi	r24, 0xFF	; 255
     506:	91 05       	cpc	r25, r1
     508:	31 f4       	brne	.+12     	; 0x516 <rs232+0x36>
		{
			// Wait for the next byte
			 while ( !(UCSRA & (1<<RXC)) ); 
     50a:	5f 9b       	sbis	0x0b, 7	; 11
     50c:	fe cf       	rjmp	.-4      	; 0x50a <rs232+0x2a>
			 // Get the next byte
			 tempval = UDR; 
     50e:	8c b1       	in	r24, 0x0c	; 12
     510:	90 e0       	ldi	r25, 0x00	; 0

			 // Sync signal is received.
			 // Reset x and y counters to 0.
			 if (tempval == 0x00)
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	61 f3       	breq	.-40     	; 0x4ee <rs232+0xe>
		}

        if (escape == 0)
        {
		// Load data into the current position in the buffer
		fb[x][y] = tempval; 
     516:	fa 01       	movw	r30, r20
     518:	63 e0       	ldi	r22, 0x03	; 3
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	6a 95       	dec	r22
     520:	e1 f7       	brne	.-8      	; 0x51a <rs232+0x3a>
     522:	e2 0f       	add	r30, r18
     524:	f3 1f       	adc	r31, r19
     526:	e9 54       	subi	r30, 0x49	; 73
     528:	fe 4f       	sbci	r31, 0xFE	; 254
     52a:	80 83       	st	Z, r24

    		// Check if we have reached the limits of the buffer array.
    		if (y == 7)
     52c:	27 30       	cpi	r18, 0x07	; 7
     52e:	31 05       	cpc	r19, r1
     530:	49 f4       	brne	.+18     	; 0x544 <rs232+0x64>
    		{
    			if (x == 7)
     532:	47 30       	cpi	r20, 0x07	; 7
     534:	51 05       	cpc	r21, r1
     536:	19 f4       	brne	.+6      	; 0x53e <rs232+0x5e>
    			{
    				// All data is loaded. Reset both counters
    				y = 0; 
    				x = 0; 
                    // Copy the data onto the cube.
    				tmp2cube(); 
     538:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <tmp2cube>
     53c:	d8 cf       	rjmp	.-80     	; 0x4ee <rs232+0xe>
    			} else
    			{
    				// A layer is loaded, reset y and increment x.
    				x++; 
     53e:	4f 5f       	subi	r20, 0xFF	; 255
     540:	5f 4f       	sbci	r21, 0xFF	; 255
     542:	d7 cf       	rjmp	.-82     	; 0x4f2 <rs232+0x12>
    				y = 0; 
    			}
    		} else
    		{
    			// We are in the middle of loading a layer. increment y.
    			y++; 
     544:	2f 5f       	subi	r18, 0xFF	; 255
     546:	3f 4f       	sbci	r19, 0xFF	; 255
     548:	d6 cf       	rjmp	.-84     	; 0x4f6 <rs232+0x16>

0000054a <bootwait>:
// 2) Set a random random seed based on the delay between boot time and
//    the time you press a button.
// 3) Select mode of operation, autonomous or rs232 controlled.
unsigned int bootwait (void)

{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
	// All the LED_PORT... code blinks the red and green status LEDs.

	unsigned int x = seed; 
     54e:	c0 91 81 00 	lds	r28, 0x0081
     552:	d0 91 82 00 	lds	r29, 0x0082
	LED_PORT |= LED_GREEN; 
     556:	93 9a       	sbi	0x12, 3	; 18
	while (1)
	{
        x++;  // increment x by one.
     558:	21 96       	adiw	r28, 0x01	; 1
		srand(x);  // use counter x as random seed
     55a:	ce 01       	movw	r24, r28
     55c:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <srand>
		
		delay_ms(1000); 
     560:	88 ee       	ldi	r24, 0xE8	; 232
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		LED_PORT &= ~LED_GREEN;  // green off, red on
     568:	93 98       	cbi	0x12, 3	; 18
		LED_PORT |= LED_RED; 
     56a:	92 9a       	sbi	0x12, 2	; 18
		// LED_PORT != LED_RED;
		// Listen for button presses and return with the
		// apropriate number.
		if (!(PIND & RS232_BTN))
     56c:	85 9b       	sbis	0x10, 5	; 16
     56e:	1a c0       	rjmp	.+52     	; 0x5a4 <bootwait+0x5a>
			return 2; 

		if (!(PINB & MAIN_BTN))
     570:	b4 9b       	sbis	0x16, 4	; 22
     572:	1b c0       	rjmp	.+54     	; 0x5aa <bootwait+0x60>
			return 1; 

		if (!(PIND & MUSIC_BTN))
     574:	86 9b       	sbis	0x10, 6	; 16
     576:	1c c0       	rjmp	.+56     	; 0x5b0 <bootwait+0x66>
			return 3; 

		if (x >= seed+200) {return 1;} // start the patterns if buttons are ignored too long
     578:	80 91 81 00 	lds	r24, 0x0081
     57c:	90 91 82 00 	lds	r25, 0x0082
     580:	88 53       	subi	r24, 0x38	; 56
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	c8 17       	cp	r28, r24
     586:	d9 07       	cpc	r29, r25
     588:	80 f4       	brcc	.+32     	; 0x5aa <bootwait+0x60>

		delay_ms(1000); 
     58a:	88 ee       	ldi	r24, 0xE8	; 232
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		LED_PORT &= ~LED_RED;  // red off, green on
     592:	92 98       	cbi	0x12, 2	; 18
		LED_PORT |= LED_GREEN; 
     594:	93 9a       	sbi	0x12, 3	; 18
		
		// Same as above. I do it twice because there are two delays
		// in this loop, used for the red and green led blinking..
		if (!(PIND & RS232_BTN))
     596:	85 9b       	sbis	0x10, 5	; 16
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <bootwait+0x5a>
			return 2; 

		if (!(PINB & MAIN_BTN))
     59a:	b4 9b       	sbis	0x16, 4	; 22
     59c:	06 c0       	rjmp	.+12     	; 0x5aa <bootwait+0x60>
			return 1; 

		if (!(PIND & MUSIC_BTN))
     59e:	86 99       	sbic	0x10, 6	; 16
     5a0:	db cf       	rjmp	.-74     	; 0x558 <bootwait+0xe>
     5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <bootwait+0x66>
     5a4:	22 e0       	ldi	r18, 0x02	; 2
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <bootwait+0x6a>
     5aa:	21 e0       	ldi	r18, 0x01	; 1
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <bootwait+0x6a>
     5b0:	23 e0       	ldi	r18, 0x03	; 3
     5b2:	30 e0       	ldi	r19, 0x00	; 0
 			return 3; 
	}
}
     5b4:	c9 01       	movw	r24, r18
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <main>:


// Main loop
// the AVR enters this function at boot time
int main (void)
{
     5bc:	2f 92       	push	r2
     5be:	3f 92       	push	r3
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	c1 5c       	subi	r28, 0xC1	; 193
     5e6:	d0 40       	sbci	r29, 0x00	; 0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
	// This function initiates IO ports, timers, interrupts and
    // serial communications
	 ioinit(); 
     5f2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <ioinit>
sei();
     5f6:	78 94       	sei
selftest();
     5f8:	0e 94 34 01 	call	0x268	; 0x268 <selftest>

    // This variable specifies which layer is currently being drawn by the
	// cube interrupt routine. We assign a value to it to make sure it's not >7.
	current_layer = 1; 	
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 3d 02 	sts	0x023D, r24
	//    stopped at is used as a random seed. This ensures true randomness at
	//    every boot. Without this (or some similar process) the cube would
	//    produce the same "random" sequence every time
	int i;

	i = bootwait(); 
     602:	0e 94 a5 02 	call	0x54a	; 0x54a <bootwait>
	// Enable interrupts
	// This starts the routine that draws the cube content

	 // sei();
// Result for bootwait is 3 - enter Music mode
	if (i == 3)
     606:	83 30       	cpi	r24, 0x03	; 3
     608:	91 05       	cpc	r25, r1
     60a:	09 f0       	breq	.+2      	; 0x60e <main+0x52>
     60c:	82 c3       	rjmp	.+1796   	; 0xd12 <__stack+0x4b3>
//*************************************************************
// Music mode start
//************************************************************* 

int updownspeed = 150;
fill (0x00);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
     614:	04 c0       	rjmp	.+8      	; 0x61e <main+0x62>
while (xit == 1) {delay_ms (500);}
     616:	84 ef       	ldi	r24, 0xF4	; 244
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
     61e:	80 91 b3 01 	lds	r24, 0x01B3
     622:	90 91 b4 01 	lds	r25, 0x01B4
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	b1 f3       	breq	.-20     	; 0x616 <main+0x5a>
effect_stringfly2 ("MUSIC");
     62a:	80 e6       	ldi	r24, 0x60	; 96
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
LED_PORT = 0x00; // Turn off all LEDs, set other bits floating
     632:	12 ba       	out	0x12, r1	; 18
PORTD |= 0x40; // Turn on pullup for Music Mode button
     634:	96 9a       	sbi	0x12, 6	; 18
{
fill (0x00);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
     63c:	1e 01       	movw	r2, r28
     63e:	08 94       	sec
     640:	21 1c       	adc	r2, r1
     642:	31 1c       	adc	r3, r1
		destinations[i] = rand()%8;
     644:	11 e4       	ldi	r17, 0x41	; 65
     646:	41 2e       	mov	r4, r17
     648:	51 2c       	mov	r5, r1
     64a:	4c 0e       	add	r4, r28
     64c:	5d 1e       	adc	r5, r29
//*************************************************************
// Music routine 1
//*************************************************************
int boombox,ii;
int long collapseDelay = 100000;
fill (0x00);
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
     654:	04 c0       	rjmp	.+8      	; 0x65e <main+0xa2>
while (xit == 1) {delay_ms (500);} //wait for music button release
     656:	84 ef       	ldi	r24, 0xF4	; 244
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
     65e:	80 91 b3 01 	lds	r24, 0x01B3
     662:	90 91 b4 01 	lds	r25, 0x01B4
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	b1 f3       	breq	.-20     	; 0x656 <main+0x9a>
effect_stringfly2 ("1");
     66a:	86 e6       	ldi	r24, 0x66	; 102
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
     672:	88 24       	eor	r8, r8
     674:	99 24       	eor	r9, r9
     676:	b0 ea       	ldi	r27, 0xA0	; 160
     678:	ab 2e       	mov	r10, r27
     67a:	b6 e8       	ldi	r27, 0x86	; 134
     67c:	bb 2e       	mov	r11, r27
     67e:	b1 e0       	ldi	r27, 0x01	; 1
     680:	cb 2e       	mov	r12, r27
     682:	d1 2c       	mov	r13, r1
{collapseDelay --;}
 if ((collapseDelay < 1) && (boombox > 0)) {collapseDelay = 100000; boombox --;fill(0x00);} // shink by 1 box
	
		ii = boombox;
		if (boombox > 0) {fill (0x00);} // removes last box by clearing cube - but not if there is no signal - this prevents flickering.	
		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
     684:	a3 e0       	ldi	r26, 0x03	; 3
     686:	6a 2e       	mov	r6, r26
     688:	71 2c       	mov	r7, r1
     68a:	45 c0       	rjmp	.+138    	; 0x716 <main+0x15a>
boombox = 0;

while (xit == 0)
	{

 if ((PIND & MUSIC_BEAT) && (boombox < 3)) {boombox ++;collapseDelay = 100000;}
     68c:	87 9b       	sbis	0x10, 7	; 16
     68e:	14 c0       	rjmp	.+40     	; 0x6b8 <main+0xfc>
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	88 16       	cp	r8, r24
     694:	91 04       	cpc	r9, r1
     696:	84 f4       	brge	.+32     	; 0x6b8 <main+0xfc>
     698:	08 94       	sec
     69a:	81 1c       	adc	r8, r1
     69c:	91 1c       	adc	r9, r1
     69e:	f0 ea       	ldi	r31, 0xA0	; 160
     6a0:	af 2e       	mov	r10, r31
     6a2:	f6 e8       	ldi	r31, 0x86	; 134
     6a4:	bf 2e       	mov	r11, r31
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	cf 2e       	mov	r12, r31
     6aa:	d1 2c       	mov	r13, r1
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <main+0xfc>

while ((!(PIND & MUSIC_BEAT)) && (collapseDelay > 0))
{collapseDelay --;}
     6ae:	08 94       	sec
     6b0:	a1 08       	sbc	r10, r1
     6b2:	b1 08       	sbc	r11, r1
     6b4:	c1 08       	sbc	r12, r1
     6b6:	d1 08       	sbc	r13, r1
while (xit == 0)
	{

 if ((PIND & MUSIC_BEAT) && (boombox < 3)) {boombox ++;collapseDelay = 100000;}

while ((!(PIND & MUSIC_BEAT)) && (collapseDelay > 0))
     6b8:	87 99       	sbic	0x10, 7	; 16
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <main+0x10c>
     6bc:	1a 14       	cp	r1, r10
     6be:	1b 04       	cpc	r1, r11
     6c0:	1c 04       	cpc	r1, r12
     6c2:	1d 04       	cpc	r1, r13
     6c4:	a4 f3       	brlt	.-24     	; 0x6ae <main+0xf2>
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <main+0x116>
{collapseDelay --;}
 if ((collapseDelay < 1) && (boombox > 0)) {collapseDelay = 100000; boombox --;fill(0x00);} // shink by 1 box
     6c8:	1a 14       	cp	r1, r10
     6ca:	1b 04       	cpc	r1, r11
     6cc:	1c 04       	cpc	r1, r12
     6ce:	1d 04       	cpc	r1, r13
     6d0:	84 f0       	brlt	.+32     	; 0x6f2 <main+0x136>
     6d2:	81 14       	cp	r8, r1
     6d4:	91 04       	cpc	r9, r1
     6d6:	99 f0       	breq	.+38     	; 0x6fe <main+0x142>
     6d8:	08 94       	sec
     6da:	81 08       	sbc	r8, r1
     6dc:	91 08       	sbc	r9, r1
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
     6e4:	e0 ea       	ldi	r30, 0xA0	; 160
     6e6:	ae 2e       	mov	r10, r30
     6e8:	e6 e8       	ldi	r30, 0x86	; 134
     6ea:	be 2e       	mov	r11, r30
     6ec:	e1 e0       	ldi	r30, 0x01	; 1
     6ee:	ce 2e       	mov	r12, r30
     6f0:	d1 2c       	mov	r13, r1
	
		ii = boombox;
		if (boombox > 0) {fill (0x00);} // removes last box by clearing cube - but not if there is no signal - this prevents flickering.	
     6f2:	81 14       	cp	r8, r1
     6f4:	91 04       	cpc	r9, r1
     6f6:	19 f0       	breq	.+6      	; 0x6fe <main+0x142>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
     6fe:	a4 01       	movw	r20, r8
     700:	4c 5f       	subi	r20, 0xFC	; 252
     702:	5f 4f       	sbci	r21, 0xFF	; 255
     704:	73 01       	movw	r14, r6
     706:	e8 18       	sub	r14, r8
     708:	f9 08       	sbc	r15, r9
     70a:	ca 01       	movw	r24, r20
     70c:	ba 01       	movw	r22, r20
     70e:	97 01       	movw	r18, r14
     710:	87 01       	movw	r16, r14
     712:	0e 94 29 0b 	call	0x1652	; 0x1652 <box_wireframe>
while (xit == 1) {delay_ms (500);} //wait for music button release
effect_stringfly2 ("1");

boombox = 0;

while (xit == 0)
     716:	80 91 b3 01 	lds	r24, 0x01B3
     71a:	90 91 b4 01 	lds	r25, 0x01B4
     71e:	89 2b       	or	r24, r25
     720:	09 f4       	brne	.+2      	; 0x724 <main+0x168>
     722:	b4 cf       	rjmp	.-152    	; 0x68c <main+0xd0>


//*************************************************************
// Music routine 2
//*************************************************************
fill (0x00);
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
     72a:	04 c0       	rjmp	.+8      	; 0x734 <main+0x178>
while (xit == 1) {delay_ms (500);}
     72c:	84 ef       	ldi	r24, 0xF4	; 244
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
     734:	80 91 b3 01 	lds	r24, 0x01B3
     738:	90 91 b4 01 	lds	r25, 0x01B4
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	b1 f3       	breq	.-20     	; 0x72c <main+0x170>
effect_stringfly2 ("2");	
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>

LUT_START // Macro
     748:	8e 01       	movw	r16, r28
     74a:	0f 57       	subi	r16, 0x7F	; 127
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 97 38 	call	0x712e	; 0x712e <init_LUT>
     754:	ee 24       	eor	r14, r14
		next_plane=rand()%6; //0-5
		// Check that not the same, and that:
		// 0/1 2/3 4/5 pairs do not exist.
		if ((next_plane&0x06)==(now_plane&0x06))
			next_plane=(next_plane+3)%6;
		effect_plane_flip(LUT,now_plane,next_plane,delay);
     756:	d0 2e       	mov	r13, r16
     758:	01 2f       	mov	r16, r17
     75a:	2b c0       	rjmp	.+86     	; 0x7b2 <main+0x1f6>
	int delay=200;
	while(PIND & MUSIC_BTN)
	{
while (!(PIND & MUSIC_BEAT) && (PIND & MUSIC_BTN))
		{
if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press
     75c:	86 9b       	sbis	0x10, 6	; 16
     75e:	04 c0       	rjmp	.+8      	; 0x768 <main+0x1ac>
	unsigned char now_plane=0;//start at top
	unsigned char next_plane;
	int delay=200;
	while(PIND & MUSIC_BTN)
	{
while (!(PIND & MUSIC_BEAT) && (PIND & MUSIC_BTN))
     760:	87 99       	sbic	0x10, 7	; 16
     762:	02 c0       	rjmp	.+4      	; 0x768 <main+0x1ac>
     764:	86 99       	sbic	0x10, 6	; 16
     766:	fa cf       	rjmp	.-12     	; 0x75c <main+0x1a0>
		{
if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press
		}
if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press
     768:	86 9b       	sbis	0x10, 6	; 16
     76a:	25 c0       	rjmp	.+74     	; 0x7b6 <main+0x1fa>

		next_plane=rand()%6; //0-5
     76c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     770:	66 e0       	ldi	r22, 0x06	; 6
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     778:	f8 2e       	mov	r15, r24
		// Check that not the same, and that:
		// 0/1 2/3 4/5 pairs do not exist.
		if ((next_plane&0x06)==(now_plane&0x06))
     77a:	28 2f       	mov	r18, r24
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	8e 2d       	mov	r24, r14
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	82 27       	eor	r24, r18
     784:	93 27       	eor	r25, r19
     786:	86 70       	andi	r24, 0x06	; 6
     788:	90 70       	andi	r25, 0x00	; 0
     78a:	89 2b       	or	r24, r25
     78c:	39 f4       	brne	.+14     	; 0x79c <main+0x1e0>
			next_plane=(next_plane+3)%6;
     78e:	c9 01       	movw	r24, r18
     790:	03 96       	adiw	r24, 0x03	; 3
     792:	66 e0       	ldi	r22, 0x06	; 6
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     79a:	f8 2e       	mov	r15, r24
		effect_plane_flip(LUT,now_plane,next_plane,delay);
     79c:	8d 2d       	mov	r24, r13
     79e:	90 2f       	mov	r25, r16
     7a0:	6e 2d       	mov	r22, r14
     7a2:	4f 2d       	mov	r20, r15
     7a4:	28 ec       	ldi	r18, 0xC8	; 200
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <effect_plane_flip>
		now_plane=next_plane;
if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press
     7ac:	ef 2c       	mov	r14, r15
     7ae:	86 9b       	sbis	0x10, 6	; 16
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <main+0x1fa>

LUT_START // Macro
	unsigned char now_plane=0;//start at top
	unsigned char next_plane;
	int delay=200;
	while(PIND & MUSIC_BTN)
     7b2:	86 99       	sbic	0x10, 6	; 16
     7b4:	d5 cf       	rjmp	.-86     	; 0x760 <main+0x1a4>
//*************************************************************
// Music routine 3
//*************************************************************

i = i;
fill (0x00);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <main+0x20a>
while (xit == 1) {delay_ms (500);}
     7be:	84 ef       	ldi	r24, 0xF4	; 244
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
     7c6:	80 91 b3 01 	lds	r24, 0x01B3
     7ca:	90 91 b4 01 	lds	r25, 0x01B4
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	b1 f3       	breq	.-20     	; 0x7be <main+0x202>
effect_stringfly2 ("3");
     7d2:	8a e6       	ldi	r24, 0x6A	; 106
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
     7da:	9e c0       	rjmp	.+316    	; 0x918 <__stack+0xb9>

// LED_PORT ^= LED_PGM; // change state of diag LED 
// PORTD = ( 0 << PD4 );
	{
		{
i = (rand()%9);
     7dc:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
pillar (0,0,i);
     7e0:	69 e0       	ldi	r22, 0x09	; 9
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     7e8:	ac 01       	movw	r20, r24
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <pillar>
i = (rand()%9);
     7f6:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
pillar (0,4,i);
     7fa:	69 e0       	ldi	r22, 0x09	; 9
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     802:	ac 01       	movw	r20, r24
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	64 e0       	ldi	r22, 0x04	; 4
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <pillar>
i = (rand()%9);
     810:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
pillar (2,2,i);
     814:	69 e0       	ldi	r22, 0x09	; 9
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     81c:	ac 01       	movw	r20, r24
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	62 e0       	ldi	r22, 0x02	; 2
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <pillar>
i = (rand()%9);
     82a:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
pillar (2,6,i);
     82e:	69 e0       	ldi	r22, 0x09	; 9
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     836:	ac 01       	movw	r20, r24
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	66 e0       	ldi	r22, 0x06	; 6
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <pillar>
i = (rand()%9);
     844:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
pillar (4,0,i);
     848:	69 e0       	ldi	r22, 0x09	; 9
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     850:	ac 01       	movw	r20, r24
     852:	84 e0       	ldi	r24, 0x04	; 4
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <pillar>
i = (rand()%9);
     85e:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
pillar (4,4,i);
     862:	69 e0       	ldi	r22, 0x09	; 9
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     86a:	ac 01       	movw	r20, r24
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	64 e0       	ldi	r22, 0x04	; 4
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <pillar>
i = (rand()%9);
     878:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
pillar (6,2,i);
     87c:	69 e0       	ldi	r22, 0x09	; 9
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     884:	ac 01       	movw	r20, r24
     886:	86 e0       	ldi	r24, 0x06	; 6
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	62 e0       	ldi	r22, 0x02	; 2
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <pillar>
i = (rand()%9);
     892:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     896:	69 e0       	ldi	r22, 0x09	; 9
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     89e:	8c 01       	movw	r16, r24
pillar (6,6,i);
     8a0:	86 e0       	ldi	r24, 0x06	; 6
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	66 e0       	ldi	r22, 0x06	; 6
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	a8 01       	movw	r20, r16
     8aa:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <pillar>

//}
//delay_ms(500);
//}
// PORTD = ( 1 << PD4 );
for (z=0;z<7;z++)
     8ae:	10 92 38 02 	sts	0x0238, r1
     8b2:	10 92 37 02 	sts	0x0237, r1
     8b6:	2a c0       	rjmp	.+84     	; 0x90c <__stack+0xad>

while ((!(PIND & MUSIC_BEAT)) && (i<20001)) // no beat or button, drop bars
// LED_PORT &= ~LED_PGM// turn off beat LED
// PORTD == (PIND & 11111111);
				{
delay_ms (100);
     8b8:	84 e6       	ldi	r24, 0x64	; 100
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
shift (AXIS_Z, -1);
     8c0:	8a e7       	ldi	r24, 0x7A	; 122
     8c2:	6f ef       	ldi	r22, 0xFF	; 255
     8c4:	7f ef       	ldi	r23, 0xFF	; 255
     8c6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <__stack+0x85>
//delay_ms (1000);
i=1;
while (i<20000)
					{
i++;
if ((PIND & MUSIC_BEAT))	{
     8d0:	87 9b       	sbis	0x10, 7	; 16
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <__stack+0x7b>
     8d4:	00 e2       	ldi	r16, 0x20	; 32
     8d6:	1e e4       	ldi	r17, 0x4E	; 78
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
// shift (AXIS_X, 1);
//delay_ms (1000);
i=1;
while (i<20000)
					{
i++;
     8da:	0f 5f       	subi	r16, 0xFF	; 255
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
if ((PIND & MUSIC_BEAT))	{
i=20000;
					}
if (!(PIND & MUSIC_BTN)) {i=20001;}//notify loop of button press
     8de:	81 e2       	ldi	r24, 0x21	; 33
     8e0:	9e e4       	ldi	r25, 0x4E	; 78
     8e2:	86 9b       	sbis	0x10, 6	; 16
     8e4:	8c 01       	movw	r16, r24
delay_ms (100);
shift (AXIS_Z, -1);
// shift (AXIS_X, 1);
//delay_ms (1000);
i=1;
while (i<20000)
     8e6:	8e e4       	ldi	r24, 0x4E	; 78
     8e8:	00 32       	cpi	r16, 0x20	; 32
     8ea:	18 07       	cpc	r17, r24
     8ec:	8c f3       	brlt	.-30     	; 0x8d0 <__stack+0x71>
//}
// PORTD = ( 1 << PD4 );
for (z=0;z<7;z++)
			{

while ((!(PIND & MUSIC_BEAT)) && (i<20001)) // no beat or button, drop bars
     8ee:	87 99       	sbic	0x10, 7	; 16
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__stack+0x9b>
     8f2:	8e e4       	ldi	r24, 0x4E	; 78
     8f4:	01 32       	cpi	r16, 0x21	; 33
     8f6:	18 07       	cpc	r17, r24
     8f8:	fc f2       	brlt	.-66     	; 0x8b8 <__stack+0x59>

//}
//delay_ms(500);
//}
// PORTD = ( 1 << PD4 );
for (z=0;z<7;z++)
     8fa:	80 91 37 02 	lds	r24, 0x0237
     8fe:	90 91 38 02 	lds	r25, 0x0238
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	90 93 38 02 	sts	0x0238, r25
     908:	80 93 37 02 	sts	0x0237, r24
     90c:	80 91 37 02 	lds	r24, 0x0237
     910:	90 91 38 02 	lds	r25, 0x0238
     914:	07 97       	sbiw	r24, 0x07	; 7
     916:	5c f3       	brlt	.-42     	; 0x8ee <__stack+0x8f>

i = i;
fill (0x00);
while (xit == 1) {delay_ms (500);}
effect_stringfly2 ("3");
while (PIND & MUSIC_BTN)  // run until MUSIC button pressed
     918:	86 99       	sbic	0x10, 6	; 16
     91a:	60 cf       	rjmp	.-320    	; 0x7dc <main+0x220>

//*************************************************************
// Music routine 4
//*************************************************************

fill (0x00);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
     922:	04 c0       	rjmp	.+8      	; 0x92c <__stack+0xcd>
i = 1;
while (xit == 1) {delay_ms (500);}
     924:	84 ef       	ldi	r24, 0xF4	; 244
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
     92c:	80 91 b3 01 	lds	r24, 0x01B3
     930:	90 91 b4 01 	lds	r25, 0x01B4
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	b1 f3       	breq	.-20     	; 0x924 <__stack+0xc5>
effect_stringfly2 ("4");
     938:	8c e6       	ldi	r24, 0x6C	; 108
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
     940:	01 e0       	ldi	r16, 0x01	; 1
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	47 c0       	rjmp	.+142    	; 0x9d4 <__stack+0x175>
while(PIND & MUSIC_BTN)
	{

for (x=0;x<8;x++)
     946:	10 92 b2 01 	sts	0x01B2, r1
     94a:	10 92 b1 01 	sts	0x01B1, r1
     94e:	1a c0       	rjmp	.+52     	; 0x984 <__stack+0x125>
		{
y = (rand()%9);
     950:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     954:	69 e0       	ldi	r22, 0x09	; 9
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     95c:	bc 01       	movw	r22, r24
     95e:	80 93 3b 02 	sts	0x023B, r24
     962:	70 93 3c 02 	sts	0x023C, r23
wall (x,y);
     966:	80 91 b1 01 	lds	r24, 0x01B1
     96a:	90 91 b2 01 	lds	r25, 0x01B2
     96e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <wall>
while (xit == 1) {delay_ms (500);}
effect_stringfly2 ("4");
while(PIND & MUSIC_BTN)
	{

for (x=0;x<8;x++)
     972:	80 91 b1 01 	lds	r24, 0x01B1
     976:	90 91 b2 01 	lds	r25, 0x01B2
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	90 93 b2 01 	sts	0x01B2, r25
     980:	80 93 b1 01 	sts	0x01B1, r24
     984:	80 91 b1 01 	lds	r24, 0x01B1
     988:	90 91 b2 01 	lds	r25, 0x01B2
     98c:	08 97       	sbiw	r24, 0x08	; 8
     98e:	04 f3       	brlt	.-64     	; 0x950 <__stack+0xf1>
     990:	1b c0       	rjmp	.+54     	; 0x9c8 <__stack+0x169>
y = (rand()%9);
wall (x,y);
		}
while ((!(PIND & MUSIC_BEAT)) && (i<20001)) // no beat or button, drop bars
		{
delay_ms (100);
     992:	84 e6       	ldi	r24, 0x64	; 100
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
shift (AXIS_Z, -1);
     99a:	8a e7       	ldi	r24, 0x7A	; 122
     99c:	6f ef       	ldi	r22, 0xFF	; 255
     99e:	7f ef       	ldi	r23, 0xFF	; 255
     9a0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0a c0       	rjmp	.+20     	; 0x9be <__stack+0x15f>
//delay_ms (1000);
i=1;
while (i<20000)
		{
i++;
if ((PIND & MUSIC_BEAT))	{
     9aa:	87 9b       	sbis	0x10, 7	; 16
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <__stack+0x155>
     9ae:	00 e2       	ldi	r16, 0x20	; 32
     9b0:	1e e4       	ldi	r17, 0x4E	; 78
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0x159>
// shift (AXIS_X, 1);
//delay_ms (1000);
i=1;
while (i<20000)
		{
i++;
     9b4:	0f 5f       	subi	r16, 0xFF	; 255
     9b6:	1f 4f       	sbci	r17, 0xFF	; 255
if ((PIND & MUSIC_BEAT))	{
i=20000;
					}
if (!(PIND & MUSIC_BTN)) {i=20001;}//notify loop of button press
     9b8:	81 e2       	ldi	r24, 0x21	; 33
     9ba:	9e e4       	ldi	r25, 0x4E	; 78
     9bc:	86 9b       	sbis	0x10, 6	; 16
     9be:	8c 01       	movw	r16, r24
delay_ms (100);
shift (AXIS_Z, -1);
// shift (AXIS_X, 1);
//delay_ms (1000);
i=1;
while (i<20000)
     9c0:	8e e4       	ldi	r24, 0x4E	; 78
     9c2:	00 32       	cpi	r16, 0x20	; 32
     9c4:	18 07       	cpc	r17, r24
     9c6:	8c f3       	brlt	.-30     	; 0x9aa <__stack+0x14b>
for (x=0;x<8;x++)
		{
y = (rand()%9);
wall (x,y);
		}
while ((!(PIND & MUSIC_BEAT)) && (i<20001)) // no beat or button, drop bars
     9c8:	87 99       	sbic	0x10, 7	; 16
     9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <__stack+0x175>
     9cc:	8e e4       	ldi	r24, 0x4E	; 78
     9ce:	01 32       	cpi	r16, 0x21	; 33
     9d0:	18 07       	cpc	r17, r24
     9d2:	fc f2       	brlt	.-66     	; 0x992 <__stack+0x133>

fill (0x00);
i = 1;
while (xit == 1) {delay_ms (500);}
effect_stringfly2 ("4");
while(PIND & MUSIC_BTN)
     9d4:	86 99       	sbic	0x10, 6	; 16
     9d6:	b7 cf       	rjmp	.-146    	; 0x946 <__stack+0xe7>
//*************************************************************
// Music routine 5
//*************************************************************

i = 1;
fill (0x00);
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__stack+0x189>
while (xit == 1) {delay_ms (500);}
     9e0:	84 ef       	ldi	r24, 0xF4	; 244
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
     9e8:	80 91 b3 01 	lds	r24, 0x01B3
     9ec:	90 91 b4 01 	lds	r25, 0x01B4
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	b1 f3       	breq	.-20     	; 0x9e0 <__stack+0x181>
effect_stringfly2 ("5");
     9f4:	8e e6       	ldi	r24, 0x6E	; 110
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
     9fc:	74 e0       	ldi	r23, 0x04	; 4
     9fe:	d7 2e       	mov	r13, r23
     a00:	5e c0       	rjmp	.+188    	; 0xabe <__stack+0x25f>

i = 1;
fill (0x00);
while (xit == 1) {delay_ms (500);}
effect_stringfly2 ("5");
while ((PIND & MUSIC_BTN))
     a02:	00 e0       	ldi	r16, 0x00	; 0
     a04:	10 e0       	ldi	r17, 0x00	; 0

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
     a06:	f1 01       	movw	r30, r2
     a08:	e0 0f       	add	r30, r16
     a0a:	f1 1f       	adc	r31, r17
     a0c:	d0 82       	st	Z, r13
		destinations[i] = rand()%8;
     a0e:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     a12:	f2 01       	movw	r30, r4
     a14:	e0 0f       	add	r30, r16
     a16:	f1 1f       	adc	r31, r17
     a18:	68 e0       	ldi	r22, 0x08	; 8
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     a20:	80 83       	st	Z, r24
	unsigned char positions[64];
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++)
     a22:	0f 5f       	subi	r16, 0xFF	; 255
     a24:	1f 4f       	sbci	r17, 0xFF	; 255
     a26:	00 34       	cpi	r16, 0x40	; 64
     a28:	11 05       	cpc	r17, r1
     a2a:	69 f7       	brne	.-38     	; 0xa06 <__stack+0x1a7>
     a2c:	00 e0       	ldi	r16, 0x00	; 0
     a2e:	10 e0       	ldi	r17, 0x00	; 0
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
     a30:	c1 01       	movw	r24, r2
     a32:	b2 01       	movw	r22, r4
     a34:	4a e7       	ldi	r20, 0x7A	; 122
     a36:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <effect_z_updown_move>
		delay_ms(updownspeed);
     a3a:	86 e9       	ldi	r24, 0x96	; 150
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	{
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
     a42:	0f 5f       	subi	r16, 0xFF	; 255
     a44:	1f 4f       	sbci	r17, 0xFF	; 255
     a46:	08 30       	cpi	r16, 0x08	; 8
     a48:	11 05       	cpc	r17, r1
     a4a:	91 f7       	brne	.-28     	; 0xa30 <__stack+0x1d1>
     a4c:	34 c0       	rjmp	.+104    	; 0xab6 <__stack+0x257>
     a4e:	00 e0       	ldi	r16, 0x00	; 0
     a50:	10 e0       	ldi	r17, 0x00	; 0
	// for (i=0;i<iterations;i++)
while (!(PIND & MUSIC_BEAT))
	{
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
     a52:	c1 01       	movw	r24, r2
     a54:	b2 01       	movw	r22, r4
     a56:	4a e7       	ldi	r20, 0x7A	; 122
     a58:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <effect_z_updown_move>
			delay_ms(updownspeed);
     a5c:	86 e9       	ldi	r24, 0x96	; 150
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	}
	
	// for (i=0;i<iterations;i++)
while (!(PIND & MUSIC_BEAT))
	{
		for (move=0;move<8;move++)
     a64:	0f 5f       	subi	r16, 0xFF	; 255
     a66:	1f 4f       	sbci	r17, 0xFF	; 255
     a68:	08 30       	cpi	r16, 0x08	; 8
     a6a:	11 05       	cpc	r17, r1
     a6c:	91 f7       	brne	.-28     	; 0xa52 <__stack+0x1f3>
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x215>
			delay_ms(updownspeed);
		}

	while (!(PIND & MUSIC_BEAT))
		{
if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press
     a70:	86 9b       	sbis	0x10, 6	; 16
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <__stack+0x219>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(updownspeed);
		}

	while (!(PIND & MUSIC_BEAT))
     a74:	87 9b       	sbis	0x10, 7	; 16
     a76:	fc cf       	rjmp	.-8      	; 0xa70 <__stack+0x211>
     a78:	ee 24       	eor	r14, r14
     a7a:	ff 24       	eor	r15, r15
		}


		for (y=0;y<32;y++)
		{
				destinations[rand()%64] = rand()%8;
     a7c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     a80:	8c 01       	movw	r16, r24
     a82:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     a86:	9c 01       	movw	r18, r24
     a88:	c8 01       	movw	r24, r16
     a8a:	60 e4       	ldi	r22, 0x40	; 64
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     a92:	f2 01       	movw	r30, r4
     a94:	e8 0f       	add	r30, r24
     a96:	f9 1f       	adc	r31, r25
     a98:	c9 01       	movw	r24, r18
     a9a:	68 e0       	ldi	r22, 0x08	; 8
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     aa2:	80 83       	st	Z, r24
		{
if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press
		}


		for (y=0;y<32;y++)
     aa4:	08 94       	sec
     aa6:	e1 1c       	adc	r14, r1
     aa8:	f1 1c       	adc	r15, r1
     aaa:	80 e2       	ldi	r24, 0x20	; 32
     aac:	e8 16       	cp	r14, r24
     aae:	f1 04       	cpc	r15, r1
     ab0:	29 f7       	brne	.-54     	; 0xa7c <__stack+0x21d>
		{
				destinations[rand()%64] = rand()%8;
		}
	if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press	
     ab2:	86 9b       	sbis	0x10, 6	; 16
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <__stack+0x25b>
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(updownspeed);
	}
	
	// for (i=0;i<iterations;i++)
while (!(PIND & MUSIC_BEAT))
     ab6:	87 9b       	sbis	0x10, 7	; 16
     ab8:	ca cf       	rjmp	.-108    	; 0xa4e <__stack+0x1ef>
		{
				destinations[rand()%64] = rand()%8;
		}
	if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press	
	}
if (!(PIND & MUSIC_BTN)) {break;}//notify loop of button press
     aba:	86 9b       	sbis	0x10, 6	; 16
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <__stack+0x263>

i = 1;
fill (0x00);
while (xit == 1) {delay_ms (500);}
effect_stringfly2 ("5");
while ((PIND & MUSIC_BTN))
     abe:	86 99       	sbic	0x10, 6	; 16
     ac0:	a0 cf       	rjmp	.-192    	; 0xa02 <__stack+0x1a3>

//*************************************************************
// Music routine 6
//*************************************************************

fill (0x00);
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
i = 1;
x = (rand()%9);
     ac8:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     acc:	69 e0       	ldi	r22, 0x09	; 9
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     ad4:	90 93 b2 01 	sts	0x01B2, r25
     ad8:	80 93 b1 01 	sts	0x01B1, r24
y = (rand()%9);
     adc:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     ae0:	69 e0       	ldi	r22, 0x09	; 9
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     ae8:	90 93 3c 02 	sts	0x023C, r25
     aec:	80 93 3b 02 	sts	0x023B, r24
z = (rand()%9);
     af0:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     af4:	69 e0       	ldi	r22, 0x09	; 9
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     afc:	90 93 38 02 	sts	0x0238, r25
     b00:	80 93 37 02 	sts	0x0237, r24
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <__stack+0x2af>
while (xit == 1) {delay_ms (500);}
     b06:	84 ef       	ldi	r24, 0xF4	; 244
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
     b0e:	80 91 b3 01 	lds	r24, 0x01B3
     b12:	90 91 b4 01 	lds	r25, 0x01B4
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	b1 f3       	breq	.-20     	; 0xb06 <__stack+0x2a7>
effect_stringfly2 ("6");
     b1a:	80 e7       	ldi	r24, 0x70	; 112
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
     b22:	01 e0       	ldi	r16, 0x01	; 1
     b24:	10 e0       	ldi	r17, 0x00	; 0
     b26:	6c c0       	rjmp	.+216    	; 0xc00 <__stack+0x3a1>
while(PIND & MUSIC_BTN)
	{
x = (rand()%9);
     b28:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     b2c:	69 e0       	ldi	r22, 0x09	; 9
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     b34:	90 93 b2 01 	sts	0x01B2, r25
     b38:	80 93 b1 01 	sts	0x01B1, r24
y = (rand()%9);
     b3c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     b40:	69 e0       	ldi	r22, 0x09	; 9
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     b48:	90 93 3c 02 	sts	0x023C, r25
     b4c:	80 93 3b 02 	sts	0x023B, r24
z = (rand()%9);
     b50:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     b54:	69 e0       	ldi	r22, 0x09	; 9
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     b5c:	ac 01       	movw	r20, r24
     b5e:	80 93 37 02 	sts	0x0237, r24
     b62:	50 93 38 02 	sts	0x0238, r21
setvoxel (x,y,z);  
     b66:	60 91 3b 02 	lds	r22, 0x023B
     b6a:	70 91 3c 02 	lds	r23, 0x023C
     b6e:	80 91 b1 01 	lds	r24, 0x01B1
     b72:	90 91 b2 01 	lds	r25, 0x01B2
     b76:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
     b7a:	3b c0       	rjmp	.+118    	; 0xbf2 <__stack+0x393>
// wave = (rand()%9);
// delay_ms (100);		
while ((!(PIND & MUSIC_BEAT)) && (i<20001)) 
		{
x = (rand()%9);
     b7c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     b80:	69 e0       	ldi	r22, 0x09	; 9
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     b88:	90 93 b2 01 	sts	0x01B2, r25
     b8c:	80 93 b1 01 	sts	0x01B1, r24
y = (rand()%9);
     b90:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     b94:	69 e0       	ldi	r22, 0x09	; 9
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     b9c:	90 93 3c 02 	sts	0x023C, r25
     ba0:	80 93 3b 02 	sts	0x023B, r24
z = (rand()%9);
     ba4:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     ba8:	69 e0       	ldi	r22, 0x09	; 9
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     bb0:	ac 01       	movw	r20, r24
     bb2:	80 93 37 02 	sts	0x0237, r24
     bb6:	50 93 38 02 	sts	0x0238, r21
clrvoxel (x,y,z);  
     bba:	60 91 3b 02 	lds	r22, 0x023B
     bbe:	70 91 3c 02 	lds	r23, 0x023C
     bc2:	80 91 b1 01 	lds	r24, 0x01B1
     bc6:	90 91 b2 01 	lds	r25, 0x01B2
     bca:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0a c0       	rjmp	.+20     	; 0xbe8 <__stack+0x389>

i=1;
while (i<2000)
		{
i++;
if ((PIND & MUSIC_BEAT))	{
     bd4:	87 9b       	sbis	0x10, 7	; 16
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <__stack+0x37f>
     bd8:	00 ed       	ldi	r16, 0xD0	; 208
     bda:	17 e0       	ldi	r17, 0x07	; 7
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <__stack+0x383>


i=1;
while (i<2000)
		{
i++;
     bde:	0f 5f       	subi	r16, 0xFF	; 255
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
if ((PIND & MUSIC_BEAT))	{
i=2000;
					}
if (!(PIND & MUSIC_BTN)) {i=20001;}//notify loop of button press
     be2:	81 e2       	ldi	r24, 0x21	; 33
     be4:	9e e4       	ldi	r25, 0x4E	; 78
     be6:	86 9b       	sbis	0x10, 6	; 16
     be8:	8c 01       	movw	r16, r24
z = (rand()%9);
clrvoxel (x,y,z);  


i=1;
while (i<2000)
     bea:	87 e0       	ldi	r24, 0x07	; 7
     bec:	00 3d       	cpi	r16, 0xD0	; 208
     bee:	18 07       	cpc	r17, r24
     bf0:	8c f3       	brlt	.-30     	; 0xbd4 <__stack+0x375>
y = (rand()%9);
z = (rand()%9);
setvoxel (x,y,z);  
// wave = (rand()%9);
// delay_ms (100);		
while ((!(PIND & MUSIC_BEAT)) && (i<20001)) 
     bf2:	87 99       	sbic	0x10, 7	; 16
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__stack+0x3a1>
     bf6:	8e e4       	ldi	r24, 0x4E	; 78
     bf8:	01 32       	cpi	r16, 0x21	; 33
     bfa:	18 07       	cpc	r17, r24
     bfc:	0c f4       	brge	.+2      	; 0xc00 <__stack+0x3a1>
     bfe:	be cf       	rjmp	.-132    	; 0xb7c <__stack+0x31d>
x = (rand()%9);
y = (rand()%9);
z = (rand()%9);
while (xit == 1) {delay_ms (500);}
effect_stringfly2 ("6");
while(PIND & MUSIC_BTN)
     c00:	86 99       	sbic	0x10, 6	; 16
     c02:	92 cf       	rjmp	.-220    	; 0xb28 <__stack+0x2c9>
//*************************************************************
// Music routine 7
//*************************************************************

int i = 1;
fill (0x00);
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__stack+0x3b5>
while (xit == 1) {delay_ms (500);}
     c0c:	84 ef       	ldi	r24, 0xF4	; 244
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
     c14:	80 91 b3 01 	lds	r24, 0x01B3
     c18:	90 91 b4 01 	lds	r25, 0x01B4
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	b1 f3       	breq	.-20     	; 0xc0c <__stack+0x3ad>

effect_stringfly2 ("7");
     c20:	82 e7       	ldi	r24, 0x72	; 114
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
     c28:	01 e0       	ldi	r16, 0x01	; 1
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	6f c0       	rjmp	.+222    	; 0xd0c <__stack+0x4ad>
while (PIND & MUSIC_BTN) // run until MUSIC button pressed
	{
for (x=0; x<8; x++)
     c2e:	10 92 b2 01 	sts	0x01B2, r1
     c32:	10 92 b1 01 	sts	0x01B1, r1
     c36:	2f c0       	rjmp	.+94     	; 0xc96 <__stack+0x437>
		{
for (y=0; y<8; y++)
     c38:	10 92 3c 02 	sts	0x023C, r1
     c3c:	10 92 3b 02 	sts	0x023B, r1
     c40:	1b c0       	rjmp	.+54     	; 0xc78 <__stack+0x419>
			{
i = (rand()%9);
     c42:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
     c46:	69 e0       	ldi	r22, 0x09	; 9
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
     c4e:	8c 01       	movw	r16, r24
spike(x,y,i);
     c50:	60 91 3b 02 	lds	r22, 0x023B
     c54:	70 91 3c 02 	lds	r23, 0x023C
     c58:	80 91 b1 01 	lds	r24, 0x01B1
     c5c:	90 91 b2 01 	lds	r25, 0x01B2
     c60:	a8 01       	movw	r20, r16
     c62:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <spike>
effect_stringfly2 ("7");
while (PIND & MUSIC_BTN) // run until MUSIC button pressed
	{
for (x=0; x<8; x++)
		{
for (y=0; y<8; y++)
     c66:	80 91 3b 02 	lds	r24, 0x023B
     c6a:	90 91 3c 02 	lds	r25, 0x023C
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	90 93 3c 02 	sts	0x023C, r25
     c74:	80 93 3b 02 	sts	0x023B, r24
     c78:	80 91 3b 02 	lds	r24, 0x023B
     c7c:	90 91 3c 02 	lds	r25, 0x023C
     c80:	08 97       	sbiw	r24, 0x08	; 8
     c82:	fc f2       	brlt	.-66     	; 0xc42 <__stack+0x3e3>
while (xit == 1) {delay_ms (500);}

effect_stringfly2 ("7");
while (PIND & MUSIC_BTN) // run until MUSIC button pressed
	{
for (x=0; x<8; x++)
     c84:	80 91 b1 01 	lds	r24, 0x01B1
     c88:	90 91 b2 01 	lds	r25, 0x01B2
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	90 93 b2 01 	sts	0x01B2, r25
     c92:	80 93 b1 01 	sts	0x01B1, r24
     c96:	80 91 b1 01 	lds	r24, 0x01B1
     c9a:	90 91 b2 01 	lds	r25, 0x01B2
     c9e:	08 97       	sbiw	r24, 0x08	; 8
     ca0:	5c f2       	brlt	.-106    	; 0xc38 <__stack+0x3d9>
spike(x,y,i);
			}
//delay_ms(500);
		}
// PORTD = ( 1 << PD4 );
for (z=0;z<7;z++)
     ca2:	10 92 38 02 	sts	0x0238, r1
     ca6:	10 92 37 02 	sts	0x0237, r1
     caa:	2a c0       	rjmp	.+84     	; 0xd00 <__stack+0x4a1>
		{

while ((!(PIND & MUSIC_BEAT)) & (i<20001)) // no beat or button - drop bars
			{
delay_ms (100);
     cac:	84 e6       	ldi	r24, 0x64	; 100
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
shift (AXIS_Z, -1);
     cb4:	8a e7       	ldi	r24, 0x7A	; 122
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0a c0       	rjmp	.+20     	; 0xcd8 <__stack+0x479>
//delay_ms (1000);
i=1;
while (i<20000)
				{
i++;
if (PIND & MUSIC_BEAT) // if beat while falling, end delay
     cc4:	87 9b       	sbis	0x10, 7	; 16
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <__stack+0x46f>
     cc8:	00 e2       	ldi	r16, 0x20	; 32
     cca:	1e e4       	ldi	r17, 0x4E	; 78
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <__stack+0x473>
// shift (AXIS_X, 1);
//delay_ms (1000);
i=1;
while (i<20000)
				{
i++;
     cce:	0f 5f       	subi	r16, 0xFF	; 255
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
if (PIND & MUSIC_BEAT) // if beat while falling, end delay
					{
i=20000;
					}
if (!(PIND & MUSIC_BTN)) {i=20001;}//notify loop of button press
     cd2:	81 e2       	ldi	r24, 0x21	; 33
     cd4:	9e e4       	ldi	r25, 0x4E	; 78
     cd6:	86 9b       	sbis	0x10, 6	; 16
     cd8:	8c 01       	movw	r16, r24
delay_ms (100);
shift (AXIS_Z, -1);
// shift (AXIS_X, 1);
//delay_ms (1000);
i=1;
while (i<20000)
     cda:	8e e4       	ldi	r24, 0x4E	; 78
     cdc:	00 32       	cpi	r16, 0x20	; 32
     cde:	18 07       	cpc	r17, r24
     ce0:	8c f3       	brlt	.-30     	; 0xcc4 <__stack+0x465>
		}
// PORTD = ( 1 << PD4 );
for (z=0;z<7;z++)
		{

while ((!(PIND & MUSIC_BEAT)) & (i<20001)) // no beat or button - drop bars
     ce2:	87 99       	sbic	0x10, 7	; 16
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__stack+0x48f>
     ce6:	8e e4       	ldi	r24, 0x4E	; 78
     ce8:	01 32       	cpi	r16, 0x21	; 33
     cea:	18 07       	cpc	r17, r24
     cec:	fc f2       	brlt	.-66     	; 0xcac <__stack+0x44d>
spike(x,y,i);
			}
//delay_ms(500);
		}
// PORTD = ( 1 << PD4 );
for (z=0;z<7;z++)
     cee:	80 91 37 02 	lds	r24, 0x0237
     cf2:	90 91 38 02 	lds	r25, 0x0238
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	90 93 38 02 	sts	0x0238, r25
     cfc:	80 93 37 02 	sts	0x0237, r24
     d00:	80 91 37 02 	lds	r24, 0x0237
     d04:	90 91 38 02 	lds	r25, 0x0238
     d08:	07 97       	sbiw	r24, 0x07	; 7
     d0a:	5c f3       	brlt	.-42     	; 0xce2 <__stack+0x483>
int i = 1;
fill (0x00);
while (xit == 1) {delay_ms (500);}

effect_stringfly2 ("7");
while (PIND & MUSIC_BTN) // run until MUSIC button pressed
     d0c:	86 9b       	sbis	0x10, 6	; 16
     d0e:	9f cc       	rjmp	.-1730   	; 0x64e <main+0x92>
     d10:	8e cf       	rjmp	.-228    	; 0xc2e <__stack+0x3cf>
// Music mode end
//************************************************************* 
	
	// Result for bootwait() is 2:
	// Go to rs232 mode. this function loops forever.
	if (i == 2)
     d12:	82 30       	cpi	r24, 0x02	; 2
     d14:	91 05       	cpc	r25, r1
     d16:	69 f4       	brne	.+26     	; 0xd32 <__stack+0x4d3>
	{
		fill (0x00); // clear any self test remainder off the screen
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
		effect_stringfly2 ("TTL SERIAL");
     d1e:	84 e7       	ldi	r24, 0x74	; 116
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
		fill (0X00); // clear the cube
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
LED_PORT &= ~LED_PGM; // turn off the diag LED
     d2c:	94 98       	cbi	0x12, 4	; 18
		rs232(); 
     d2e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <rs232>
     d32:	01 e0       	ldi	r16, 0x01	; 1
     d34:	10 e0       	ldi	r17, 0x00	; 0
// EFFECTS_TOTAL = 2; // was here for testing
	// Show the effects in a predefined order
		for (i=1;  i<EFFECTS_TOTAL;  i++)
		{

launch_effect(i);
     d36:	c8 01       	movw	r24, r16
     d38:	0e 94 79 31 	call	0x62f2	; 0x62f2 <launch_effect>

while (1)
	{
// EFFECTS_TOTAL = 2; // was here for testing
	// Show the effects in a predefined order
		for (i=1;  i<EFFECTS_TOTAL;  i++)
     d3c:	0f 5f       	subi	r16, 0xFF	; 255
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
     d40:	04 32       	cpi	r16, 0x24	; 36
     d42:	11 05       	cpc	r17, r1
     d44:	b4 f7       	brge	.-20     	; 0xd32 <__stack+0x4d3>
     d46:	f7 cf       	rjmp	.-18     	; 0xd36 <__stack+0x4d7>

00000d48 <inrange>:
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < CUBE_SIZE && y >= 0 && y < CUBE_SIZE && z >= 0 && z < CUBE_SIZE)
     d48:	08 97       	sbiw	r24, 0x08	; 8
     d4a:	78 f4       	brcc	.+30     	; 0xd6a <inrange+0x22>
     d4c:	77 fd       	sbrc	r23, 7
     d4e:	0d c0       	rjmp	.+26     	; 0xd6a <inrange+0x22>
     d50:	68 30       	cpi	r22, 0x08	; 8
     d52:	71 05       	cpc	r23, r1
     d54:	54 f4       	brge	.+20     	; 0xd6a <inrange+0x22>
     d56:	57 fd       	sbrc	r21, 7
     d58:	08 c0       	rjmp	.+16     	; 0xd6a <inrange+0x22>
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	48 30       	cpi	r20, 0x08	; 8
     d5e:	51 05       	cpc	r21, r1
     d60:	0c f0       	brlt	.+2      	; 0xd64 <inrange+0x1c>
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	98 27       	eor	r25, r24
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <inrange+0x24>
     d6a:	90 e0       	ldi	r25, 0x00	; 0
	} else
	{
		// One of the coordinates was outside the cube.
		return 0;
	}
}
     d6c:	89 2f       	mov	r24, r25
     d6e:	08 95       	ret

00000d70 <tmpclrvoxel>:
		cube[z][y] &= ~(1 << x);
}

// Set a single voxel to OFF
void tmpclrvoxel(int x, int y, int z)
{
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	f8 2e       	mov	r15, r24
     d7c:	8b 01       	movw	r16, r22
     d7e:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     d80:	0e 94 a4 06 	call	0xd48	; 0xd48 <inrange>
     d84:	88 23       	and	r24, r24
     d86:	a9 f0       	breq	.+42     	; 0xdb2 <tmpclrvoxel+0x42>
		fb[z][y] &= ~(1 << x);
     d88:	fe 01       	movw	r30, r28
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	8a 95       	dec	r24
     d92:	e1 f7       	brne	.-8      	; 0xd8c <tmpclrvoxel+0x1c>
     d94:	e0 0f       	add	r30, r16
     d96:	f1 1f       	adc	r31, r17
     d98:	e9 54       	subi	r30, 0x49	; 73
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	20 81       	ld	r18, Z
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <tmpclrvoxel+0x38>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	fa 94       	dec	r15
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <tmpclrvoxel+0x34>
     dac:	80 95       	com	r24
     dae:	82 23       	and	r24, r18
     db0:	80 83       	st	Z, r24
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	08 95       	ret

00000dbe <clrvoxel>:
		fb[z][y] |= (1 << x);
}

// Set a single voxel to OFF
void clrvoxel(int x, int y, int z)
{
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	f8 2e       	mov	r15, r24
     dca:	8b 01       	movw	r16, r22
     dcc:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     dce:	0e 94 a4 06 	call	0xd48	; 0xd48 <inrange>
     dd2:	88 23       	and	r24, r24
     dd4:	a9 f0       	breq	.+42     	; 0xe00 <clrvoxel+0x42>
		cube[z][y] &= ~(1 << x);
     dd6:	fe 01       	movw	r30, r28
     dd8:	93 e0       	ldi	r25, 0x03	; 3
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	9a 95       	dec	r25
     de0:	e1 f7       	brne	.-8      	; 0xdda <clrvoxel+0x1c>
     de2:	e0 0f       	add	r30, r16
     de4:	f1 1f       	adc	r31, r17
     de6:	e9 50       	subi	r30, 0x09	; 9
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	20 81       	ld	r18, Z
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <clrvoxel+0x38>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	fa 94       	dec	r15
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <clrvoxel+0x34>
     dfa:	80 95       	com	r24
     dfc:	82 23       	and	r24, r18
     dfe:	80 83       	st	Z, r24
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	08 95       	ret

00000e0c <tmpsetvoxel>:
		cube[z][y] |= (1 << x);
}

// Set a single voxel in the temporary cube buffer to ON
void tmpsetvoxel(int x, int y, int z)
{
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	f8 2e       	mov	r15, r24
     e18:	8b 01       	movw	r16, r22
     e1a:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     e1c:	0e 94 a4 06 	call	0xd48	; 0xd48 <inrange>
     e20:	88 23       	and	r24, r24
     e22:	a1 f0       	breq	.+40     	; 0xe4c <tmpsetvoxel+0x40>
		fb[z][y] |= (1 << x);
     e24:	fe 01       	movw	r30, r28
     e26:	23 e0       	ldi	r18, 0x03	; 3
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	2a 95       	dec	r18
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <tmpsetvoxel+0x1c>
     e30:	e0 0f       	add	r30, r16
     e32:	f1 1f       	adc	r31, r17
     e34:	e9 54       	subi	r30, 0x49	; 73
     e36:	fe 4f       	sbci	r31, 0xFE	; 254
     e38:	20 81       	ld	r18, Z
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <tmpsetvoxel+0x38>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	fa 94       	dec	r15
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <tmpsetvoxel+0x34>
     e48:	28 2b       	or	r18, r24
     e4a:	20 83       	st	Z, r18
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	08 95       	ret

00000e58 <setvoxel>:

// ******************************************

// Set a single voxel to ON
void setvoxel(int x, int y, int z)
{
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	f8 2e       	mov	r15, r24
     e64:	8b 01       	movw	r16, r22
     e66:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     e68:	0e 94 a4 06 	call	0xd48	; 0xd48 <inrange>
     e6c:	88 23       	and	r24, r24
     e6e:	a1 f0       	breq	.+40     	; 0xe98 <setvoxel+0x40>
		cube[z][y] |= (1 << x);
     e70:	fe 01       	movw	r30, r28
     e72:	33 e0       	ldi	r19, 0x03	; 3
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	3a 95       	dec	r19
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <setvoxel+0x1c>
     e7c:	e0 0f       	add	r30, r16
     e7e:	f1 1f       	adc	r31, r17
     e80:	e9 50       	subi	r30, 0x09	; 9
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	20 81       	ld	r18, Z
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <setvoxel+0x38>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	fa 94       	dec	r15
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <setvoxel+0x34>
     e94:	28 2b       	or	r18, r24
     e96:	20 83       	st	Z, r18
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	08 95       	ret

00000ea4 <line_3d>:

// ******************************************
// 3D addins ********************************
// ******************************************
void line_3d (int x1, int y1, int z1, int x2, int y2, int z2)
{
     ea4:	2f 92       	push	r2
     ea6:	3f 92       	push	r3
     ea8:	4f 92       	push	r4
     eaa:	5f 92       	push	r5
     eac:	6f 92       	push	r6
     eae:	7f 92       	push	r7
     eb0:	8f 92       	push	r8
     eb2:	9f 92       	push	r9
     eb4:	af 92       	push	r10
     eb6:	bf 92       	push	r11
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	2c 97       	sbiw	r28, 0x0c	; 12
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
	err_1, err_2, dx2, dy2, dz2;
	int pixel[3];
	pixel[0] = x1;
	pixel[1] = y1;
	pixel[2] = z1;
	dx = x2 - x1;
     ed8:	28 1b       	sub	r18, r24
     eda:	39 0b       	sbc	r19, r25
	dy = y2 - y1;
     edc:	06 1b       	sub	r16, r22
     ede:	17 0b       	sbc	r17, r23
	dz = z2 - z1;
     ee0:	e4 1a       	sub	r14, r20
     ee2:	f5 0a       	sbc	r15, r21
	x_inc = (dx < 0) ? -1 : 1;
     ee4:	37 fd       	sbrc	r19, 7
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <line_3d+0x4e>
     ee8:	a1 e0       	ldi	r26, 0x01	; 1
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	ba 87       	std	Y+10, r27	; 0x0a
     eee:	a9 87       	std	Y+9, r26	; 0x09
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <line_3d+0x56>
     ef2:	ef ef       	ldi	r30, 0xFF	; 255
     ef4:	ff ef       	ldi	r31, 0xFF	; 255
     ef6:	fa 87       	std	Y+10, r31	; 0x0a
     ef8:	e9 87       	std	Y+9, r30	; 0x09
	l = abs(dx);
     efa:	3c 87       	std	Y+12, r19	; 0x0c
     efc:	2b 87       	std	Y+11, r18	; 0x0b
     efe:	37 ff       	sbrs	r19, 7
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <line_3d+0x68>
     f02:	30 95       	com	r19
     f04:	21 95       	neg	r18
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	3c 87       	std	Y+12, r19	; 0x0c
     f0a:	2b 87       	std	Y+11, r18	; 0x0b
	y_inc = (dy < 0) ? -1 : 1;
     f0c:	17 fd       	sbrc	r17, 7
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <line_3d+0x76>
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	38 87       	std	Y+8, r19	; 0x08
     f16:	2f 83       	std	Y+7, r18	; 0x07
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <line_3d+0x7e>
     f1a:	af ef       	ldi	r26, 0xFF	; 255
     f1c:	bf ef       	ldi	r27, 0xFF	; 255
     f1e:	b8 87       	std	Y+8, r27	; 0x08
     f20:	af 83       	std	Y+7, r26	; 0x07
	m = abs(dy);
     f22:	17 ff       	sbrs	r17, 7
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <line_3d+0x88>
     f26:	10 95       	com	r17
     f28:	01 95       	neg	r16
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
	z_inc = (dz < 0) ? -1 : 1;
     f2c:	f7 fc       	sbrc	r15, 7
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <line_3d+0x96>
     f30:	e1 e0       	ldi	r30, 0x01	; 1
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	fe 83       	std	Y+6, r31	; 0x06
     f36:	ed 83       	std	Y+5, r30	; 0x05
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <line_3d+0x9e>
     f3a:	2f ef       	ldi	r18, 0xFF	; 255
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	3e 83       	std	Y+6, r19	; 0x06
     f40:	2d 83       	std	Y+5, r18	; 0x05
	n = abs(dz);
     f42:	f7 fe       	sbrs	r15, 7
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <line_3d+0xaa>
     f46:	f0 94       	com	r15
     f48:	e1 94       	neg	r14
     f4a:	f1 08       	sbc	r15, r1
     f4c:	f3 94       	inc	r15
	dx2 = l << 1;
     f4e:	ab 85       	ldd	r26, Y+11	; 0x0b
     f50:	bc 85       	ldd	r27, Y+12	; 0x0c
     f52:	aa 0f       	add	r26, r26
     f54:	bb 1f       	adc	r27, r27
     f56:	bc 83       	std	Y+4, r27	; 0x04
     f58:	ab 83       	std	Y+3, r26	; 0x03
	dy2 = m << 1;
     f5a:	f8 01       	movw	r30, r16
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	fa 83       	std	Y+2, r31	; 0x02
     f62:	e9 83       	std	Y+1, r30	; 0x01
	dz2 = n << 1;
     f64:	17 01       	movw	r2, r14
     f66:	22 0c       	add	r2, r2
     f68:	33 1c       	adc	r3, r3
	if ((l >= m) && (l >= n)) {
     f6a:	2b 85       	ldd	r18, Y+11	; 0x0b
     f6c:	3c 85       	ldd	r19, Y+12	; 0x0c
     f6e:	20 17       	cp	r18, r16
     f70:	31 07       	cpc	r19, r17
     f72:	0c f4       	brge	.+2      	; 0xf76 <line_3d+0xd2>
     f74:	44 c0       	rjmp	.+136    	; 0xffe <line_3d+0x15a>
     f76:	2e 15       	cp	r18, r14
     f78:	3f 05       	cpc	r19, r15
     f7a:	dc f1       	brlt	.+118    	; 0xff2 <line_3d+0x14e>
	err_1 = dy2 - l;
     f7c:	7f 01       	movw	r14, r30
     f7e:	e2 1a       	sub	r14, r18
     f80:	f3 0a       	sbc	r15, r19
	err_2 = dz2 - l;
     f82:	81 01       	movw	r16, r2
     f84:	02 1b       	sub	r16, r18
     f86:	13 0b       	sbc	r17, r19
     f88:	3c 01       	movw	r6, r24
     f8a:	4a 01       	movw	r8, r20
     f8c:	5b 01       	movw	r10, r22
     f8e:	44 24       	eor	r4, r4
     f90:	55 24       	eor	r5, r5
     f92:	28 c0       	rjmp	.+80     	; 0xfe4 <line_3d+0x140>
	for (i = 0; i < l; i++) {
	//PUT_PIXEL(pixel);
	setvoxel(pixel[0],pixel[1],pixel[2]);
     f94:	c3 01       	movw	r24, r6
     f96:	b5 01       	movw	r22, r10
     f98:	a4 01       	movw	r20, r8
     f9a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	//printf("Setting %i %i %i \n", pixel[0],pixel[1],pixel[2]);
	if (err_1 > 0) {
     f9e:	1e 14       	cp	r1, r14
     fa0:	1f 04       	cpc	r1, r15
     fa2:	44 f4       	brge	.+16     	; 0xfb4 <line_3d+0x110>
	pixel[1] += y_inc;
     fa4:	8f 81       	ldd	r24, Y+7	; 0x07
     fa6:	98 85       	ldd	r25, Y+8	; 0x08
     fa8:	a8 0e       	add	r10, r24
     faa:	b9 1e       	adc	r11, r25
	err_1 -= dx2;
     fac:	ab 81       	ldd	r26, Y+3	; 0x03
     fae:	bc 81       	ldd	r27, Y+4	; 0x04
     fb0:	ea 1a       	sub	r14, r26
     fb2:	fb 0a       	sbc	r15, r27
	}
	if (err_2 > 0) {
     fb4:	10 16       	cp	r1, r16
     fb6:	11 06       	cpc	r1, r17
     fb8:	44 f4       	brge	.+16     	; 0xfca <line_3d+0x126>
	pixel[2] += z_inc;
     fba:	ed 81       	ldd	r30, Y+5	; 0x05
     fbc:	fe 81       	ldd	r31, Y+6	; 0x06
     fbe:	8e 0e       	add	r8, r30
     fc0:	9f 1e       	adc	r9, r31
	err_2 -= dx2;
     fc2:	2b 81       	ldd	r18, Y+3	; 0x03
     fc4:	3c 81       	ldd	r19, Y+4	; 0x04
     fc6:	02 1b       	sub	r16, r18
     fc8:	13 0b       	sbc	r17, r19
	}
	err_1 += dy2;
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	e8 0e       	add	r14, r24
     fd0:	f9 1e       	adc	r15, r25
	err_2 += dz2;
     fd2:	02 0d       	add	r16, r2
     fd4:	13 1d       	adc	r17, r3
	dy2 = m << 1;
	dz2 = n << 1;
	if ((l >= m) && (l >= n)) {
	err_1 = dy2 - l;
	err_2 = dz2 - l;
	for (i = 0; i < l; i++) {
     fd6:	08 94       	sec
     fd8:	41 1c       	adc	r4, r1
     fda:	51 1c       	adc	r5, r1
     fdc:	a9 85       	ldd	r26, Y+9	; 0x09
     fde:	ba 85       	ldd	r27, Y+10	; 0x0a
     fe0:	6a 0e       	add	r6, r26
     fe2:	7b 1e       	adc	r7, r27
     fe4:	63 01       	movw	r12, r6
     fe6:	eb 85       	ldd	r30, Y+11	; 0x0b
     fe8:	fc 85       	ldd	r31, Y+12	; 0x0c
     fea:	4e 16       	cp	r4, r30
     fec:	5f 06       	cpc	r5, r31
     fee:	94 f2       	brlt	.-92     	; 0xf94 <line_3d+0xf0>
     ff0:	90 c0       	rjmp	.+288    	; 0x1112 <line_3d+0x26e>
	}
	err_1 += dy2;
	err_2 += dz2;
	pixel[0] += x_inc;
	}
	} else if ((m >= l) && (m >= n)) {
     ff2:	2b 85       	ldd	r18, Y+11	; 0x0b
     ff4:	3c 85       	ldd	r19, Y+12	; 0x0c
     ff6:	02 17       	cp	r16, r18
     ff8:	13 07       	cpc	r17, r19
     ffa:	0c f4       	brge	.+2      	; 0xffe <line_3d+0x15a>
     ffc:	48 c0       	rjmp	.+144    	; 0x108e <line_3d+0x1ea>
     ffe:	0e 15       	cp	r16, r14
    1000:	1f 05       	cpc	r17, r15
    1002:	0c f4       	brge	.+2      	; 0x1006 <line_3d+0x162>
    1004:	44 c0       	rjmp	.+136    	; 0x108e <line_3d+0x1ea>
	err_1 = dx2 - m;
    1006:	eb 80       	ldd	r14, Y+3	; 0x03
    1008:	fc 80       	ldd	r15, Y+4	; 0x04
    100a:	e0 1a       	sub	r14, r16
    100c:	f1 0a       	sbc	r15, r17
	err_2 = dz2 - m;
    100e:	d1 01       	movw	r26, r2
    1010:	a0 1b       	sub	r26, r16
    1012:	b1 0b       	sbc	r27, r17
    1014:	bc 87       	std	Y+12, r27	; 0x0c
    1016:	ab 87       	std	Y+11, r26	; 0x0b
    1018:	3b 01       	movw	r6, r22
    101a:	4a 01       	movw	r8, r20
    101c:	6c 01       	movw	r12, r24
    101e:	44 24       	eor	r4, r4
    1020:	55 24       	eor	r5, r5
    1022:	30 c0       	rjmp	.+96     	; 0x1084 <line_3d+0x1e0>
	for (i = 0; i < m; i++) {
	//PUT_PIXEL(pixel);
	setvoxel(pixel[0],pixel[1],pixel[2]);
    1024:	c6 01       	movw	r24, r12
    1026:	b3 01       	movw	r22, r6
    1028:	a4 01       	movw	r20, r8
    102a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	//printf("Setting %i %i %i \n", pixel[0],pixel[1],pixel[2]);
	if (err_1 > 0) {
    102e:	1e 14       	cp	r1, r14
    1030:	1f 04       	cpc	r1, r15
    1032:	44 f4       	brge	.+16     	; 0x1044 <line_3d+0x1a0>
	pixel[0] += x_inc;
    1034:	e9 85       	ldd	r30, Y+9	; 0x09
    1036:	fa 85       	ldd	r31, Y+10	; 0x0a
    1038:	ce 0e       	add	r12, r30
    103a:	df 1e       	adc	r13, r31
	err_1 -= dy2;
    103c:	29 81       	ldd	r18, Y+1	; 0x01
    103e:	3a 81       	ldd	r19, Y+2	; 0x02
    1040:	e2 1a       	sub	r14, r18
    1042:	f3 0a       	sbc	r15, r19
	}
	if (err_2 > 0) {
    1044:	8b 85       	ldd	r24, Y+11	; 0x0b
    1046:	9c 85       	ldd	r25, Y+12	; 0x0c
    1048:	18 16       	cp	r1, r24
    104a:	19 06       	cpc	r1, r25
    104c:	54 f4       	brge	.+20     	; 0x1062 <line_3d+0x1be>
	pixel[2] += z_inc;
    104e:	ad 81       	ldd	r26, Y+5	; 0x05
    1050:	be 81       	ldd	r27, Y+6	; 0x06
    1052:	8a 0e       	add	r8, r26
    1054:	9b 1e       	adc	r9, r27
	err_2 -= dy2;
    1056:	e9 81       	ldd	r30, Y+1	; 0x01
    1058:	fa 81       	ldd	r31, Y+2	; 0x02
    105a:	8e 1b       	sub	r24, r30
    105c:	9f 0b       	sbc	r25, r31
    105e:	9c 87       	std	Y+12, r25	; 0x0c
    1060:	8b 87       	std	Y+11, r24	; 0x0b
	}
	err_1 += dx2;
    1062:	2b 81       	ldd	r18, Y+3	; 0x03
    1064:	3c 81       	ldd	r19, Y+4	; 0x04
    1066:	e2 0e       	add	r14, r18
    1068:	f3 1e       	adc	r15, r19
	err_2 += dz2;
    106a:	8b 85       	ldd	r24, Y+11	; 0x0b
    106c:	9c 85       	ldd	r25, Y+12	; 0x0c
    106e:	82 0d       	add	r24, r2
    1070:	93 1d       	adc	r25, r3
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	8b 87       	std	Y+11, r24	; 0x0b
	pixel[0] += x_inc;
	}
	} else if ((m >= l) && (m >= n)) {
	err_1 = dx2 - m;
	err_2 = dz2 - m;
	for (i = 0; i < m; i++) {
    1076:	08 94       	sec
    1078:	41 1c       	adc	r4, r1
    107a:	51 1c       	adc	r5, r1
    107c:	af 81       	ldd	r26, Y+7	; 0x07
    107e:	b8 85       	ldd	r27, Y+8	; 0x08
    1080:	6a 0e       	add	r6, r26
    1082:	7b 1e       	adc	r7, r27
    1084:	53 01       	movw	r10, r6
    1086:	40 16       	cp	r4, r16
    1088:	51 06       	cpc	r5, r17
    108a:	64 f2       	brlt	.-104    	; 0x1024 <line_3d+0x180>
    108c:	42 c0       	rjmp	.+132    	; 0x1112 <line_3d+0x26e>
	err_1 += dx2;
	err_2 += dz2;
	pixel[1] += y_inc;
	}
	} else {
	err_1 = dy2 - n;
    108e:	09 81       	ldd	r16, Y+1	; 0x01
    1090:	1a 81       	ldd	r17, Y+2	; 0x02
    1092:	0e 19       	sub	r16, r14
    1094:	1f 09       	sbc	r17, r15
	err_2 = dx2 - n;
    1096:	eb 81       	ldd	r30, Y+3	; 0x03
    1098:	fc 81       	ldd	r31, Y+4	; 0x04
    109a:	ee 19       	sub	r30, r14
    109c:	ff 09       	sbc	r31, r15
    109e:	fc 87       	std	Y+12, r31	; 0x0c
    10a0:	eb 87       	std	Y+11, r30	; 0x0b
    10a2:	3a 01       	movw	r6, r20
    10a4:	5b 01       	movw	r10, r22
    10a6:	6c 01       	movw	r12, r24
    10a8:	44 24       	eor	r4, r4
    10aa:	55 24       	eor	r5, r5
    10ac:	2e c0       	rjmp	.+92     	; 0x110a <line_3d+0x266>
	for (i = 0; i < n; i++) {
	setvoxel(pixel[0],pixel[1],pixel[2]);
    10ae:	c6 01       	movw	r24, r12
    10b0:	b5 01       	movw	r22, r10
    10b2:	a3 01       	movw	r20, r6
    10b4:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	//printf("Setting %i %i %i \n", pixel[0],pixel[1],pixel[2]);
	//PUT_PIXEL(pixel);
	if (err_1 > 0) {
    10b8:	10 16       	cp	r1, r16
    10ba:	11 06       	cpc	r1, r17
    10bc:	34 f4       	brge	.+12     	; 0x10ca <line_3d+0x226>
	pixel[1] += y_inc;
    10be:	2f 81       	ldd	r18, Y+7	; 0x07
    10c0:	38 85       	ldd	r19, Y+8	; 0x08
    10c2:	a2 0e       	add	r10, r18
    10c4:	b3 1e       	adc	r11, r19
	err_1 -= dz2;
    10c6:	02 19       	sub	r16, r2
    10c8:	13 09       	sbc	r17, r3
	}
	if (err_2 > 0) {
    10ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    10cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ce:	18 16       	cp	r1, r24
    10d0:	19 06       	cpc	r1, r25
    10d2:	44 f4       	brge	.+16     	; 0x10e4 <line_3d+0x240>
	pixel[0] += x_inc;
    10d4:	a9 85       	ldd	r26, Y+9	; 0x09
    10d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    10d8:	ca 0e       	add	r12, r26
    10da:	db 1e       	adc	r13, r27
	err_2 -= dz2;
    10dc:	82 19       	sub	r24, r2
    10de:	93 09       	sbc	r25, r3
    10e0:	9c 87       	std	Y+12, r25	; 0x0c
    10e2:	8b 87       	std	Y+11, r24	; 0x0b
	}
	err_1 += dy2;
    10e4:	e9 81       	ldd	r30, Y+1	; 0x01
    10e6:	fa 81       	ldd	r31, Y+2	; 0x02
    10e8:	0e 0f       	add	r16, r30
    10ea:	1f 1f       	adc	r17, r31
	err_2 += dx2;
    10ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    10ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	28 0f       	add	r18, r24
    10f6:	39 1f       	adc	r19, r25
    10f8:	3c 87       	std	Y+12, r19	; 0x0c
    10fa:	2b 87       	std	Y+11, r18	; 0x0b
	pixel[1] += y_inc;
	}
	} else {
	err_1 = dy2 - n;
	err_2 = dx2 - n;
	for (i = 0; i < n; i++) {
    10fc:	08 94       	sec
    10fe:	41 1c       	adc	r4, r1
    1100:	51 1c       	adc	r5, r1
    1102:	ad 81       	ldd	r26, Y+5	; 0x05
    1104:	be 81       	ldd	r27, Y+6	; 0x06
    1106:	6a 0e       	add	r6, r26
    1108:	7b 1e       	adc	r7, r27
    110a:	43 01       	movw	r8, r6
    110c:	4e 14       	cp	r4, r14
    110e:	5f 04       	cpc	r5, r15
    1110:	74 f2       	brlt	.-100    	; 0x10ae <line_3d+0x20a>
	err_1 += dy2;
	err_2 += dx2;
	pixel[2] += z_inc;
	}
	}
	setvoxel(pixel[0],pixel[1],pixel[2]);
    1112:	c6 01       	movw	r24, r12
    1114:	b5 01       	movw	r22, r10
    1116:	a4 01       	movw	r20, r8
    1118:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	//printf("Setting %i %i %i \n", pixel[0],pixel[1],pixel[2]);
	//PUT_PIXEL(pixel);
}
    111c:	2c 96       	adiw	r28, 0x0c	; 12
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	7f 90       	pop	r7
    1142:	6f 90       	pop	r6
    1144:	5f 90       	pop	r5
    1146:	4f 90       	pop	r4
    1148:	3f 90       	pop	r3
    114a:	2f 90       	pop	r2
    114c:	08 95       	ret

0000114e <getvoxel>:
	}
}

// Get the current status of a voxel
unsigned char getvoxel(int x, int y, int z)
{
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	f8 2e       	mov	r15, r24
    115a:	8b 01       	movw	r16, r22
    115c:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
    115e:	0e 94 a4 06 	call	0xd48	; 0xd48 <inrange>
    1162:	88 23       	and	r24, r24
    1164:	89 f0       	breq	.+34     	; 0x1188 <getvoxel+0x3a>
	{
		if (cube[z][y] & (1 << x))
    1166:	33 e0       	ldi	r19, 0x03	; 3
    1168:	cc 0f       	add	r28, r28
    116a:	dd 1f       	adc	r29, r29
    116c:	3a 95       	dec	r19
    116e:	e1 f7       	brne	.-8      	; 0x1168 <getvoxel+0x1a>
    1170:	c0 0f       	add	r28, r16
    1172:	d1 1f       	adc	r29, r17
    1174:	c9 50       	subi	r28, 0x09	; 9
    1176:	de 4f       	sbci	r29, 0xFE	; 254
    1178:	88 81       	ld	r24, Y
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <getvoxel+0x34>
    117e:	95 95       	asr	r25
    1180:	87 95       	ror	r24
    1182:	fa 94       	dec	r15
    1184:	e2 f7       	brpl	.-8      	; 0x117e <getvoxel+0x30>
    1186:	81 70       	andi	r24, 0x01	; 1
		}
	} else
	{
		return 0;
	}
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	08 95       	ret

00001194 <altervoxel>:

// In some effect we want to just take bool and write it to a voxel
// this function calls the apropriate voxel manipulation function.
void altervoxel(int x, int y, int z, int state)
{
	if (state == 1)
    1194:	21 30       	cpi	r18, 0x01	; 1
    1196:	31 05       	cpc	r19, r1
    1198:	19 f4       	brne	.+6      	; 0x11a0 <altervoxel+0xc>
	{
		setvoxel(x,y,z);
    119a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    119e:	08 95       	ret
	} else
	{
		clrvoxel(x,y,z);
    11a0:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
    11a4:	08 95       	ret

000011a6 <flpvoxel>:
}

// Flip the state of a voxel.
// If the voxel is 1, its turned into a 0, and vice versa.
void flpvoxel(int x, int y, int z)
{
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	f8 2e       	mov	r15, r24
    11b2:	8b 01       	movw	r16, r22
    11b4:	ea 01       	movw	r28, r20
	if (inrange(x, y, z))
    11b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <inrange>
    11ba:	88 23       	and	r24, r24
    11bc:	a1 f0       	breq	.+40     	; 0x11e6 <flpvoxel+0x40>
		cube[z][y] ^= (1 << x);
    11be:	fe 01       	movw	r30, r28
    11c0:	43 e0       	ldi	r20, 0x03	; 3
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	4a 95       	dec	r20
    11c8:	e1 f7       	brne	.-8      	; 0x11c2 <flpvoxel+0x1c>
    11ca:	e0 0f       	add	r30, r16
    11cc:	f1 1f       	adc	r31, r17
    11ce:	e9 50       	subi	r30, 0x09	; 9
    11d0:	fe 4f       	sbci	r31, 0xFE	; 254
    11d2:	20 81       	ld	r18, Z
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <flpvoxel+0x38>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	fa 94       	dec	r15
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <flpvoxel+0x34>
    11e2:	28 27       	eor	r18, r24
    11e4:	20 83       	st	Z, r18
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	08 95       	ret

000011f2 <argorder>:

// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	fc 01       	movw	r30, r24
    11f8:	da 01       	movw	r26, r20
    11fa:	e9 01       	movw	r28, r18
	if (ix1>ix2)
    11fc:	68 17       	cp	r22, r24
    11fe:	79 07       	cpc	r23, r25
    1200:	1c f4       	brge	.+6      	; 0x1208 <argorder+0x16>
    1202:	cb 01       	movw	r24, r22
    1204:	bf 01       	movw	r22, r30
    1206:	fc 01       	movw	r30, r24
		int tmp;
		tmp = ix1;
		ix1= ix2;
		ix2 = tmp;
	}
	*ox1 = ix1;
    1208:	ed 93       	st	X+, r30
    120a:	fc 93       	st	X, r31
	*ox2 = ix2;
    120c:	79 83       	std	Y+1, r23	; 0x01
    120e:	68 83       	st	Y, r22
}
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <setplane_z>:
// Sets all voxels along a X/Y plane at a given point
// on axis Z
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
    1216:	88 30       	cpi	r24, 0x08	; 8
    1218:	91 05       	cpc	r25, r1
    121a:	98 f4       	brcc	.+38     	; 0x1242 <setplane_z+0x2c>
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0xff;
    1220:	53 e0       	ldi	r21, 0x03	; 3
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	5a 95       	dec	r21
    1228:	e1 f7       	brne	.-8      	; 0x1222 <setplane_z+0xc>
    122a:	4f ef       	ldi	r20, 0xFF	; 255
    122c:	fc 01       	movw	r30, r24
    122e:	e2 0f       	add	r30, r18
    1230:	f3 1f       	adc	r31, r19
    1232:	e9 50       	subi	r30, 0x09	; 9
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	40 83       	st	Z, r20
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	28 30       	cpi	r18, 0x08	; 8
    123e:	31 05       	cpc	r19, r1
    1240:	a9 f7       	brne	.-22     	; 0x122c <setplane_z+0x16>
    1242:	08 95       	ret

00001244 <clrplane_z>:

// Clears voxels in the same manner as above
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	91 05       	cpc	r25, r1
    1248:	90 f4       	brcc	.+36     	; 0x126e <clrplane_z+0x2a>
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0x00;
    124e:	63 e0       	ldi	r22, 0x03	; 3
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	6a 95       	dec	r22
    1256:	e1 f7       	brne	.-8      	; 0x1250 <clrplane_z+0xc>
    1258:	fc 01       	movw	r30, r24
    125a:	e2 0f       	add	r30, r18
    125c:	f3 1f       	adc	r31, r19
    125e:	e9 50       	subi	r30, 0x09	; 9
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	10 82       	st	Z, r1
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
    1264:	2f 5f       	subi	r18, 0xFF	; 255
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	28 30       	cpi	r18, 0x08	; 8
    126a:	31 05       	cpc	r19, r1
    126c:	a9 f7       	brne	.-22     	; 0x1258 <clrplane_z+0x14>
    126e:	08 95       	ret

00001270 <setplane_x>:
			cube[z][i] = 0x00;
	}
}

void setplane_x (int x)
{
    1270:	9c 01       	movw	r18, r24
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	91 05       	cpc	r25, r1
    1276:	30 f5       	brcc	.+76     	; 0x12c4 <setplane_x+0x54>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <setplane_x+0x12>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	2a 95       	dec	r18
    1284:	e2 f7       	brpl	.-8      	; 0x127e <setplane_x+0xe>
    1286:	98 2f       	mov	r25, r24
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	12 c0       	rjmp	.+36     	; 0x12b2 <setplane_x+0x42>
    128e:	fb 01       	movw	r30, r22
    1290:	e2 0f       	add	r30, r18
    1292:	f3 1f       	adc	r31, r19
    1294:	e9 50       	subi	r30, 0x09	; 9
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	80 81       	ld	r24, Z
    129a:	89 2b       	or	r24, r25
    129c:	80 83       	st	Z, r24
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
    129e:	2f 5f       	subi	r18, 0xFF	; 255
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	28 30       	cpi	r18, 0x08	; 8
    12a4:	31 05       	cpc	r19, r1
    12a6:	99 f7       	brne	.-26     	; 0x128e <setplane_x+0x1e>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
    12a8:	4f 5f       	subi	r20, 0xFF	; 255
    12aa:	5f 4f       	sbci	r21, 0xFF	; 255
    12ac:	48 30       	cpi	r20, 0x08	; 8
    12ae:	51 05       	cpc	r21, r1
    12b0:	49 f0       	breq	.+18     	; 0x12c4 <setplane_x+0x54>
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
    12b6:	ba 01       	movw	r22, r20
    12b8:	e3 e0       	ldi	r30, 0x03	; 3
    12ba:	66 0f       	add	r22, r22
    12bc:	77 1f       	adc	r23, r23
    12be:	ea 95       	dec	r30
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <setplane_x+0x4a>
    12c2:	e5 cf       	rjmp	.-54     	; 0x128e <setplane_x+0x1e>
    12c4:	08 95       	ret

000012c6 <clrplane_x>:
		}
	}
}

void clrplane_x (int x)
{
    12c6:	9c 01       	movw	r18, r24
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
    12c8:	88 30       	cpi	r24, 0x08	; 8
    12ca:	91 05       	cpc	r25, r1
    12cc:	38 f5       	brcc	.+78     	; 0x131c <clrplane_x+0x56>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] &= ~(1 << x);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <clrplane_x+0x12>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	2a 95       	dec	r18
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <clrplane_x+0xe>
    12dc:	98 2f       	mov	r25, r24
    12de:	90 95       	com	r25
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	12 c0       	rjmp	.+36     	; 0x130a <clrplane_x+0x44>
    12e6:	fb 01       	movw	r30, r22
    12e8:	e2 0f       	add	r30, r18
    12ea:	f3 1f       	adc	r31, r19
    12ec:	e9 50       	subi	r30, 0x09	; 9
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	80 81       	ld	r24, Z
    12f2:	89 23       	and	r24, r25
    12f4:	80 83       	st	Z, r24
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
    12f6:	2f 5f       	subi	r18, 0xFF	; 255
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	28 30       	cpi	r18, 0x08	; 8
    12fc:	31 05       	cpc	r19, r1
    12fe:	99 f7       	brne	.-26     	; 0x12e6 <clrplane_x+0x20>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
    1300:	4f 5f       	subi	r20, 0xFF	; 255
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    1304:	48 30       	cpi	r20, 0x08	; 8
    1306:	51 05       	cpc	r21, r1
    1308:	49 f0       	breq	.+18     	; 0x131c <clrplane_x+0x56>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] &= ~(1 << x);
    130e:	ba 01       	movw	r22, r20
    1310:	f3 e0       	ldi	r31, 0x03	; 3
    1312:	66 0f       	add	r22, r22
    1314:	77 1f       	adc	r23, r23
    1316:	fa 95       	dec	r31
    1318:	e1 f7       	brne	.-8      	; 0x1312 <clrplane_x+0x4c>
    131a:	e5 cf       	rjmp	.-54     	; 0x12e6 <clrplane_x+0x20>
    131c:	08 95       	ret

0000131e <setplane_y>:
}

void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
    131e:	88 30       	cpi	r24, 0x08	; 8
    1320:	91 05       	cpc	r25, r1
    1322:	98 f4       	brcc	.+38     	; 0x134a <setplane_y+0x2c>
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0xff;
    1328:	4f ef       	ldi	r20, 0xFF	; 255
    132a:	f9 01       	movw	r30, r18
    132c:	a3 e0       	ldi	r26, 0x03	; 3
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	aa 95       	dec	r26
    1334:	e1 f7       	brne	.-8      	; 0x132e <setplane_y+0x10>
    1336:	e8 0f       	add	r30, r24
    1338:	f9 1f       	adc	r31, r25
    133a:	e9 50       	subi	r30, 0x09	; 9
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	40 83       	st	Z, r20
void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
    1340:	2f 5f       	subi	r18, 0xFF	; 255
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	28 30       	cpi	r18, 0x08	; 8
    1346:	31 05       	cpc	r19, r1
    1348:	81 f7       	brne	.-32     	; 0x132a <setplane_y+0xc>
    134a:	08 95       	ret

0000134c <clrplane_y>:
}

void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	91 05       	cpc	r25, r1
    1350:	90 f4       	brcc	.+36     	; 0x1376 <clrplane_y+0x2a>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0x00; 
    1356:	f9 01       	movw	r30, r18
    1358:	b3 e0       	ldi	r27, 0x03	; 3
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	ba 95       	dec	r27
    1360:	e1 f7       	brne	.-8      	; 0x135a <clrplane_y+0xe>
    1362:	e8 0f       	add	r30, r24
    1364:	f9 1f       	adc	r31, r25
    1366:	e9 50       	subi	r30, 0x09	; 9
    1368:	fe 4f       	sbci	r31, 0xFE	; 254
    136a:	10 82       	st	Z, r1
void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
    136c:	2f 5f       	subi	r18, 0xFF	; 255
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	28 30       	cpi	r18, 0x08	; 8
    1372:	31 05       	cpc	r19, r1
    1374:	81 f7       	brne	.-32     	; 0x1356 <clrplane_y+0xa>
    1376:	08 95       	ret

00001378 <setplane>:
	}
}

void setplane (char axis, unsigned char i)
{
    switch (axis)
    1378:	89 37       	cpi	r24, 0x79	; 121
    137a:	49 f0       	breq	.+18     	; 0x138e <setplane+0x16>
    137c:	8a 37       	cpi	r24, 0x7A	; 122
    137e:	f9 f0       	breq	.+62     	; 0x13be <setplane+0x46>
    1380:	88 37       	cpi	r24, 0x78	; 120
    1382:	a1 f5       	brne	.+104    	; 0x13ec <setplane+0x74>
    {
        case AXIS_X:
            setplane_x(i);
    1384:	86 2f       	mov	r24, r22
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 38 09 	call	0x1270	; 0x1270 <setplane_x>
    138c:	08 95       	ret
            break;
        
       case AXIS_Y:
            setplane_y(i);
    138e:	70 e0       	ldi	r23, 0x00	; 0
}

void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
    1390:	68 30       	cpi	r22, 0x08	; 8
    1392:	71 05       	cpc	r23, r1
    1394:	58 f5       	brcc	.+86     	; 0x13ec <setplane+0x74>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0xff;
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	f9 01       	movw	r30, r18
    139e:	93 e0       	ldi	r25, 0x03	; 3
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	9a 95       	dec	r25
    13a6:	e1 f7       	brne	.-8      	; 0x13a0 <setplane+0x28>
    13a8:	e6 0f       	add	r30, r22
    13aa:	f7 1f       	adc	r31, r23
    13ac:	e9 50       	subi	r30, 0x09	; 9
    13ae:	fe 4f       	sbci	r31, 0xFE	; 254
    13b0:	80 83       	st	Z, r24
void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
    13b2:	2f 5f       	subi	r18, 0xFF	; 255
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	28 30       	cpi	r18, 0x08	; 8
    13b8:	31 05       	cpc	r19, r1
    13ba:	81 f7       	brne	.-32     	; 0x139c <setplane+0x24>
    13bc:	08 95       	ret
       case AXIS_Y:
            setplane_y(i);
            break;

       case AXIS_Z:
            setplane_z(i);
    13be:	70 e0       	ldi	r23, 0x00	; 0
// Sets all voxels along a X/Y plane at a given point
// on axis Z
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
    13c0:	68 30       	cpi	r22, 0x08	; 8
    13c2:	71 05       	cpc	r23, r1
    13c4:	98 f4       	brcc	.+38     	; 0x13ec <setplane+0x74>
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0xff;
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	66 0f       	add	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	8a 95       	dec	r24
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <setplane+0x54>
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	fb 01       	movw	r30, r22
    13d8:	e2 0f       	add	r30, r18
    13da:	f3 1f       	adc	r31, r19
    13dc:	e9 50       	subi	r30, 0x09	; 9
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	80 83       	st	Z, r24
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
    13e2:	2f 5f       	subi	r18, 0xFF	; 255
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	28 30       	cpi	r18, 0x08	; 8
    13e8:	31 05       	cpc	r19, r1
    13ea:	a9 f7       	brne	.-22     	; 0x13d6 <setplane+0x5e>
    13ec:	08 95       	ret

000013ee <clrplane>:
    }
}

void clrplane (char axis, unsigned char i)
{
    switch (axis)
    13ee:	89 37       	cpi	r24, 0x79	; 121
    13f0:	49 f0       	breq	.+18     	; 0x1404 <clrplane+0x16>
    13f2:	8a 37       	cpi	r24, 0x7A	; 122
    13f4:	f1 f0       	breq	.+60     	; 0x1432 <clrplane+0x44>
    13f6:	88 37       	cpi	r24, 0x78	; 120
    13f8:	91 f5       	brne	.+100    	; 0x145e <clrplane+0x70>
    {
        case AXIS_X:
            clrplane_x(i);
    13fa:	86 2f       	mov	r24, r22
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 63 09 	call	0x12c6	; 0x12c6 <clrplane_x>
    1402:	08 95       	ret
            break;
        
       case AXIS_Y:
            clrplane_y(i);
    1404:	70 e0       	ldi	r23, 0x00	; 0
}

void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
    1406:	68 30       	cpi	r22, 0x08	; 8
    1408:	71 05       	cpc	r23, r1
    140a:	48 f5       	brcc	.+82     	; 0x145e <clrplane+0x70>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0x00; 
    1410:	f9 01       	movw	r30, r18
    1412:	53 e0       	ldi	r21, 0x03	; 3
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	5a 95       	dec	r21
    141a:	e1 f7       	brne	.-8      	; 0x1414 <clrplane+0x26>
    141c:	e6 0f       	add	r30, r22
    141e:	f7 1f       	adc	r31, r23
    1420:	e9 50       	subi	r30, 0x09	; 9
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	10 82       	st	Z, r1
void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
    1426:	2f 5f       	subi	r18, 0xFF	; 255
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	28 30       	cpi	r18, 0x08	; 8
    142c:	31 05       	cpc	r19, r1
    142e:	81 f7       	brne	.-32     	; 0x1410 <clrplane+0x22>
    1430:	08 95       	ret
       case AXIS_Y:
            clrplane_y(i);
            break;

       case AXIS_Z:
            clrplane_z(i);
    1432:	70 e0       	ldi	r23, 0x00	; 0

// Clears voxels in the same manner as above
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
    1434:	68 30       	cpi	r22, 0x08	; 8
    1436:	71 05       	cpc	r23, r1
    1438:	90 f4       	brcc	.+36     	; 0x145e <clrplane+0x70>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0x00;
    143e:	43 e0       	ldi	r20, 0x03	; 3
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	4a 95       	dec	r20
    1446:	e1 f7       	brne	.-8      	; 0x1440 <clrplane+0x52>
    1448:	fb 01       	movw	r30, r22
    144a:	e2 0f       	add	r30, r18
    144c:	f3 1f       	adc	r31, r19
    144e:	e9 50       	subi	r30, 0x09	; 9
    1450:	fe 4f       	sbci	r31, 0xFE	; 254
    1452:	10 82       	st	Z, r1
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	28 30       	cpi	r18, 0x08	; 8
    145a:	31 05       	cpc	r19, r1
    145c:	a9 f7       	brne	.-22     	; 0x1448 <clrplane+0x5a>
    145e:	08 95       	ret

00001460 <fill>:

// Fill a value into all 64 byts of the cube buffer
// Mostly used for clearing. fill(0x00)
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	10 c0       	rjmp	.+32     	; 0x1486 <fill+0x26>
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
    1466:	fb 01       	movw	r30, r22
    1468:	e2 0f       	add	r30, r18
    146a:	f3 1f       	adc	r31, r19
    146c:	e9 50       	subi	r30, 0x09	; 9
    146e:	fe 4f       	sbci	r31, 0xFE	; 254
    1470:	80 83       	st	Z, r24
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
    1472:	2f 5f       	subi	r18, 0xFF	; 255
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	28 30       	cpi	r18, 0x08	; 8
    1478:	31 05       	cpc	r19, r1
    147a:	a9 f7       	brne	.-22     	; 0x1466 <fill+0x6>
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
    147c:	4f 5f       	subi	r20, 0xFF	; 255
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	48 30       	cpi	r20, 0x08	; 8
    1482:	51 05       	cpc	r21, r1
    1484:	49 f0       	breq	.+18     	; 0x1498 <fill+0x38>
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
    148a:	ba 01       	movw	r22, r20
    148c:	e3 e0       	ldi	r30, 0x03	; 3
    148e:	66 0f       	add	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	ea 95       	dec	r30
    1494:	e1 f7       	brne	.-8      	; 0x148e <fill+0x2e>
    1496:	e7 cf       	rjmp	.-50     	; 0x1466 <fill+0x6>
    1498:	08 95       	ret

0000149a <tmpfill>:
		}
	}
}

void tmpfill (unsigned char pattern)
{
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	10 c0       	rjmp	.+32     	; 0x14c0 <tmpfill+0x26>
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			fb[z][y] = pattern;
    14a0:	fb 01       	movw	r30, r22
    14a2:	e2 0f       	add	r30, r18
    14a4:	f3 1f       	adc	r31, r19
    14a6:	e9 54       	subi	r30, 0x49	; 73
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	80 83       	st	Z, r24
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
    14ac:	2f 5f       	subi	r18, 0xFF	; 255
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	28 30       	cpi	r18, 0x08	; 8
    14b2:	31 05       	cpc	r19, r1
    14b4:	a9 f7       	brne	.-22     	; 0x14a0 <tmpfill+0x6>

void tmpfill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
    14b6:	4f 5f       	subi	r20, 0xFF	; 255
    14b8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ba:	48 30       	cpi	r20, 0x08	; 8
    14bc:	51 05       	cpc	r21, r1
    14be:	49 f0       	breq	.+18     	; 0x14d2 <tmpfill+0x38>
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			fb[z][y] = pattern;
    14c4:	ba 01       	movw	r22, r20
    14c6:	f3 e0       	ldi	r31, 0x03	; 3
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	fa 95       	dec	r31
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <tmpfill+0x2e>
    14d0:	e7 cf       	rjmp	.-50     	; 0x14a0 <tmpfill+0x6>
    14d2:	08 95       	ret

000014d4 <box_filled>:
	}
}

// Draw a box with all walls drawn and all voxels inside set
void box_filled(int x1, int y1, int z1, int x2, int y2, int z2)
{
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	dc 01       	movw	r26, r24
    14e2:	eb 01       	movw	r28, r22
    14e4:	f9 01       	movw	r30, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	14 f4       	brge	.+4      	; 0x14f0 <box_filled+0x1c>
    14ec:	d9 01       	movw	r26, r18
    14ee:	fc 01       	movw	r30, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
    14f0:	0c 17       	cp	r16, r28
    14f2:	1d 07       	cpc	r17, r29
    14f4:	1c f4       	brge	.+6      	; 0x14fc <box_filled+0x28>
    14f6:	ce 01       	movw	r24, r28
    14f8:	e8 01       	movw	r28, r16
    14fa:	8c 01       	movw	r16, r24
    14fc:	e4 16       	cp	r14, r20
    14fe:	f5 06       	cpc	r15, r21
    1500:	1c f4       	brge	.+6      	; 0x1508 <box_filled+0x34>
    1502:	ca 01       	movw	r24, r20
    1504:	a7 01       	movw	r20, r14
    1506:	7c 01       	movw	r14, r24
    1508:	31 96       	adiw	r30, 0x01	; 1
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9c 01       	movw	r18, r24
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <box_filled+0x42>
    1512:	22 0f       	add	r18, r18
    1514:	33 1f       	adc	r19, r19
    1516:	ea 95       	dec	r30
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <box_filled+0x3e>
    151a:	20 95       	com	r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <box_filled+0x4e>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	aa 95       	dec	r26
    1524:	e2 f7       	brpl	.-8      	; 0x151e <box_filled+0x4a>
    1526:	28 23       	and	r18, r24
    1528:	0e c0       	rjmp	.+28     	; 0x1546 <box_filled+0x72>

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
		{
			cube[iz][iy] |= byteline(x1,x2);
    152a:	fb 01       	movw	r30, r22
    152c:	ea 0f       	add	r30, r26
    152e:	fb 1f       	adc	r31, r27
    1530:	e9 50       	subi	r30, 0x09	; 9
    1532:	fe 4f       	sbci	r31, 0xFE	; 254
    1534:	80 81       	ld	r24, Z
    1536:	82 2b       	or	r24, r18
    1538:	80 83       	st	Z, r24
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
    153a:	11 96       	adiw	r26, 0x01	; 1
    153c:	0a 17       	cp	r16, r26
    153e:	1b 07       	cpc	r17, r27
    1540:	a4 f7       	brge	.-24     	; 0x152a <box_filled+0x56>

	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
    1542:	4f 5f       	subi	r20, 0xFF	; 255
    1544:	5f 4f       	sbci	r21, 0xFF	; 255
    1546:	e4 16       	cp	r14, r20
    1548:	f5 06       	cpc	r15, r21
    154a:	44 f0       	brlt	.+16     	; 0x155c <box_filled+0x88>
    154c:	de 01       	movw	r26, r28
	{
		for (iy=y1;iy<=y2;iy++)
		{
			cube[iz][iy] |= byteline(x1,x2);
    154e:	ba 01       	movw	r22, r20
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	66 0f       	add	r22, r22
    1554:	77 1f       	adc	r23, r23
    1556:	8a 95       	dec	r24
    1558:	e1 f7       	brne	.-8      	; 0x1552 <box_filled+0x7e>
    155a:	f0 cf       	rjmp	.-32     	; 0x153c <box_filled+0x68>
		}
	}

}
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	08 95       	ret

0000156a <box_walls>:

// Darw a hollow box with side walls.
void box_walls(int x1, int y1, int z1, int x2, int y2, int z2)
{
    156a:	cf 92       	push	r12
    156c:	df 92       	push	r13
    156e:	ef 92       	push	r14
    1570:	ff 92       	push	r15
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	dc 01       	movw	r26, r24
    157c:	f9 01       	movw	r30, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
    157e:	28 17       	cp	r18, r24
    1580:	39 07       	cpc	r19, r25
    1582:	14 f4       	brge	.+4      	; 0x1588 <box_walls+0x1e>
    1584:	d9 01       	movw	r26, r18
    1586:	fc 01       	movw	r30, r24
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
			{
				cube[iz][iy] = byteline(x1,x2);
			} else
			{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
    1588:	06 17       	cp	r16, r22
    158a:	17 07       	cpc	r17, r23
    158c:	1c f4       	brge	.+6      	; 0x1594 <box_walls+0x2a>
    158e:	cb 01       	movw	r24, r22
    1590:	b8 01       	movw	r22, r16
    1592:	8c 01       	movw	r16, r24
    1594:	e4 16       	cp	r14, r20
    1596:	f5 06       	cpc	r15, r21
    1598:	1c f4       	brge	.+6      	; 0x15a0 <box_walls+0x36>
    159a:	ca 01       	movw	r24, r20
    159c:	a7 01       	movw	r20, r14
    159e:	7c 01       	movw	r14, r24
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9c 01       	movw	r18, r24
    15a6:	0e 2e       	mov	r0, r30
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <box_walls+0x44>
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <box_walls+0x40>
    15b2:	0a 2e       	mov	r0, r26
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <box_walls+0x50>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <box_walls+0x4c>
    15be:	c2 2e       	mov	r12, r18
    15c0:	c8 2a       	or	r12, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
    15c2:	31 96       	adiw	r30, 0x01	; 1
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9c 01       	movw	r18, r24
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <box_walls+0x66>
    15cc:	22 0f       	add	r18, r18
    15ce:	33 1f       	adc	r19, r19
    15d0:	ea 95       	dec	r30
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <box_walls+0x62>
    15d4:	d2 2e       	mov	r13, r18
    15d6:	d0 94       	com	r13
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <box_walls+0x74>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	aa 95       	dec	r26
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <box_walls+0x70>
    15e2:	d8 22       	and	r13, r24
    15e4:	9a 01       	movw	r18, r20
    15e6:	21 c0       	rjmp	.+66     	; 0x162a <box_walls+0xc0>

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
		{	
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
    15e8:	a6 17       	cp	r26, r22
    15ea:	b7 07       	cpc	r27, r23
    15ec:	49 f0       	breq	.+18     	; 0x1600 <box_walls+0x96>
    15ee:	a0 17       	cp	r26, r16
    15f0:	b1 07       	cpc	r27, r17
    15f2:	31 f0       	breq	.+12     	; 0x1600 <box_walls+0x96>
    15f4:	24 17       	cp	r18, r20
    15f6:	35 07       	cpc	r19, r21
    15f8:	19 f0       	breq	.+6      	; 0x1600 <box_walls+0x96>
    15fa:	2e 15       	cp	r18, r14
    15fc:	3f 05       	cpc	r19, r15
    15fe:	39 f4       	brne	.+14     	; 0x160e <box_walls+0xa4>
			{
				cube[iz][iy] = byteline(x1,x2);
    1600:	fe 01       	movw	r30, r28
    1602:	ea 0f       	add	r30, r26
    1604:	fb 1f       	adc	r31, r27
    1606:	e9 50       	subi	r30, 0x09	; 9
    1608:	fe 4f       	sbci	r31, 0xFE	; 254
    160a:	d0 82       	st	Z, r13
    160c:	08 c0       	rjmp	.+16     	; 0x161e <box_walls+0xb4>
			} else
			{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
    160e:	fe 01       	movw	r30, r28
    1610:	ea 0f       	add	r30, r26
    1612:	fb 1f       	adc	r31, r27
    1614:	e9 50       	subi	r30, 0x09	; 9
    1616:	fe 4f       	sbci	r31, 0xFE	; 254
    1618:	80 81       	ld	r24, Z
    161a:	8c 29       	or	r24, r12
    161c:	80 83       	st	Z, r24
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	0a 17       	cp	r16, r26
    1622:	1b 07       	cpc	r17, r27
    1624:	0c f7       	brge	.-62     	; 0x15e8 <box_walls+0x7e>
	
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
    1626:	2f 5f       	subi	r18, 0xFF	; 255
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	e2 16       	cp	r14, r18
    162c:	f3 06       	cpc	r15, r19
    162e:	44 f0       	brlt	.+16     	; 0x1640 <box_walls+0xd6>
    1630:	db 01       	movw	r26, r22
	{
		for (iy=y1;iy<=y2;iy++)
		{	
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
			{
				cube[iz][iy] = byteline(x1,x2);
    1632:	e9 01       	movw	r28, r18
    1634:	93 e0       	ldi	r25, 0x03	; 3
    1636:	cc 0f       	add	r28, r28
    1638:	dd 1f       	adc	r29, r29
    163a:	9a 95       	dec	r25
    163c:	e1 f7       	brne	.-8      	; 0x1636 <box_walls+0xcc>
    163e:	f0 cf       	rjmp	.-32     	; 0x1620 <box_walls+0xb6>
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
			}
		}
	}

}
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	df 90       	pop	r13
    164e:	cf 90       	pop	r12
    1650:	08 95       	ret

00001652 <box_wireframe>:

// Draw a wireframe box. This only draws the corners and edges,
// no walls.
void box_wireframe(int x1, int y1, int z1, int x2, int y2, int z2)
{
    1652:	6f 92       	push	r6
    1654:	7f 92       	push	r7
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	3c 01       	movw	r6, r24
    1670:	4b 01       	movw	r8, r22
    1672:	5a 01       	movw	r10, r20
    1674:	69 01       	movw	r12, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
    1676:	28 17       	cp	r18, r24
    1678:	39 07       	cpc	r19, r25
    167a:	14 f4       	brge	.+4      	; 0x1680 <box_wireframe+0x2e>
    167c:	39 01       	movw	r6, r18
    167e:	6c 01       	movw	r12, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
    1680:	08 15       	cp	r16, r8
    1682:	19 05       	cpc	r17, r9
    1684:	1c f4       	brge	.+6      	; 0x168c <box_wireframe+0x3a>
    1686:	c4 01       	movw	r24, r8
    1688:	48 01       	movw	r8, r16
    168a:	8c 01       	movw	r16, r24
    168c:	ea 14       	cp	r14, r10
    168e:	fb 04       	cpc	r15, r11
    1690:	1c f4       	brge	.+6      	; 0x1698 <box_wireframe+0x46>
    1692:	c5 01       	movw	r24, r10
    1694:	57 01       	movw	r10, r14
    1696:	7c 01       	movw	r14, r24
    1698:	08 94       	sec
    169a:	c1 1c       	adc	r12, r1
    169c:	d1 1c       	adc	r13, r1
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9c 01       	movw	r18, r24
    16a4:	0c 2c       	mov	r0, r12
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <box_wireframe+0x5a>
    16a8:	22 0f       	add	r18, r18
    16aa:	33 1f       	adc	r19, r19
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <box_wireframe+0x56>
    16b0:	08 94       	sec
    16b2:	c1 08       	sbc	r12, r1
    16b4:	d1 08       	sbc	r13, r1
    16b6:	20 95       	com	r18
    16b8:	06 2c       	mov	r0, r6
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <box_wireframe+0x6e>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <box_wireframe+0x6a>
    16c4:	28 23       	and	r18, r24
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	// Lines along X axis
	cube[z1][y1] = byteline(x1,x2);
    16c6:	d5 01       	movw	r26, r10
    16c8:	43 e0       	ldi	r20, 0x03	; 3
    16ca:	aa 0f       	add	r26, r26
    16cc:	bb 1f       	adc	r27, r27
    16ce:	4a 95       	dec	r20
    16d0:	e1 f7       	brne	.-8      	; 0x16ca <box_wireframe+0x78>
    16d2:	fd 01       	movw	r30, r26
    16d4:	e8 0d       	add	r30, r8
    16d6:	f9 1d       	adc	r31, r9
    16d8:	e9 50       	subi	r30, 0x09	; 9
    16da:	fe 4f       	sbci	r31, 0xFE	; 254
    16dc:	20 83       	st	Z, r18
	cube[z1][y2] = byteline(x1,x2);
    16de:	a0 0f       	add	r26, r16
    16e0:	b1 1f       	adc	r27, r17
    16e2:	a9 50       	subi	r26, 0x09	; 9
    16e4:	be 4f       	sbci	r27, 0xFE	; 254
    16e6:	2c 93       	st	X, r18
	cube[z2][y1] = byteline(x1,x2);
    16e8:	d7 01       	movw	r26, r14
    16ea:	33 e0       	ldi	r19, 0x03	; 3
    16ec:	aa 0f       	add	r26, r26
    16ee:	bb 1f       	adc	r27, r27
    16f0:	3a 95       	dec	r19
    16f2:	e1 f7       	brne	.-8      	; 0x16ec <box_wireframe+0x9a>
    16f4:	fd 01       	movw	r30, r26
    16f6:	e8 0d       	add	r30, r8
    16f8:	f9 1d       	adc	r31, r9
    16fa:	e9 50       	subi	r30, 0x09	; 9
    16fc:	fe 4f       	sbci	r31, 0xFE	; 254
    16fe:	20 83       	st	Z, r18
	cube[z2][y2] = byteline(x1,x2);
    1700:	a0 0f       	add	r26, r16
    1702:	b1 1f       	adc	r27, r17
    1704:	a9 50       	subi	r26, 0x09	; 9
    1706:	be 4f       	sbci	r27, 0xFE	; 254
    1708:	2c 93       	st	X, r18
    170a:	e4 01       	movw	r28, r8
    170c:	15 c0       	rjmp	.+42     	; 0x1738 <box_wireframe+0xe6>

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
	{
		setvoxel(x1,iy,z1);
    170e:	c3 01       	movw	r24, r6
    1710:	be 01       	movw	r22, r28
    1712:	a5 01       	movw	r20, r10
    1714:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel(x1,iy,z2);
    1718:	c3 01       	movw	r24, r6
    171a:	be 01       	movw	r22, r28
    171c:	a7 01       	movw	r20, r14
    171e:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel(x2,iy,z1);
    1722:	c6 01       	movw	r24, r12
    1724:	be 01       	movw	r22, r28
    1726:	a5 01       	movw	r20, r10
    1728:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel(x2,iy,z2);
    172c:	c6 01       	movw	r24, r12
    172e:	be 01       	movw	r22, r28
    1730:	a7 01       	movw	r20, r14
    1732:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	cube[z1][y2] = byteline(x1,x2);
	cube[z2][y1] = byteline(x1,x2);
	cube[z2][y2] = byteline(x1,x2);

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
    1736:	21 96       	adiw	r28, 0x01	; 1
    1738:	0c 17       	cp	r16, r28
    173a:	1d 07       	cpc	r17, r29
    173c:	44 f7       	brge	.-48     	; 0x170e <box_wireframe+0xbc>
    173e:	e5 01       	movw	r28, r10
    1740:	15 c0       	rjmp	.+42     	; 0x176c <box_wireframe+0x11a>
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
	{
		setvoxel(x1,y1,iz);
    1742:	c3 01       	movw	r24, r6
    1744:	b4 01       	movw	r22, r8
    1746:	ae 01       	movw	r20, r28
    1748:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel(x1,y2,iz);
    174c:	c3 01       	movw	r24, r6
    174e:	b8 01       	movw	r22, r16
    1750:	ae 01       	movw	r20, r28
    1752:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel(x2,y1,iz);
    1756:	c6 01       	movw	r24, r12
    1758:	b4 01       	movw	r22, r8
    175a:	ae 01       	movw	r20, r28
    175c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel(x2,y2,iz);
    1760:	c6 01       	movw	r24, r12
    1762:	b8 01       	movw	r22, r16
    1764:	ae 01       	movw	r20, r28
    1766:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel(x2,iy,z1);
		setvoxel(x2,iy,z2);
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
    176a:	21 96       	adiw	r28, 0x01	; 1
    176c:	ec 16       	cp	r14, r28
    176e:	fd 06       	cpc	r15, r29
    1770:	44 f7       	brge	.-48     	; 0x1742 <box_wireframe+0xf0>
		setvoxel(x1,y2,iz);
		setvoxel(x2,y1,iz);
		setvoxel(x2,y2,iz);
	}

}
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	6f 90       	pop	r6
    178e:	08 95       	ret

00001790 <byteline>:

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
    1790:	6f 5f       	subi	r22, 0xFF	; 255
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	2f ef       	ldi	r18, 0xFF	; 255
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	a9 01       	movw	r20, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <byteline+0x10>
    179c:	44 0f       	add	r20, r20
    179e:	55 1f       	adc	r21, r21
    17a0:	6a 95       	dec	r22
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <byteline+0xc>
    17a4:	ba 01       	movw	r22, r20
    17a6:	60 95       	com	r22
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <byteline+0x1e>
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	8a 95       	dec	r24
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <byteline+0x1a>
	return ((0xff<<start) & ~(0xff<<(end+1)));
}
    17b2:	86 2f       	mov	r24, r22
    17b4:	82 23       	and	r24, r18
    17b6:	08 95       	ret

000017b8 <flipbyte>:

// Flips a byte 180 degrees.
// MSB becomes LSB, LSB becomes MSB.
char flipbyte (char byte)
{
    17b8:	48 2f       	mov	r20, r24

	flop = (flop & 0b11111110) | (0b00000001 & (byte >> 7));
	flop = (flop & 0b11111101) | (0b00000010 & (byte >> 5));
	flop = (flop & 0b11111011) | (0b00000100 & (byte >> 3));
	flop = (flop & 0b11110111) | (0b00001000 & (byte >> 1));
	flop = (flop & 0b11101111) | (0b00010000 & (byte << 1));
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	82 95       	swap	r24
    17c0:	86 95       	lsr	r24
    17c2:	82 70       	andi	r24, 0x02	; 2
    17c4:	94 2f       	mov	r25, r20
    17c6:	99 1f       	adc	r25, r25
    17c8:	99 27       	eor	r25, r25
    17ca:	99 1f       	adc	r25, r25
    17cc:	89 2b       	or	r24, r25
    17ce:	94 2f       	mov	r25, r20
    17d0:	96 95       	lsr	r25
    17d2:	96 95       	lsr	r25
    17d4:	96 95       	lsr	r25
    17d6:	94 70       	andi	r25, 0x04	; 4
    17d8:	89 2b       	or	r24, r25
    17da:	46 95       	lsr	r20
    17dc:	48 70       	andi	r20, 0x08	; 8
    17de:	84 2b       	or	r24, r20
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	92 2f       	mov	r25, r18
    17e6:	90 71       	andi	r25, 0x10	; 16
    17e8:	89 2b       	or	r24, r25
    17ea:	22 0f       	add	r18, r18
    17ec:	33 1f       	adc	r19, r19
    17ee:	22 0f       	add	r18, r18
    17f0:	33 1f       	adc	r19, r19
    17f2:	92 2f       	mov	r25, r18
    17f4:	90 72       	andi	r25, 0x20	; 32
    17f6:	89 2b       	or	r24, r25
    17f8:	22 0f       	add	r18, r18
    17fa:	33 1f       	adc	r19, r19
    17fc:	22 0f       	add	r18, r18
    17fe:	33 1f       	adc	r19, r19
    1800:	92 2f       	mov	r25, r18
    1802:	90 74       	andi	r25, 0x40	; 64
    1804:	89 2b       	or	r24, r25
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
	flop = (flop & 0b11011111) | (0b00100000 & (byte << 3));
	flop = (flop & 0b10111111) | (0b01000000 & (byte << 5));
	flop = (flop & 0b01111111) | (0b10000000 & (byte << 7));
	return flop;
}
    180e:	82 2b       	or	r24, r18
    1810:	08 95       	ret

00001812 <line>:

// Draw a line between any coordinates in 3d space.
// Uses integer values for input, so dont expect smooth animations.
void line(int x1, int y1, int z1, int x2, int y2, int z2)
{
    1812:	2f 92       	push	r2
    1814:	3f 92       	push	r3
    1816:	4f 92       	push	r4
    1818:	5f 92       	push	r5
    181a:	6f 92       	push	r6
    181c:	7f 92       	push	r7
    181e:	8f 92       	push	r8
    1820:	9f 92       	push	r9
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	66 97       	sbiw	r28, 0x16	; 22
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	2c 01       	movw	r4, r24
    1848:	5b 01       	movw	r10, r22
    184a:	4a 01       	movw	r8, r20
    184c:	19 01       	movw	r2, r18
    184e:	67 01       	movw	r12, r14
	unsigned char x,y,z;
	unsigned char lasty,lastz;

	// We always want to draw the line from x=0 to x=7.
	// If x1 is bigget than x2, we need to flip all the values.
	if (x1>x2)
    1850:	28 17       	cp	r18, r24
    1852:	39 07       	cpc	r19, r25
    1854:	3c f4       	brge	.+14     	; 0x1864 <line+0x52>
    1856:	12 01       	movw	r2, r4
    1858:	29 01       	movw	r4, r18
    185a:	c8 01       	movw	r24, r16
    185c:	8b 01       	movw	r16, r22
    185e:	5c 01       	movw	r10, r24
    1860:	6a 01       	movw	r12, r20
    1862:	47 01       	movw	r8, r14
    1864:	31 01       	movw	r6, r2
    1866:	64 18       	sub	r6, r4
    1868:	75 08       	sbc	r7, r5
		tmp = y2; y2 = y1; y1 = tmp;
		tmp = z2; z2 = z1; z1 = tmp;
	}

	
	if (y1>y2)
    186a:	0a 15       	cp	r16, r10
    186c:	1b 05       	cpc	r17, r11
    186e:	44 f4       	brge	.+16     	; 0x1880 <line+0x6e>
	{
		xy = (float)(y1-y2)/(float)(x2-x1);
    1870:	b5 01       	movw	r22, r10
    1872:	60 1b       	sub	r22, r16
    1874:	71 0b       	sbc	r23, r17
    1876:	88 27       	eor	r24, r24
    1878:	77 fd       	sbrc	r23, 7
    187a:	80 95       	com	r24
    187c:	98 2f       	mov	r25, r24
    187e:	07 c0       	rjmp	.+14     	; 0x188e <line+0x7c>
		lasty = y2;
	} else
	{
		xy = (float)(y2-y1)/(float)(x2-x1);
    1880:	0a 19       	sub	r16, r10
    1882:	1b 09       	sbc	r17, r11
    1884:	b8 01       	movw	r22, r16
    1886:	88 27       	eor	r24, r24
    1888:	77 fd       	sbrc	r23, 7
    188a:	80 95       	com	r24
    188c:	98 2f       	mov	r25, r24
    188e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    1892:	7b 01       	movw	r14, r22
    1894:	8c 01       	movw	r16, r24
    1896:	b3 01       	movw	r22, r6
    1898:	88 27       	eor	r24, r24
    189a:	77 fd       	sbrc	r23, 7
    189c:	80 95       	com	r24
    189e:	98 2f       	mov	r25, r24
    18a0:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    18a4:	9b 01       	movw	r18, r22
    18a6:	ac 01       	movw	r20, r24
    18a8:	c8 01       	movw	r24, r16
    18aa:	b7 01       	movw	r22, r14
    18ac:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    18b0:	6d 83       	std	Y+5, r22	; 0x05
    18b2:	7e 83       	std	Y+6, r23	; 0x06
    18b4:	8f 83       	std	Y+7, r24	; 0x07
    18b6:	98 87       	std	Y+8, r25	; 0x08
    18b8:	31 01       	movw	r6, r2
    18ba:	64 18       	sub	r6, r4
    18bc:	75 08       	sbc	r7, r5
		lasty = y1;
	}

	if (z1>z2)
    18be:	c8 14       	cp	r12, r8
    18c0:	d9 04       	cpc	r13, r9
    18c2:	44 f4       	brge	.+16     	; 0x18d4 <line+0xc2>
	{
		xz = (float)(z1-z2)/(float)(x2-x1);
    18c4:	b4 01       	movw	r22, r8
    18c6:	6c 19       	sub	r22, r12
    18c8:	7d 09       	sbc	r23, r13
    18ca:	88 27       	eor	r24, r24
    18cc:	77 fd       	sbrc	r23, 7
    18ce:	80 95       	com	r24
    18d0:	98 2f       	mov	r25, r24
    18d2:	07 c0       	rjmp	.+14     	; 0x18e2 <line+0xd0>
		lastz = z2;
	} else
	{
		xz = (float)(z2-z1)/(float)(x2-x1);
    18d4:	c8 18       	sub	r12, r8
    18d6:	d9 08       	sbc	r13, r9
    18d8:	b6 01       	movw	r22, r12
    18da:	88 27       	eor	r24, r24
    18dc:	77 fd       	sbrc	r23, 7
    18de:	80 95       	com	r24
    18e0:	98 2f       	mov	r25, r24
    18e2:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    18e6:	7b 01       	movw	r14, r22
    18e8:	8c 01       	movw	r16, r24
    18ea:	b3 01       	movw	r22, r6
    18ec:	88 27       	eor	r24, r24
    18ee:	77 fd       	sbrc	r23, 7
    18f0:	80 95       	com	r24
    18f2:	98 2f       	mov	r25, r24
    18f4:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    18f8:	9b 01       	movw	r18, r22
    18fa:	ac 01       	movw	r20, r24
    18fc:	c8 01       	movw	r24, r16
    18fe:	b7 01       	movw	r22, r14
    1900:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    1904:	69 83       	std	Y+1, r22	; 0x01
    1906:	7a 83       	std	Y+2, r23	; 0x02
    1908:	8b 83       	std	Y+3, r24	; 0x03
    190a:	9c 83       	std	Y+4, r25	; 0x04
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
    190c:	64 2c       	mov	r6, r4
	{
		y = (xy*(x-x1))+y1;
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
    190e:	c5 01       	movw	r24, r10
    1910:	aa 27       	eor	r26, r26
    1912:	97 fd       	sbrc	r25, 7
    1914:	a0 95       	com	r26
    1916:	ba 2f       	mov	r27, r26
    1918:	8d 87       	std	Y+13, r24	; 0x0d
    191a:	9e 87       	std	Y+14, r25	; 0x0e
    191c:	af 87       	std	Y+15, r26	; 0x0f
    191e:	b8 8b       	std	Y+16, r27	; 0x10
    1920:	c4 01       	movw	r24, r8
    1922:	aa 27       	eor	r26, r26
    1924:	97 fd       	sbrc	r25, 7
    1926:	a0 95       	com	r26
    1928:	ba 2f       	mov	r27, r26
    192a:	89 8b       	std	Y+17, r24	; 0x11
    192c:	9a 8b       	std	Y+18, r25	; 0x12
    192e:	ab 8b       	std	Y+19, r26	; 0x13
    1930:	bc 8b       	std	Y+20, r27	; 0x14
    1932:	4b c0       	rjmp	.+150    	; 0x19ca <line+0x1b8>


	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
	{
		y = (xy*(x-x1))+y1;
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	64 19       	sub	r22, r4
    193a:	75 09       	sbc	r23, r5
    193c:	88 27       	eor	r24, r24
    193e:	77 fd       	sbrc	r23, 7
    1940:	80 95       	com	r24
    1942:	98 2f       	mov	r25, r24
    1944:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    1948:	5b 01       	movw	r10, r22
    194a:	6c 01       	movw	r12, r24
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
    194c:	6d 81       	ldd	r22, Y+5	; 0x05
    194e:	7e 81       	ldd	r23, Y+6	; 0x06
    1950:	8f 81       	ldd	r24, Y+7	; 0x07
    1952:	98 85       	ldd	r25, Y+8	; 0x08
    1954:	a6 01       	movw	r20, r12
    1956:	95 01       	movw	r18, r10
    1958:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    195c:	7b 01       	movw	r14, r22
    195e:	8c 01       	movw	r16, r24
    1960:	6d 85       	ldd	r22, Y+13	; 0x0d
    1962:	7e 85       	ldd	r23, Y+14	; 0x0e
    1964:	8f 85       	ldd	r24, Y+15	; 0x0f
    1966:	98 89       	ldd	r25, Y+16	; 0x10
    1968:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	c8 01       	movw	r24, r16
    1972:	b7 01       	movw	r22, r14
    1974:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    1978:	0e 94 a6 39 	call	0x734c	; 0x734c <__fixunssfsi>
    197c:	69 87       	std	Y+9, r22	; 0x09
    197e:	7a 87       	std	Y+10, r23	; 0x0a
    1980:	8b 87       	std	Y+11, r24	; 0x0b
    1982:	9c 87       	std	Y+12, r25	; 0x0c
    1984:	69 81       	ldd	r22, Y+1	; 0x01
    1986:	7a 81       	ldd	r23, Y+2	; 0x02
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	a6 01       	movw	r20, r12
    198e:	95 01       	movw	r18, r10
    1990:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    1994:	7b 01       	movw	r14, r22
    1996:	8c 01       	movw	r16, r24
    1998:	69 89       	ldd	r22, Y+17	; 0x11
    199a:	7a 89       	ldd	r23, Y+18	; 0x12
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    19a4:	9b 01       	movw	r18, r22
    19a6:	ac 01       	movw	r20, r24
    19a8:	c8 01       	movw	r24, r16
    19aa:	b7 01       	movw	r22, r14
    19ac:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    19b0:	0e 94 a6 39 	call	0x734c	; 0x734c <__fixunssfsi>
    19b4:	9b 01       	movw	r18, r22
    19b6:	ac 01       	movw	r20, r24
    19b8:	8d 89       	ldd	r24, Y+21	; 0x15
    19ba:	9e 89       	ldd	r25, Y+22	; 0x16
    19bc:	69 85       	ldd	r22, Y+9	; 0x09
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	42 2f       	mov	r20, r18
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
    19c8:	63 94       	inc	r6
    19ca:	a6 2d       	mov	r26, r6
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	be 8b       	std	Y+22, r27	; 0x16
    19d0:	ad 8b       	std	Y+21, r26	; 0x15
    19d2:	2a 16       	cp	r2, r26
    19d4:	3b 06       	cpc	r3, r27
    19d6:	0c f0       	brlt	.+2      	; 0x19da <line+0x1c8>
    19d8:	ad cf       	rjmp	.-166    	; 0x1934 <line+0x122>
		y = (xy*(x-x1))+y1;
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
	}
	
}
    19da:	66 96       	adiw	r28, 0x16	; 22
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	bf 90       	pop	r11
    19f8:	af 90       	pop	r10
    19fa:	9f 90       	pop	r9
    19fc:	8f 90       	pop	r8
    19fe:	7f 90       	pop	r7
    1a00:	6f 90       	pop	r6
    1a02:	5f 90       	pop	r5
    1a04:	4f 90       	pop	r4
    1a06:	3f 90       	pop	r3
    1a08:	2f 90       	pop	r2
    1a0a:	08 95       	ret

00001a0c <delay_ms>:
// This is not calibrated to milliseconds,
// but we had allready made to many effects using this
// calibration when we figured it might be a good idea
// to calibrate it.
void delay_ms(uint16_t x)
{
    1a0c:	0b c0       	rjmp	.+22     	; 0x1a24 <delay_ms+0x18>
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
	...
    for ( y = 0 ; y < 90 ; y++){
    1a1c:	2f 5f       	subi	r18, 0xFF	; 255
    1a1e:	2a 35       	cpi	r18, 0x5A	; 90
    1a20:	b9 f7       	brne	.-18     	; 0x1a10 <delay_ms+0x4>
// calibration when we figured it might be a good idea
// to calibrate it.
void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	99 f7       	brne	.-26     	; 0x1a0e <delay_ms+0x2>
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
      }
    }
  }
}
    1a28:	08 95       	ret

00001a2a <shift>:
// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
{
    1a2a:	2f 92       	push	r2
    1a2c:	3f 92       	push	r3
    1a2e:	4f 92       	push	r4
    1a30:	5f 92       	push	r5
    1a32:	6f 92       	push	r6
    1a34:	7f 92       	push	r7
    1a36:	9f 92       	push	r9
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	98 2e       	mov	r9, r24
    1a4e:	5b 01       	movw	r10, r22
    1a50:	cc 24       	eor	r12, r12
    1a52:	dd 24       	eor	r13, r13
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
    1a54:	a7 e0       	ldi	r26, 0x07	; 7
    1a56:	2a 2e       	mov	r2, r26
    1a58:	31 2c       	mov	r3, r1
    1a5a:	8f ef       	ldi	r24, 0xFF	; 255
    1a5c:	a8 16       	cp	r10, r24
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	b8 06       	cpc	r11, r24
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <shift+0x3e>
    1a64:	76 01       	movw	r14, r12
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <shift+0x44>
    1a68:	71 01       	movw	r14, r2
    1a6a:	ec 18       	sub	r14, r12
    1a6c:	fd 08       	sbc	r15, r13
    1a6e:	00 e0       	ldi	r16, 0x00	; 0
    1a70:	10 e0       	ldi	r17, 0x00	; 0
				if (direction == -1)
				{
					iii = ii+1;
				} else
				{
					iii = ii-1;
    1a72:	27 01       	movw	r4, r14
    1a74:	08 94       	sec
    1a76:	41 08       	sbc	r4, r1
    1a78:	51 08       	sbc	r5, r1
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
				{
					iii = ii+1;
    1a7a:	37 01       	movw	r6, r14
    1a7c:	08 94       	sec
    1a7e:	61 1c       	adc	r6, r1
    1a80:	71 1c       	adc	r7, r1
    1a82:	3a c0       	rjmp	.+116    	; 0x1af8 <shift+0xce>
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	a8 16       	cp	r10, r24
    1a88:	8f ef       	ldi	r24, 0xFF	; 255
    1a8a:	b8 06       	cpc	r11, r24
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <shift+0x68>
				{
					iii = ii+1;
    1a8e:	c3 01       	movw	r24, r6
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <shift+0x6a>
				} else
				{
					iii = ii-1;
    1a92:	c2 01       	movw	r24, r4
    1a94:	ac 01       	movw	r20, r24
				}
				
				if (axis == AXIS_Z)
    1a96:	8a e7       	ldi	r24, 0x7A	; 122
    1a98:	98 16       	cp	r9, r24
    1a9a:	49 f4       	brne	.+18     	; 0x1aae <shift+0x84>
				{
					state = getvoxel(x,y,iii);
    1a9c:	c8 01       	movw	r24, r16
    1a9e:	be 01       	movw	r22, r28
    1aa0:	0e 94 a7 08 	call	0x114e	; 0x114e <getvoxel>
    1aa4:	28 2f       	mov	r18, r24
					altervoxel(x,y,ii,state);
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	be 01       	movw	r22, r28
    1aaa:	a7 01       	movw	r20, r14
    1aac:	19 c0       	rjmp	.+50     	; 0x1ae0 <shift+0xb6>
				}
				
				if (axis == AXIS_Y)
    1aae:	89 e7       	ldi	r24, 0x79	; 121
    1ab0:	98 16       	cp	r9, r24
    1ab2:	51 f4       	brne	.+20     	; 0x1ac8 <shift+0x9e>
				{
					state = getvoxel(x,iii,y);
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	ba 01       	movw	r22, r20
    1ab8:	ae 01       	movw	r20, r28
    1aba:	0e 94 a7 08 	call	0x114e	; 0x114e <getvoxel>
    1abe:	28 2f       	mov	r18, r24
					altervoxel(x,ii,y,state);
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	b7 01       	movw	r22, r14
    1ac4:	ae 01       	movw	r20, r28
    1ac6:	0c c0       	rjmp	.+24     	; 0x1ae0 <shift+0xb6>
				}
				
				if (axis == AXIS_X)
    1ac8:	88 e7       	ldi	r24, 0x78	; 120
    1aca:	98 16       	cp	r9, r24
    1acc:	61 f4       	brne	.+24     	; 0x1ae6 <shift+0xbc>
				{
					state = getvoxel(iii,y,x);
    1ace:	ca 01       	movw	r24, r20
    1ad0:	be 01       	movw	r22, r28
    1ad2:	a8 01       	movw	r20, r16
    1ad4:	0e 94 a7 08 	call	0x114e	; 0x114e <getvoxel>
    1ad8:	28 2f       	mov	r18, r24
					altervoxel(ii,y,x,state);
    1ada:	c7 01       	movw	r24, r14
    1adc:	be 01       	movw	r22, r28
    1ade:	a8 01       	movw	r20, r16
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	0e 94 ca 08 	call	0x1194	; 0x1194 <altervoxel>
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
    1ae6:	21 96       	adiw	r28, 0x01	; 1
    1ae8:	c8 30       	cpi	r28, 0x08	; 8
    1aea:	d1 05       	cpc	r29, r1
    1aec:	59 f6       	brne	.-106    	; 0x1a84 <shift+0x5a>
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
    1aee:	0f 5f       	subi	r16, 0xFF	; 255
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	08 30       	cpi	r16, 0x08	; 8
    1af4:	11 05       	cpc	r17, r1
    1af6:	19 f0       	breq	.+6      	; 0x1afe <shift+0xd4>
    1af8:	c0 e0       	ldi	r28, 0x00	; 0
    1afa:	d0 e0       	ldi	r29, 0x00	; 0
    1afc:	c3 cf       	rjmp	.-122    	; 0x1a84 <shift+0x5a>
{
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
    1afe:	08 94       	sec
    1b00:	c1 1c       	adc	r12, r1
    1b02:	d1 1c       	adc	r13, r1
    1b04:	88 e0       	ldi	r24, 0x08	; 8
    1b06:	c8 16       	cp	r12, r24
    1b08:	d1 04       	cpc	r13, r1
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <shift+0xe4>
    1b0c:	a6 cf       	rjmp	.-180    	; 0x1a5a <shift+0x30>
				}
			}
		}
	}
	
	if (direction == -1)
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255
    1b10:	a8 16       	cp	r10, r24
    1b12:	8f ef       	ldi	r24, 0xFF	; 255
    1b14:	b8 06       	cpc	r11, r24
    1b16:	19 f0       	breq	.+6      	; 0x1b1e <shift+0xf4>
    1b18:	ee 24       	eor	r14, r14
    1b1a:	ff 24       	eor	r15, r15
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <shift+0xfa>
    1b1e:	f7 e0       	ldi	r31, 0x07	; 7
    1b20:	ef 2e       	mov	r14, r31
    1b22:	f1 2c       	mov	r15, r1
    1b24:	00 e0       	ldi	r16, 0x00	; 0
    1b26:	10 e0       	ldi	r17, 0x00	; 0
    1b28:	1f c0       	rjmp	.+62     	; 0x1b68 <shift+0x13e>
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
		{
			if (axis == AXIS_Z)
    1b2a:	8a e7       	ldi	r24, 0x7A	; 122
    1b2c:	98 16       	cp	r9, r24
    1b2e:	21 f4       	brne	.+8      	; 0x1b38 <shift+0x10e>
				clrvoxel(x,y,i);
    1b30:	c8 01       	movw	r24, r16
    1b32:	be 01       	movw	r22, r28
    1b34:	a7 01       	movw	r20, r14
    1b36:	0d c0       	rjmp	.+26     	; 0x1b52 <shift+0x128>
				
			if (axis == AXIS_Y)
    1b38:	89 e7       	ldi	r24, 0x79	; 121
    1b3a:	98 16       	cp	r9, r24
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <shift+0x11c>
				clrvoxel(x,i,y);
    1b3e:	c8 01       	movw	r24, r16
    1b40:	b7 01       	movw	r22, r14
    1b42:	ae 01       	movw	r20, r28
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <shift+0x128>
			
			if (axis == AXIS_X)
    1b46:	88 e7       	ldi	r24, 0x78	; 120
    1b48:	98 16       	cp	r9, r24
    1b4a:	29 f4       	brne	.+10     	; 0x1b56 <shift+0x12c>
				clrvoxel(i,y,x);
    1b4c:	c7 01       	movw	r24, r14
    1b4e:	be 01       	movw	r22, r28
    1b50:	a8 01       	movw	r20, r16
    1b52:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
    1b56:	21 96       	adiw	r28, 0x01	; 1
    1b58:	c8 30       	cpi	r28, 0x08	; 8
    1b5a:	d1 05       	cpc	r29, r1
    1b5c:	31 f7       	brne	.-52     	; 0x1b2a <shift+0x100>
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
    1b5e:	0f 5f       	subi	r16, 0xFF	; 255
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	08 30       	cpi	r16, 0x08	; 8
    1b64:	11 05       	cpc	r17, r1
    1b66:	19 f0       	breq	.+6      	; 0x1b6e <shift+0x144>
    1b68:	c0 e0       	ldi	r28, 0x00	; 0
    1b6a:	d0 e0       	ldi	r29, 0x00	; 0
    1b6c:	de cf       	rjmp	.-68     	; 0x1b2a <shift+0x100>
			
			if (axis == AXIS_X)
				clrvoxel(i,y,x);
		}
	}
}
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	bf 90       	pop	r11
    1b80:	af 90       	pop	r10
    1b82:	9f 90       	pop	r9
    1b84:	7f 90       	pop	r7
    1b86:	6f 90       	pop	r6
    1b88:	5f 90       	pop	r5
    1b8a:	4f 90       	pop	r4
    1b8c:	3f 90       	pop	r3
    1b8e:	2f 90       	pop	r2
    1b90:	08 95       	ret

00001b92 <mirror_z>:
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	c0 54       	subi	r28, 0x40	; 64
    1b9c:	d0 40       	sbci	r29, 0x00	; 0
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    1ba8:	de 01       	movw	r26, r28
    1baa:	11 96       	adiw	r26, 0x01	; 1
    1bac:	e7 ef       	ldi	r30, 0xF7	; 247
    1bae:	f1 e0       	ldi	r31, 0x01	; 1
    1bb0:	80 e4       	ldi	r24, 0x40	; 64
    1bb2:	01 90       	ld	r0, Z+
    1bb4:	0d 92       	st	X+, r0
    1bb6:	81 50       	subi	r24, 0x01	; 1
    1bb8:	e1 f7       	brne	.-8      	; 0x1bb2 <mirror_z+0x20>
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	50 e0       	ldi	r21, 0x00	; 0

    for (y=0; y<CUBE_SIZE; y++)
    1bbe:	be 01       	movw	r22, r28
    1bc0:	6f 5f       	subi	r22, 0xFF	; 255
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	18 c0       	rjmp	.+48     	; 0x1bf6 <mirror_z+0x64>
    {
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
    1bc6:	8c 91       	ld	r24, X
    1bc8:	f9 01       	movw	r30, r18
    1bca:	93 e0       	ldi	r25, 0x03	; 3
    1bcc:	ee 0f       	add	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	9a 95       	dec	r25
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <mirror_z+0x3a>
    1bd4:	e4 0f       	add	r30, r20
    1bd6:	f5 1f       	adc	r31, r21
    1bd8:	e9 50       	subi	r30, 0x09	; 9
    1bda:	fe 4f       	sbci	r31, 0xFE	; 254
    1bdc:	80 83       	st	Z, r24
    1bde:	18 96       	adiw	r26, 0x08	; 8
    1be0:	21 50       	subi	r18, 0x01	; 1
    1be2:	30 40       	sbci	r19, 0x00	; 0

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    {
        for (z=0; z<CUBE_SIZE; z++)
    1be4:	8f ef       	ldi	r24, 0xFF	; 255
    1be6:	2f 3f       	cpi	r18, 0xFF	; 255
    1be8:	38 07       	cpc	r19, r24
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <mirror_z+0x34>
    1bec:	4f 5f       	subi	r20, 0xFF	; 255
    1bee:	5f 4f       	sbci	r21, 0xFF	; 255
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    1bf0:	48 30       	cpi	r20, 0x08	; 8
    1bf2:	51 05       	cpc	r21, r1
    1bf4:	31 f0       	breq	.+12     	; 0x1c02 <mirror_z+0x70>
    1bf6:	db 01       	movw	r26, r22
    1bf8:	a4 0f       	add	r26, r20
    1bfa:	b5 1f       	adc	r27, r21
    1bfc:	27 e0       	ldi	r18, 0x07	; 7
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	e2 cf       	rjmp	.-60     	; 0x1bc6 <mirror_z+0x34>
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
        }
    }
}
    1c02:	c0 5c       	subi	r28, 0xC0	; 192
    1c04:	df 4f       	sbci	r29, 0xFF	; 255
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <mirror_x>:

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
    1c16:	8f 92       	push	r8
    1c18:	9f 92       	push	r9
    1c1a:	af 92       	push	r10
    1c1c:	bf 92       	push	r11
    1c1e:	cf 92       	push	r12
    1c20:	df 92       	push	r13
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	c0 54       	subi	r28, 0x40	; 64
    1c34:	d0 40       	sbci	r29, 0x00	; 0
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    1c40:	de 01       	movw	r26, r28
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	e7 ef       	ldi	r30, 0xF7	; 247
    1c46:	f1 e0       	ldi	r31, 0x01	; 1
    1c48:	80 e4       	ldi	r24, 0x40	; 64
    1c4a:	01 90       	ld	r0, Z+
    1c4c:	0d 92       	st	X+, r0
    1c4e:	81 50       	subi	r24, 0x01	; 1
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <mirror_x+0x34>

    fill(0x00);
    1c52:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    1c56:	ee 24       	eor	r14, r14
    1c58:	ff 24       	eor	r15, r15
    
    for (z=0; z<CUBE_SIZE; z++)
    1c5a:	4e 01       	movw	r8, r28
    1c5c:	08 94       	sec
    1c5e:	81 1c       	adc	r8, r1
    1c60:	91 1c       	adc	r9, r1
    1c62:	17 c0       	rjmp	.+46     	; 0x1c92 <mirror_x+0x7c>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
    1c64:	f6 01       	movw	r30, r12
    1c66:	81 91       	ld	r24, Z+
    1c68:	6f 01       	movw	r12, r30
    1c6a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <flipbyte>
    1c6e:	f5 01       	movw	r30, r10
    1c70:	e0 0f       	add	r30, r16
    1c72:	f1 1f       	adc	r31, r17
    1c74:	e9 50       	subi	r30, 0x09	; 9
    1c76:	fe 4f       	sbci	r31, 0xFE	; 254
    1c78:	80 83       	st	Z, r24
    1c7a:	0f 5f       	subi	r16, 0xFF	; 255
    1c7c:	1f 4f       	sbci	r17, 0xFF	; 255

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    1c7e:	08 30       	cpi	r16, 0x08	; 8
    1c80:	11 05       	cpc	r17, r1
    1c82:	81 f7       	brne	.-32     	; 0x1c64 <mirror_x+0x4e>
    1c84:	08 94       	sec
    1c86:	e1 1c       	adc	r14, r1
    1c88:	f1 1c       	adc	r15, r1

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    1c8a:	f8 e0       	ldi	r31, 0x08	; 8
    1c8c:	ef 16       	cp	r14, r31
    1c8e:	f1 04       	cpc	r15, r1
    1c90:	69 f0       	breq	.+26     	; 0x1cac <mirror_x+0x96>
    1c92:	c7 01       	movw	r24, r14
    1c94:	23 e0       	ldi	r18, 0x03	; 3
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	2a 95       	dec	r18
    1c9c:	e1 f7       	brne	.-8      	; 0x1c96 <mirror_x+0x80>
    1c9e:	64 01       	movw	r12, r8
    1ca0:	c8 0e       	add	r12, r24
    1ca2:	d9 1e       	adc	r13, r25
    1ca4:	00 e0       	ldi	r16, 0x00	; 0
    1ca6:	10 e0       	ldi	r17, 0x00	; 0
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
    1ca8:	5c 01       	movw	r10, r24
    1caa:	dc cf       	rjmp	.-72     	; 0x1c64 <mirror_x+0x4e>
        }
    }
}
    1cac:	c0 5c       	subi	r28, 0xC0	; 192
    1cae:	df 4f       	sbci	r29, 0xFF	; 255
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	df 90       	pop	r13
    1cc8:	cf 90       	pop	r12
    1cca:	bf 90       	pop	r11
    1ccc:	af 90       	pop	r10
    1cce:	9f 90       	pop	r9
    1cd0:	8f 90       	pop	r8
    1cd2:	08 95       	ret

00001cd4 <mirror_y>:
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
    1cd4:	8f 92       	push	r8
    1cd6:	9f 92       	push	r9
    1cd8:	af 92       	push	r10
    1cda:	bf 92       	push	r11
    1cdc:	cf 92       	push	r12
    1cde:	df 92       	push	r13
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	c0 54       	subi	r28, 0x40	; 64
    1cf2:	d0 40       	sbci	r29, 0x00	; 0
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    1cfe:	de 01       	movw	r26, r28
    1d00:	11 96       	adiw	r26, 0x01	; 1
    1d02:	e7 ef       	ldi	r30, 0xF7	; 247
    1d04:	f1 e0       	ldi	r31, 0x01	; 1
    1d06:	80 e4       	ldi	r24, 0x40	; 64
    1d08:	01 90       	ld	r0, Z+
    1d0a:	0d 92       	st	X+, r0
    1d0c:	81 50       	subi	r24, 0x01	; 1
    1d0e:	e1 f7       	brne	.-8      	; 0x1d08 <mirror_y+0x34>

    fill(0x00);
    1d10:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    1d14:	aa 24       	eor	r10, r10
    1d16:	bb 24       	eor	r11, r11
    for (z=0; z<CUBE_SIZE; z++)
    1d18:	4e 01       	movw	r8, r28
    1d1a:	08 94       	sec
    1d1c:	81 1c       	adc	r8, r1
    1d1e:	91 1c       	adc	r9, r1
    1d20:	2a c0       	rjmp	.+84     	; 0x1d76 <mirror_y+0xa2>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
            {
                if (buffer[z][y] & (0x01 << x))
    1d22:	f7 01       	movw	r30, r14
    1d24:	80 81       	ld	r24, Z
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	00 2e       	mov	r0, r16
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <mirror_y+0x5c>
    1d2c:	95 95       	asr	r25
    1d2e:	87 95       	ror	r24
    1d30:	0a 94       	dec	r0
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <mirror_y+0x58>
    1d34:	80 ff       	sbrs	r24, 0
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <mirror_y+0x6e>
                    setvoxel(x,CUBE_SIZE-1-y,z);
    1d38:	c8 01       	movw	r24, r16
    1d3a:	b6 01       	movw	r22, r12
    1d3c:	a5 01       	movw	r20, r10
    1d3e:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    1d42:	0f 5f       	subi	r16, 0xFF	; 255
    1d44:	1f 4f       	sbci	r17, 0xFF	; 255
    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
    1d46:	08 30       	cpi	r16, 0x08	; 8
    1d48:	11 05       	cpc	r17, r1
    1d4a:	59 f7       	brne	.-42     	; 0x1d22 <mirror_y+0x4e>
    1d4c:	08 94       	sec
    1d4e:	e1 1c       	adc	r14, r1
    1d50:	f1 1c       	adc	r15, r1
    1d52:	08 94       	sec
    1d54:	c1 08       	sbc	r12, r1
    1d56:	d1 08       	sbc	r13, r1
    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    1d58:	ff ef       	ldi	r31, 0xFF	; 255
    1d5a:	cf 16       	cp	r12, r31
    1d5c:	ff ef       	ldi	r31, 0xFF	; 255
    1d5e:	df 06       	cpc	r13, r31
    1d60:	19 f0       	breq	.+6      	; 0x1d68 <mirror_y+0x94>
    1d62:	00 e0       	ldi	r16, 0x00	; 0
    1d64:	10 e0       	ldi	r17, 0x00	; 0
    1d66:	dd cf       	rjmp	.-70     	; 0x1d22 <mirror_y+0x4e>
    1d68:	08 94       	sec
    1d6a:	a1 1c       	adc	r10, r1
    1d6c:	b1 1c       	adc	r11, r1
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    1d6e:	88 e0       	ldi	r24, 0x08	; 8
    1d70:	a8 16       	cp	r10, r24
    1d72:	b1 04       	cpc	r11, r1
    1d74:	61 f0       	breq	.+24     	; 0x1d8e <mirror_y+0xba>
    1d76:	75 01       	movw	r14, r10
    1d78:	43 e0       	ldi	r20, 0x03	; 3
    1d7a:	ee 0c       	add	r14, r14
    1d7c:	ff 1c       	adc	r15, r15
    1d7e:	4a 95       	dec	r20
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <mirror_y+0xa6>
    1d82:	e8 0c       	add	r14, r8
    1d84:	f9 1c       	adc	r15, r9
    1d86:	37 e0       	ldi	r19, 0x07	; 7
    1d88:	c3 2e       	mov	r12, r19
    1d8a:	d1 2c       	mov	r13, r1
    1d8c:	ea cf       	rjmp	.-44     	; 0x1d62 <mirror_y+0x8e>
                    setvoxel(x,CUBE_SIZE-1-y,z);
            }
        }
    }

}
    1d8e:	c0 5c       	subi	r28, 0xC0	; 192
    1d90:	df 4f       	sbci	r29, 0xFF	; 255
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	bf 90       	pop	r11
    1dae:	af 90       	pop	r10
    1db0:	9f 90       	pop	r9
    1db2:	8f 90       	pop	r8
    1db4:	08 95       	ret

00001db6 <tmp2cube>:
}

// Copies the contents of fb (temp cube buffer) into the rendering buffer
void tmp2cube (void)
{	
    memcpy(cube, fb, 64); // copy the current cube into a buffer.
    1db6:	a7 ef       	ldi	r26, 0xF7	; 247
    1db8:	b1 e0       	ldi	r27, 0x01	; 1
    1dba:	e7 eb       	ldi	r30, 0xB7	; 183
    1dbc:	f1 e0       	ldi	r31, 0x01	; 1
    1dbe:	80 e4       	ldi	r24, 0x40	; 64
    1dc0:	01 90       	ld	r0, Z+
    1dc2:	0d 92       	st	X+, r0
    1dc4:	81 50       	subi	r24, 0x01	; 1
    1dc6:	e1 f7       	brne	.-8      	; 0x1dc0 <tmp2cube+0xa>
}
    1dc8:	08 95       	ret

00001dca <spike>:
		}
	}


void spike(x,y,z)
	{
    1dca:	cf 92       	push	r12
    1dcc:	df 92       	push	r13
    1dce:	ef 92       	push	r14
    1dd0:	ff 92       	push	r15
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	6c 01       	movw	r12, r24
    1ddc:	7b 01       	movw	r14, r22
    1dde:	8a 01       	movw	r16, r20
    1de0:	c0 e0       	ldi	r28, 0x00	; 0
    1de2:	d0 e0       	ldi	r29, 0x00	; 0
    1de4:	06 c0       	rjmp	.+12     	; 0x1df2 <spike+0x28>
int i;
for (i=0;i<z;i++)
		{
		setvoxel (x,y,i);
    1de6:	c6 01       	movw	r24, r12
    1de8:	b7 01       	movw	r22, r14
    1dea:	ae 01       	movw	r20, r28
    1dec:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>


void spike(x,y,z)
	{
int i;
for (i=0;i<z;i++)
    1df0:	21 96       	adiw	r28, 0x01	; 1
    1df2:	c0 17       	cp	r28, r16
    1df4:	d1 07       	cpc	r29, r17
    1df6:	bc f3       	brlt	.-18     	; 0x1de6 <spike+0x1c>
		{
		setvoxel (x,y,i);
		}
	}
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	ff 90       	pop	r15
    1e02:	ef 90       	pop	r14
    1e04:	df 90       	pop	r13
    1e06:	cf 90       	pop	r12
    1e08:	08 95       	ret

00001e0a <pillar>:
}
}
}

void pillar (x,y,z)
	{
    1e0a:	8f 92       	push	r8
    1e0c:	9f 92       	push	r9
    1e0e:	af 92       	push	r10
    1e10:	bf 92       	push	r11
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	7c 01       	movw	r14, r24
    1e24:	8b 01       	movw	r16, r22
    1e26:	4a 01       	movw	r8, r20
    1e28:	c0 e0       	ldi	r28, 0x00	; 0
    1e2a:	d0 e0       	ldi	r29, 0x00	; 0
int i;
for (i=0;i<z;i++)
		{
setvoxel (x,y,i);
setvoxel (x+1,y,i);
    1e2c:	5c 01       	movw	r10, r24
    1e2e:	08 94       	sec
    1e30:	a1 1c       	adc	r10, r1
    1e32:	b1 1c       	adc	r11, r1
setvoxel (x,y+1,i);
    1e34:	6b 01       	movw	r12, r22
    1e36:	08 94       	sec
    1e38:	c1 1c       	adc	r12, r1
    1e3a:	d1 1c       	adc	r13, r1
    1e3c:	15 c0       	rjmp	.+42     	; 0x1e68 <pillar+0x5e>
void pillar (x,y,z)
	{
int i;
for (i=0;i<z;i++)
		{
setvoxel (x,y,i);
    1e3e:	c7 01       	movw	r24, r14
    1e40:	b8 01       	movw	r22, r16
    1e42:	ae 01       	movw	r20, r28
    1e44:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
setvoxel (x+1,y,i);
    1e48:	c5 01       	movw	r24, r10
    1e4a:	b8 01       	movw	r22, r16
    1e4c:	ae 01       	movw	r20, r28
    1e4e:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
setvoxel (x,y+1,i);
    1e52:	c7 01       	movw	r24, r14
    1e54:	b6 01       	movw	r22, r12
    1e56:	ae 01       	movw	r20, r28
    1e58:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
setvoxel (x+1,y+1,i);
    1e5c:	c5 01       	movw	r24, r10
    1e5e:	b6 01       	movw	r22, r12
    1e60:	ae 01       	movw	r20, r28
    1e62:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
}

void pillar (x,y,z)
	{
int i;
for (i=0;i<z;i++)
    1e66:	21 96       	adiw	r28, 0x01	; 1
    1e68:	c8 15       	cp	r28, r8
    1e6a:	d9 05       	cpc	r29, r9
    1e6c:	44 f3       	brlt	.-48     	; 0x1e3e <pillar+0x34>
setvoxel (x,y,i);
setvoxel (x+1,y,i);
setvoxel (x,y+1,i);
setvoxel (x+1,y+1,i);
		}
	}
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	df 90       	pop	r13
    1e7c:	cf 90       	pop	r12
    1e7e:	bf 90       	pop	r11
    1e80:	af 90       	pop	r10
    1e82:	9f 90       	pop	r9
    1e84:	8f 90       	pop	r8
    1e86:	08 95       	ret

00001e88 <wall>:
// *************************************
// Trying to add some effects here...
// *************************************

void wall (x,y) // make a "wall" at position X, Y high
{
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	6c 01       	movw	r12, r24
    1e9a:	7b 01       	movw	r14, r22
    1e9c:	00 e0       	ldi	r16, 0x00	; 0
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <wall+0x34>
int w;
int z;

for (z=0;z < y;z++)
    1ea2:	c0 e0       	ldi	r28, 0x00	; 0
    1ea4:	d0 e0       	ldi	r29, 0x00	; 0
{
for (w=0;w < 8;w++)
{
setvoxel (w,x,z);
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	a8 01       	movw	r20, r16
    1eac:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
int w;
int z;

for (z=0;z < y;z++)
{
for (w=0;w < 8;w++)
    1eb0:	21 96       	adiw	r28, 0x01	; 1
    1eb2:	c8 30       	cpi	r28, 0x08	; 8
    1eb4:	d1 05       	cpc	r29, r1
    1eb6:	b9 f7       	brne	.-18     	; 0x1ea6 <wall+0x1e>
void wall (x,y) // make a "wall" at position X, Y high
{
int w;
int z;

for (z=0;z < y;z++)
    1eb8:	0f 5f       	subi	r16, 0xFF	; 255
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	0e 15       	cp	r16, r14
    1ebe:	1f 05       	cpc	r17, r15
    1ec0:	84 f3       	brlt	.-32     	; 0x1ea2 <wall+0x1a>
for (w=0;w < 8;w++)
{
setvoxel (w,x,z);
}
}
}
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	08 95       	ret

00001ed4 <effect_telcstairs_do>:
	}
	
}

int effect_telcstairs_do(int x, int val, int delay)
{
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	ec 01       	movw	r28, r24
    1eda:	dc 01       	movw	r26, r24
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <effect_telcstairs_do+0x36>
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
	{
		if(x < CUBE_SIZE && y < CUBE_SIZE)
    1ee2:	a8 30       	cpi	r26, 0x08	; 8
    1ee4:	b1 05       	cpc	r27, r1
    1ee6:	74 f4       	brge	.+28     	; 0x1f04 <effect_telcstairs_do+0x30>
    1ee8:	28 30       	cpi	r18, 0x08	; 8
    1eea:	31 05       	cpc	r19, r1
    1eec:	5c f4       	brge	.+22     	; 0x1f04 <effect_telcstairs_do+0x30>
		{
			cube[x][y] = val;
    1eee:	fd 01       	movw	r30, r26
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	8a 95       	dec	r24
    1ef8:	e1 f7       	brne	.-8      	; 0x1ef2 <effect_telcstairs_do+0x1e>
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	e9 50       	subi	r30, 0x09	; 9
    1f00:	fe 4f       	sbci	r31, 0xFE	; 254
    1f02:	60 83       	st	Z, r22

int effect_telcstairs_do(int x, int val, int delay)
{
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    1f04:	2f 5f       	subi	r18, 0xFF	; 255
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	11 97       	sbiw	r26, 0x01	; 1
    1f0a:	c2 17       	cp	r28, r18
    1f0c:	d3 07       	cpc	r29, r19
    1f0e:	4c f7       	brge	.-46     	; 0x1ee2 <effect_telcstairs_do+0xe>
		if(x < CUBE_SIZE && y < CUBE_SIZE)
		{
			cube[x][y] = val;
		}
	}
	delay_ms(delay);
    1f10:	ca 01       	movw	r24, r20
    1f12:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	return z;
}
    1f16:	ce 01       	movw	r24, r28
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	08 95       	ret

00001f1e <effect_telcstairs>:

void effect_telcstairs (int invert, int delay, int val)
{
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	8b 01       	movw	r16, r22
    1f28:	ea 01       	movw	r28, r20
	int x;

	if(invert)
    1f2a:	89 2b       	or	r24, r25
    1f2c:	51 f0       	breq	.+20     	; 0x1f42 <effect_telcstairs+0x24>
    1f2e:	80 e1       	ldi	r24, 0x10	; 16
    1f30:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
		{
			x = effect_telcstairs_do(x,val,delay);
    1f32:	be 01       	movw	r22, r28
    1f34:	a8 01       	movw	r20, r16
    1f36:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <effect_telcstairs_do>
{
	int x;

	if(invert)
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	97 ff       	sbrs	r25, 7
    1f3e:	f9 cf       	rjmp	.-14     	; 0x1f32 <effect_telcstairs+0x14>
    1f40:	0a c0       	rjmp	.+20     	; 0x1f56 <effect_telcstairs+0x38>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
		{
			x = effect_telcstairs_do(x,val,delay);
    1f46:	be 01       	movw	r22, r28
    1f48:	a8 01       	movw	r20, r16
    1f4a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <effect_telcstairs_do>
			x = effect_telcstairs_do(x,val,delay);
		}
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	80 31       	cpi	r24, 0x10	; 16
    1f52:	91 05       	cpc	r25, r1
    1f54:	c4 f3       	brlt	.-16     	; 0x1f46 <effect_telcstairs+0x28>
		{
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <sendvoxel_z>:


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
    1f60:	7f 92       	push	r7
    1f62:	8f 92       	push	r8
    1f64:	9f 92       	push	r9
    1f66:	af 92       	push	r10
    1f68:	bf 92       	push	r11
    1f6a:	cf 92       	push	r12
    1f6c:	df 92       	push	r13
    1f6e:	ef 92       	push	r14
    1f70:	ff 92       	push	r15
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	e8 2e       	mov	r14, r24
    1f7c:	f6 2e       	mov	r15, r22
    1f7e:	74 2e       	mov	r7, r20
    1f80:	69 01       	movw	r12, r18
    1f82:	c0 e0       	ldi	r28, 0x00	; 0
    1f84:	d0 e0       	ldi	r29, 0x00	; 0
    1f86:	27 e0       	ldi	r18, 0x07	; 7
    1f88:	82 2e       	mov	r8, r18
    1f8a:	91 2c       	mov	r9, r1
	for (i=0; i<8; i++)
	{
		if (z == 7)
		{
			ii = 7-i;
			clrvoxel(x,y,ii+1);
    1f8c:	98 e0       	ldi	r25, 0x08	; 8
    1f8e:	a9 2e       	mov	r10, r25
    1f90:	b1 2c       	mov	r11, r1
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<8; i++)
	{
		if (z == 7)
    1f92:	87 e0       	ldi	r24, 0x07	; 7
    1f94:	78 16       	cp	r7, r24
    1f96:	69 f4       	brne	.+26     	; 0x1fb2 <sendvoxel_z+0x52>


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
    1f98:	84 01       	movw	r16, r8
    1f9a:	0c 1b       	sub	r16, r28
    1f9c:	1d 0b       	sbc	r17, r29
	for (i=0; i<8; i++)
	{
		if (z == 7)
		{
			ii = 7-i;
			clrvoxel(x,y,ii+1);
    1f9e:	a5 01       	movw	r20, r10
    1fa0:	4c 1b       	sub	r20, r28
    1fa2:	5d 0b       	sbc	r21, r29
    1fa4:	8e 2d       	mov	r24, r14
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	6f 2d       	mov	r22, r15
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
    1fb0:	0a c0       	rjmp	.+20     	; 0x1fc6 <sendvoxel_z+0x66>
		} else
		{
			ii = i;
			clrvoxel(x,y,ii-1);
    1fb2:	ae 01       	movw	r20, r28
    1fb4:	41 50       	subi	r20, 0x01	; 1
    1fb6:	50 40       	sbci	r21, 0x00	; 0
    1fb8:	8e 2d       	mov	r24, r14
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	6f 2d       	mov	r22, r15
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
    1fc4:	8e 01       	movw	r16, r28
		}
		setvoxel(x,y,ii);
    1fc6:	8e 2d       	mov	r24, r14
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	6f 2d       	mov	r22, r15
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	a8 01       	movw	r20, r16
    1fd0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		delay_ms(delay);
    1fd4:	c6 01       	movw	r24, r12
    1fd6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<8; i++)
    1fda:	21 96       	adiw	r28, 0x01	; 1
    1fdc:	c8 30       	cpi	r28, 0x08	; 8
    1fde:	d1 05       	cpc	r29, r1
    1fe0:	c1 f6       	brne	.-80     	; 0x1f92 <sendvoxel_z+0x32>
			clrvoxel(x,y,ii-1);
		}
		setvoxel(x,y,ii);
		delay_ms(delay);
	}
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	9f 90       	pop	r9
    1ff8:	8f 90       	pop	r8
    1ffa:	7f 90       	pop	r7
    1ffc:	08 95       	ret

00001ffe <effect_pathmove>:
	}
}


void effect_pathmove (unsigned char *path, int length)
{
    1ffe:	af 92       	push	r10
    2000:	bf 92       	push	r11
    2002:	cf 92       	push	r12
    2004:	df 92       	push	r13
    2006:	ef 92       	push	r14
    2008:	ff 92       	push	r15
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	5c 01       	movw	r10, r24
    2014:	eb 01       	movw	r28, r22
    2016:	3d c0       	rjmp	.+122    	; 0x2092 <effect_pathmove+0x94>
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
	{
if (xit == 1) {i = 0;break;}
    2018:	80 91 b3 01 	lds	r24, 0x01B3
    201c:	90 91 b4 01 	lds	r25, 0x01B4
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	e1 f1       	breq	.+120    	; 0x209c <effect_pathmove+0x9e>
    2024:	00 e0       	ldi	r16, 0x00	; 0
    2026:	10 e0       	ldi	r17, 0x00	; 0
		for (z=0;z<8;z++)
		{
		if (xit == 1) {i = 0;break;}
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
    2028:	75 01       	movw	r14, r10
    202a:	ec 0e       	add	r14, r28
    202c:	fd 1e       	adc	r15, r29
    202e:	67 01       	movw	r12, r14
    2030:	08 94       	sec
    2032:	c1 08       	sbc	r12, r1
    2034:	d1 08       	sbc	r13, r1
	for (i=(length-1);i>=1;i--)
	{
if (xit == 1) {i = 0;break;}
		for (z=0;z<8;z++)
		{
		if (xit == 1) {i = 0;break;}
    2036:	80 91 b3 01 	lds	r24, 0x01B3
    203a:	90 91 b4 01 	lds	r25, 0x01B4
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	19 f4       	brne	.+6      	; 0x2048 <effect_pathmove+0x4a>
    2042:	c0 e0       	ldi	r28, 0x00	; 0
    2044:	d0 e0       	ldi	r29, 0x00	; 0
    2046:	1f c0       	rjmp	.+62     	; 0x2086 <effect_pathmove+0x88>
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
    2048:	f6 01       	movw	r30, r12
    204a:	80 81       	ld	r24, Z
    204c:	68 2f       	mov	r22, r24
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	6f 70       	andi	r22, 0x0F	; 15
    2052:	70 70       	andi	r23, 0x00	; 0
    2054:	82 95       	swap	r24
    2056:	8f 70       	andi	r24, 0x0F	; 15
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a8 01       	movw	r20, r16
    205c:	0e 94 a7 08 	call	0x114e	; 0x114e <getvoxel>
    2060:	28 2f       	mov	r18, r24
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
    2062:	f7 01       	movw	r30, r14
    2064:	80 81       	ld	r24, Z
    2066:	68 2f       	mov	r22, r24
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	6f 70       	andi	r22, 0x0F	; 15
    206c:	70 70       	andi	r23, 0x00	; 0
    206e:	82 95       	swap	r24
    2070:	8f 70       	andi	r24, 0x0F	; 15
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a8 01       	movw	r20, r16
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	0e 94 ca 08 	call	0x1194	; 0x1194 <altervoxel>
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
	{
if (xit == 1) {i = 0;break;}
		for (z=0;z<8;z++)
    207c:	0f 5f       	subi	r16, 0xFF	; 255
    207e:	1f 4f       	sbci	r17, 0xFF	; 255
    2080:	08 30       	cpi	r16, 0x08	; 8
    2082:	11 05       	cpc	r17, r1
    2084:	c1 f6       	brne	.-80     	; 0x2036 <effect_pathmove+0x38>
		{
		if (xit == 1) {i = 0;break;}
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
if (xit == 1) {i = 0;break;}
    2086:	80 91 b3 01 	lds	r24, 0x01B3
    208a:	90 91 b4 01 	lds	r25, 0x01B4
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	29 f0       	breq	.+10     	; 0x209c <effect_pathmove+0x9e>
void effect_pathmove (unsigned char *path, int length)
{
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
    2092:	21 97       	sbiw	r28, 0x01	; 1
    2094:	1c 16       	cp	r1, r28
    2096:	1d 06       	cpc	r1, r29
    2098:	0c f4       	brge	.+2      	; 0x209c <effect_pathmove+0x9e>
    209a:	be cf       	rjmp	.-132    	; 0x2018 <effect_pathmove+0x1a>
    209c:	c0 e0       	ldi	r28, 0x00	; 0
    209e:	d0 e0       	ldi	r29, 0x00	; 0
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
if (xit == 1) {i = 0;break;}
	}
	for (i=0;i<8;i++){
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
    20a0:	f5 01       	movw	r30, r10
    20a2:	80 81       	ld	r24, Z
    20a4:	68 2f       	mov	r22, r24
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	6f 70       	andi	r22, 0x0F	; 15
    20aa:	70 70       	andi	r23, 0x00	; 0
    20ac:	82 95       	swap	r24
    20ae:	8f 70       	andi	r24, 0x0F	; 15
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	ae 01       	movw	r20, r28
    20b4:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
 if (xit == 1) {i = 0;break;}
    20b8:	80 91 b3 01 	lds	r24, 0x01B3
    20bc:	90 91 b4 01 	lds	r25, 0x01B4
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	21 f0       	breq	.+8      	; 0x20cc <effect_pathmove+0xce>
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
if (xit == 1) {i = 0;break;}
	}
	for (i=0;i<8;i++){
    20c4:	21 96       	adiw	r28, 0x01	; 1
    20c6:	c8 30       	cpi	r28, 0x08	; 8
    20c8:	d1 05       	cpc	r29, r1
    20ca:	51 f7       	brne	.-44     	; 0x20a0 <effect_pathmove+0xa2>
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
 if (xit == 1) {i = 0;break;}
}
}
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	ff 90       	pop	r15
    20d6:	ef 90       	pop	r14
    20d8:	df 90       	pop	r13
    20da:	cf 90       	pop	r12
    20dc:	bf 90       	pop	r11
    20de:	af 90       	pop	r10
    20e0:	08 95       	ret

000020e2 <effect_path_bitmap>:
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    20e2:	4f 92       	push	r4
    20e4:	5f 92       	push	r5
    20e6:	6f 92       	push	r6
    20e8:	7f 92       	push	r7
    20ea:	8f 92       	push	r8
    20ec:	9f 92       	push	r9
    20ee:	af 92       	push	r10
    20f0:	bf 92       	push	r11
    20f2:	cf 92       	push	r12
    20f4:	df 92       	push	r13
    20f6:	ef 92       	push	r14
    20f8:	ff 92       	push	r15
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	6c 97       	sbiw	r28, 0x1c	; 28
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	3c 01       	movw	r6, r24
    2114:	a6 2e       	mov	r10, r22
    2116:	4a 01       	movw	r8, r20
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	2e 01       	movw	r4, r28
    211c:	08 94       	sec
    211e:	41 1c       	adc	r4, r1
    2120:	51 1c       	adc	r5, r1
    2122:	b2 01       	movw	r22, r4
    2124:	4c e1       	ldi	r20, 0x1C	; 28
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	0e 94 fe 30 	call	0x61fc	; 0x61fc <font_getpath>
    212c:	cc 24       	eor	r12, r12
    212e:	dd 24       	eor	r13, r13
    2130:	79 c0       	rjmp	.+242    	; 0x2224 <effect_path_bitmap+0x142>
	
	for (i=0; i < iterations; i++)
	{	
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}
    2132:	80 91 b3 01 	lds	r24, 0x01B3
    2136:	90 91 b4 01 	lds	r25, 0x01B4
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	09 f4       	brne	.+2      	; 0x2140 <effect_path_bitmap+0x5e>
    213e:	76 c0       	rjmp	.+236    	; 0x222c <effect_path_bitmap+0x14a>
    2140:	ee 24       	eor	r14, r14
    2142:	ff 24       	eor	r15, r15

		for (ii=0;ii<8;ii++)
		{
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}	
    2144:	80 91 b3 01 	lds	r24, 0x01B3
    2148:	90 91 b4 01 	lds	r25, 0x01B4
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	09 f4       	brne	.+2      	; 0x2152 <effect_path_bitmap+0x70>
    2150:	4e c0       	rjmp	.+156    	; 0x21ee <effect_path_bitmap+0x10c>
    2152:	00 e0       	ldi	r16, 0x00	; 0
    2154:	10 e0       	ldi	r17, 0x00	; 0
    2156:	47 e0       	ldi	r20, 0x07	; 7
    2158:	b4 2e       	mov	r11, r20
			for (z=0;z<8;z++)
			{
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}
    215a:	80 91 b3 01 	lds	r24, 0x01B3
    215e:	90 91 b4 01 	lds	r25, 0x01B4
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	19 f1       	breq	.+70     	; 0x21ac <effect_path_bitmap+0xca>
				if (font_getbitmappixel(bitmap,(7-z),ii))
    2166:	8a 2d       	mov	r24, r10
    2168:	6b 2d       	mov	r22, r11
    216a:	4e 2d       	mov	r20, r14
    216c:	0e 94 18 31 	call	0x6230	; 0x6230 <font_getbitmappixel>
    2170:	88 23       	and	r24, r24
    2172:	41 f0       	breq	.+16     	; 0x2184 <effect_path_bitmap+0xa2>
				{
					setvoxel(0,7,z);
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	67 e0       	ldi	r22, 0x07	; 7
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	a8 01       	movw	r20, r16
    217e:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    2182:	07 c0       	rjmp	.+14     	; 0x2192 <effect_path_bitmap+0xb0>
				} else
				{
					clrvoxel(0,7,z);
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	67 e0       	ldi	r22, 0x07	; 7
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	a8 01       	movw	r20, r16
    218e:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
				}
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}
    2192:	80 91 b3 01 	lds	r24, 0x01B3
    2196:	90 91 b4 01 	lds	r25, 0x01B4
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	39 f0       	breq	.+14     	; 0x21ac <effect_path_bitmap+0xca>
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}

		for (ii=0;ii<8;ii++)
		{
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}	
			for (z=0;z<8;z++)
    219e:	0f 5f       	subi	r16, 0xFF	; 255
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	ba 94       	dec	r11
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	b8 16       	cp	r11, r24
    21a8:	c1 f6       	brne	.-80     	; 0x215a <effect_path_bitmap+0x78>
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <effect_path_bitmap+0xd2>
    21ac:	64 01       	movw	r12, r8
    21ae:	38 e0       	ldi	r19, 0x08	; 8
    21b0:	e3 2e       	mov	r14, r19
    21b2:	f1 2c       	mov	r15, r1
					clrvoxel(0,7,z);
				}
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}

			}
			delay_ms(delay);
    21b4:	c3 01       	movw	r24, r6
    21b6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}
    21ba:	80 91 b3 01 	lds	r24, 0x01B3
    21be:	90 91 b4 01 	lds	r25, 0x01B4
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	a1 f0       	breq	.+40     	; 0x21ee <effect_path_bitmap+0x10c>
			effect_pathmove(path, 28);
    21c6:	c2 01       	movw	r24, r4
    21c8:	6c e1       	ldi	r22, 0x1C	; 28
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <effect_pathmove>
if (xit == 1) {i = iterations;break;}
    21d0:	80 91 b3 01 	lds	r24, 0x01B3
    21d4:	90 91 b4 01 	lds	r25, 0x01B4
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	49 f0       	breq	.+18     	; 0x21ee <effect_path_bitmap+0x10c>
	
	for (i=0; i < iterations; i++)
	{	
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}

		for (ii=0;ii<8;ii++)
    21dc:	08 94       	sec
    21de:	e1 1c       	adc	r14, r1
    21e0:	f1 1c       	adc	r15, r1
    21e2:	88 e0       	ldi	r24, 0x08	; 8
    21e4:	e8 16       	cp	r14, r24
    21e6:	f1 04       	cpc	r15, r1
    21e8:	0c f4       	brge	.+2      	; 0x21ec <effect_path_bitmap+0x10a>
    21ea:	ac cf       	rjmp	.-168    	; 0x2144 <effect_path_bitmap+0x62>
    21ec:	01 c0       	rjmp	.+2      	; 0x21f0 <effect_path_bitmap+0x10e>
    21ee:	64 01       	movw	r12, r8
    21f0:	00 e0       	ldi	r16, 0x00	; 0
    21f2:	10 e0       	ldi	r17, 0x00	; 0
if (xit == 1) {i = iterations;break;}
		}
	
		for (ii=0;ii<20;ii++)
		{
			delay_ms(delay);
    21f4:	c3 01       	movw	r24, r6
    21f6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}
    21fa:	80 91 b3 01 	lds	r24, 0x01B3
    21fe:	90 91 b4 01 	lds	r25, 0x01B4
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	11 f4       	brne	.+4      	; 0x220a <effect_path_bitmap+0x128>
    2206:	64 01       	movw	r12, r8
    2208:	0a c0       	rjmp	.+20     	; 0x221e <effect_path_bitmap+0x13c>
			effect_pathmove(path, 28);
    220a:	c2 01       	movw	r24, r4
    220c:	6c e1       	ldi	r22, 0x1C	; 28
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <effect_pathmove>
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}
			effect_pathmove(path, 28);
if (xit == 1) {i = iterations;break;}
		}
	
		for (ii=0;ii<20;ii++)
    2214:	0f 5f       	subi	r16, 0xFF	; 255
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	04 31       	cpi	r16, 0x14	; 20
    221a:	11 05       	cpc	r17, r1
    221c:	59 f7       	brne	.-42     	; 0x21f4 <effect_path_bitmap+0x112>
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
    221e:	08 94       	sec
    2220:	c1 1c       	adc	r12, r1
    2222:	d1 1c       	adc	r13, r1
    2224:	c8 14       	cp	r12, r8
    2226:	d9 04       	cpc	r13, r9
    2228:	0c f4       	brge	.+2      	; 0x222c <effect_path_bitmap+0x14a>
    222a:	83 cf       	rjmp	.-250    	; 0x2132 <effect_path_bitmap+0x50>
    222c:	00 e0       	ldi	r16, 0x00	; 0
    222e:	10 e0       	ldi	r17, 0x00	; 0
	for (ii=0;ii<10;ii++)
	{
if (xit == 1) {ii = 10;break;}

		delay_ms(delay);
		effect_pathmove(path, 28);
    2230:	7e 01       	movw	r14, r28
    2232:	08 94       	sec
    2234:	e1 1c       	adc	r14, r1
    2236:	f1 1c       	adc	r15, r1
			effect_pathmove(path, 28);
		}
	}
	for (ii=0;ii<10;ii++)
	{
if (xit == 1) {ii = 10;break;}
    2238:	80 91 b3 01 	lds	r24, 0x01B3
    223c:	90 91 b4 01 	lds	r25, 0x01B4
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	69 f0       	breq	.+26     	; 0x225e <effect_path_bitmap+0x17c>

		delay_ms(delay);
    2244:	c3 01       	movw	r24, r6
    2246:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		effect_pathmove(path, 28);
    224a:	c7 01       	movw	r24, r14
    224c:	6c e1       	ldi	r22, 0x1C	; 28
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <effect_pathmove>
			delay_ms(delay);
if (xit == 1) {i = iterations;ii = 8;z = 8;break;}
			effect_pathmove(path, 28);
		}
	}
	for (ii=0;ii<10;ii++)
    2254:	0f 5f       	subi	r16, 0xFF	; 255
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
    2258:	0a 30       	cpi	r16, 0x0A	; 10
    225a:	11 05       	cpc	r17, r1
    225c:	69 f7       	brne	.-38     	; 0x2238 <effect_path_bitmap+0x156>

		delay_ms(delay);
		effect_pathmove(path, 28);
	}

}
    225e:	6c 96       	adiw	r28, 0x1c	; 28
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	df 90       	pop	r13
    2278:	cf 90       	pop	r12
    227a:	bf 90       	pop	r11
    227c:	af 90       	pop	r10
    227e:	9f 90       	pop	r9
    2280:	8f 90       	pop	r8
    2282:	7f 90       	pop	r7
    2284:	6f 90       	pop	r6
    2286:	5f 90       	pop	r5
    2288:	4f 90       	pop	r4
    228a:	08 95       	ret

0000228c <effect_path_text>:
		
	}
}

void effect_path_text (int delay, char *str)
{
    228c:	2f 92       	push	r2
    228e:	3f 92       	push	r3
    2290:	4f 92       	push	r4
    2292:	5f 92       	push	r5
    2294:	6f 92       	push	r6
    2296:	7f 92       	push	r7
    2298:	8f 92       	push	r8
    229a:	9f 92       	push	r9
    229c:	af 92       	push	r10
    229e:	bf 92       	push	r11
    22a0:	cf 92       	push	r12
    22a2:	df 92       	push	r13
    22a4:	ef 92       	push	r14
    22a6:	ff 92       	push	r15
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	a1 97       	sbiw	r28, 0x21	; 33
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	3c 01       	movw	r6, r24
    22c2:	6b 01       	movw	r12, r22
	int z, i,ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    22c4:	66 e0       	ldi	r22, 0x06	; 6
    22c6:	86 2e       	mov	r8, r22
    22c8:	91 2c       	mov	r9, r1
    22ca:	8c 0e       	add	r8, r28
    22cc:	9d 1e       	adc	r9, r29
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	b4 01       	movw	r22, r8
    22d2:	4c e1       	ldi	r20, 0x1C	; 28
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	0e 94 fe 30 	call	0x61fc	; 0x61fc <font_getpath>
	while (*str && !xit)
	{
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
    22da:	1e 01       	movw	r2, r28
    22dc:	08 94       	sec
    22de:	21 1c       	adc	r2, r1
    22e0:	31 1c       	adc	r3, r1
				{
					clrvoxel(0,7,z);
				}
				
			}
			effect_pathmove(path, 28);
    22e2:	24 01       	movw	r4, r8
    22e4:	44 c0       	rjmp	.+136    	; 0x236e <effect_path_text+0xe2>
	while (*str && !xit)
	{
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
    22e6:	82 2f       	mov	r24, r18
    22e8:	b1 01       	movw	r22, r2
    22ea:	0e 94 55 31 	call	0x62aa	; 0x62aa <font_getchar>
    22ee:	71 01       	movw	r14, r2
		
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
    22f0:	f7 01       	movw	r30, r14
    22f2:	80 81       	ld	r24, Z
    22f4:	00 e0       	ldi	r16, 0x00	; 0
    22f6:	10 e0       	ldi	r17, 0x00	; 0
			
			for (z=0;z<8;z++)
			{
				if ((stripe>>(7-z)) & 0x01)
    22f8:	a8 2e       	mov	r10, r24
    22fa:	bb 24       	eor	r11, r11
    22fc:	87 e0       	ldi	r24, 0x07	; 7
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	80 1b       	sub	r24, r16
    2302:	91 0b       	sbc	r25, r17
    2304:	95 01       	movw	r18, r10
    2306:	02 c0       	rjmp	.+4      	; 0x230c <effect_path_text+0x80>
    2308:	35 95       	asr	r19
    230a:	27 95       	ror	r18
    230c:	8a 95       	dec	r24
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <effect_path_text+0x7c>
    2310:	20 ff       	sbrs	r18, 0
    2312:	08 c0       	rjmp	.+16     	; 0x2324 <effect_path_text+0x98>
				{
					setvoxel(0,7,z);
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	67 e0       	ldi	r22, 0x07	; 7
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	a8 01       	movw	r20, r16
    231e:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    2322:	07 c0       	rjmp	.+14     	; 0x2332 <effect_path_text+0xa6>
				} else
				{
					clrvoxel(0,7,z);
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	67 e0       	ldi	r22, 0x07	; 7
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	a8 01       	movw	r20, r16
    232e:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=0;z<8;z++)
    2332:	0f 5f       	subi	r16, 0xFF	; 255
    2334:	1f 4f       	sbci	r17, 0xFF	; 255
    2336:	08 30       	cpi	r16, 0x08	; 8
    2338:	11 05       	cpc	r17, r1
    233a:	01 f7       	brne	.-64     	; 0x22fc <effect_path_text+0x70>
				{
					clrvoxel(0,7,z);
				}
				
			}
			effect_pathmove(path, 28);
    233c:	c4 01       	movw	r24, r8
    233e:	6c e1       	ldi	r22, 0x1C	; 28
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <effect_pathmove>
			delay_ms(delay);
    2346:	c3 01       	movw	r24, r6
    2348:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    234c:	08 94       	sec
    234e:	e1 1c       	adc	r14, r1
    2350:	f1 1c       	adc	r15, r1
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
		
		for (ii=0;ii<5;ii++)
    2352:	e4 14       	cp	r14, r4
    2354:	f5 04       	cpc	r15, r5
    2356:	61 f6       	brne	.-104    	; 0x22f0 <effect_path_text+0x64>
	while (*str && !xit)
	{
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
    2358:	08 94       	sec
    235a:	c1 1c       	adc	r12, r1
    235c:	d1 1c       	adc	r13, r1
			}
			effect_pathmove(path, 28);
			delay_ms(delay);
		}
	
		effect_pathmove(path, 28);
    235e:	c2 01       	movw	r24, r4
    2360:	6c e1       	ldi	r22, 0x1C	; 28
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <effect_pathmove>
		delay_ms(delay);
    2368:	c3 01       	movw	r24, r6
    236a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	font_getpath(0,path,28);
	
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str && !xit)
    236e:	f6 01       	movw	r30, r12
    2370:	20 81       	ld	r18, Z
    2372:	22 23       	and	r18, r18
    2374:	39 f0       	breq	.+14     	; 0x2384 <effect_path_text+0xf8>
    2376:	80 91 b3 01 	lds	r24, 0x01B3
    237a:	90 91 b4 01 	lds	r25, 0x01B4
    237e:	89 2b       	or	r24, r25
    2380:	09 f4       	brne	.+2      	; 0x2384 <effect_path_text+0xf8>
    2382:	b1 cf       	rjmp	.-158    	; 0x22e6 <effect_path_text+0x5a>
    2384:	00 e0       	ldi	r16, 0x00	; 0
    2386:	10 e0       	ldi	r17, 0x00	; 0
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
	for (i=0;i<28;i++)
	{
		effect_pathmove(path, 28);
    2388:	56 e0       	ldi	r21, 0x06	; 6
    238a:	e5 2e       	mov	r14, r21
    238c:	f1 2c       	mov	r15, r1
    238e:	ec 0e       	add	r14, r28
    2390:	fd 1e       	adc	r15, r29
    2392:	c7 01       	movw	r24, r14
    2394:	6c e1       	ldi	r22, 0x1C	; 28
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <effect_pathmove>
		delay_ms(delay);
    239c:	c3 01       	movw	r24, r6
    239e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		}
	
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
	for (i=0;i<28;i++)
    23a2:	0f 5f       	subi	r16, 0xFF	; 255
    23a4:	1f 4f       	sbci	r17, 0xFF	; 255
    23a6:	0c 31       	cpi	r16, 0x1C	; 28
    23a8:	11 05       	cpc	r17, r1
    23aa:	99 f7       	brne	.-26     	; 0x2392 <effect_path_text+0x106>
	{
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
}
    23ac:	a1 96       	adiw	r28, 0x21	; 33
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	ff 90       	pop	r15
    23c2:	ef 90       	pop	r14
    23c4:	df 90       	pop	r13
    23c6:	cf 90       	pop	r12
    23c8:	bf 90       	pop	r11
    23ca:	af 90       	pop	r10
    23cc:	9f 90       	pop	r9
    23ce:	8f 90       	pop	r8
    23d0:	7f 90       	pop	r7
    23d2:	6f 90       	pop	r6
    23d4:	5f 90       	pop	r5
    23d6:	4f 90       	pop	r4
    23d8:	3f 90       	pop	r3
    23da:	2f 90       	pop	r2
    23dc:	08 95       	ret

000023de <effect_pathspiral>:
	
	}
}

void effect_pathspiral (int iterations, int delay)
{
    23de:	9f 92       	push	r9
    23e0:	af 92       	push	r10
    23e2:	bf 92       	push	r11
    23e4:	cf 92       	push	r12
    23e6:	df 92       	push	r13
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	60 97       	sbiw	r28, 0x10	; 16
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	5c 01       	movw	r10, r24
    2406:	6b 01       	movw	r12, r22
	int z, i;
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	8e 01       	movw	r16, r28
    240c:	0f 5f       	subi	r16, 0xFF	; 255
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	b8 01       	movw	r22, r16
    2412:	40 e1       	ldi	r20, 0x10	; 16
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	0e 94 fe 30 	call	0x61fc	; 0x61fc <font_getpath>
    241a:	ee 24       	eor	r14, r14
    241c:	ff 24       	eor	r15, r15
	
	for (i = 0; i < iterations; i++)
	{
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
    241e:	90 2e       	mov	r9, r16
    2420:	01 2f       	mov	r16, r17
    2422:	15 c0       	rjmp	.+42     	; 0x244e <effect_pathspiral+0x70>
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++)
	{
		setvoxel(4,0,i%8);
    2424:	a7 01       	movw	r20, r14
    2426:	47 70       	andi	r20, 0x07	; 7
    2428:	50 70       	andi	r21, 0x00	; 0
    242a:	84 e0       	ldi	r24, 0x04	; 4
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		delay_ms(delay);
    2436:	c6 01       	movw	r24, r12
    2438:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		effect_pathmove(path, 28);
    243c:	89 2d       	mov	r24, r9
    243e:	90 2f       	mov	r25, r16
    2440:	6c e1       	ldi	r22, 0x1C	; 28
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <effect_pathmove>
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++)
    2448:	08 94       	sec
    244a:	e1 1c       	adc	r14, r1
    244c:	f1 1c       	adc	r15, r1
    244e:	ea 14       	cp	r14, r10
    2450:	fb 04       	cpc	r15, r11
    2452:	44 f3       	brlt	.-48     	; 0x2424 <effect_pathspiral+0x46>
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
		
	}
}
    2454:	60 96       	adiw	r28, 0x10	; 16
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	ff 90       	pop	r15
    246a:	ef 90       	pop	r14
    246c:	df 90       	pop	r13
    246e:	cf 90       	pop	r12
    2470:	bf 90       	pop	r11
    2472:	af 90       	pop	r10
    2474:	9f 90       	pop	r9
    2476:	08 95       	ret

00002478 <effect_rand_patharound>:
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
 if (xit == 1) {i = 0;break;}
}
}
void effect_rand_patharound (int iterations, int delay)
{
    2478:	7f 92       	push	r7
    247a:	8f 92       	push	r8
    247c:	9f 92       	push	r9
    247e:	af 92       	push	r10
    2480:	bf 92       	push	r11
    2482:	cf 92       	push	r12
    2484:	df 92       	push	r13
    2486:	ef 92       	push	r14
    2488:	ff 92       	push	r15
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	6c 97       	sbiw	r28, 0x1c	; 28
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	4c 01       	movw	r8, r24
    24a4:	5b 01       	movw	r10, r22
	int z, dz, i;
	z = 4;
	unsigned char path[28];
	
	font_getpath(0,path,28);
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	8e 01       	movw	r16, r28
    24aa:	0f 5f       	subi	r16, 0xFF	; 255
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
    24ae:	b8 01       	movw	r22, r16
    24b0:	4c e1       	ldi	r20, 0x1C	; 28
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	0e 94 fe 30 	call	0x61fc	; 0x61fc <font_getpath>
    24b8:	e4 e0       	ldi	r30, 0x04	; 4
    24ba:	ee 2e       	mov	r14, r30
    24bc:	f1 2c       	mov	r15, r1
    24be:	cc 24       	eor	r12, r12
    24c0:	dd 24       	eor	r13, r13
			z = 7;
			
		if (z<0)
			z = 0;
		
		effect_pathmove(path, 28);
    24c2:	70 2e       	mov	r7, r16
    24c4:	01 2f       	mov	r16, r17
    24c6:	30 c0       	rjmp	.+96     	; 0x2528 <effect_rand_patharound+0xb0>
	
	font_getpath(0,path,28);
	
	for (i = 0; i < iterations; i++)
	{
if (xit == 1) {i = iterations;break;}
    24c8:	80 91 b3 01 	lds	r24, 0x01B3
    24cc:	90 91 b4 01 	lds	r25, 0x01B4
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	69 f1       	breq	.+90     	; 0x252e <effect_rand_patharound+0xb6>
		dz = ((rand()%3)-1);
    24d4:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    24d8:	08 94       	sec
    24da:	e1 08       	sbc	r14, r1
    24dc:	f1 08       	sbc	r15, r1
		z += dz;
    24de:	63 e0       	ldi	r22, 0x03	; 3
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    24e6:	e8 0e       	add	r14, r24
    24e8:	f9 1e       	adc	r15, r25
		
		if (z>7)
    24ea:	88 e0       	ldi	r24, 0x08	; 8
    24ec:	e8 16       	cp	r14, r24
    24ee:	f1 04       	cpc	r15, r1
    24f0:	24 f0       	brlt	.+8      	; 0x24fa <effect_rand_patharound+0x82>
    24f2:	77 e0       	ldi	r23, 0x07	; 7
    24f4:	e7 2e       	mov	r14, r23
    24f6:	f1 2c       	mov	r15, r1
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <effect_rand_patharound+0x8a>
			z = 7;
			
		if (z<0)
    24fa:	f7 fe       	sbrs	r15, 7
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <effect_rand_patharound+0x8a>
    24fe:	ee 24       	eor	r14, r14
    2500:	ff 24       	eor	r15, r15
			z = 0;
		
		effect_pathmove(path, 28);
    2502:	87 2d       	mov	r24, r7
    2504:	90 2f       	mov	r25, r16
    2506:	6c e1       	ldi	r22, 0x1C	; 28
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <effect_pathmove>
		setvoxel(0,7,z);
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	67 e0       	ldi	r22, 0x07	; 7
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	a7 01       	movw	r20, r14
    2518:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		delay_ms(delay);
    251c:	c5 01       	movw	r24, r10
    251e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	z = 4;
	unsigned char path[28];
	
	font_getpath(0,path,28);
	
	for (i = 0; i < iterations; i++)
    2522:	08 94       	sec
    2524:	c1 1c       	adc	r12, r1
    2526:	d1 1c       	adc	r13, r1
    2528:	c8 14       	cp	r12, r8
    252a:	d9 04       	cpc	r13, r9
    252c:	6c f2       	brlt	.-102    	; 0x24c8 <effect_rand_patharound+0x50>
		effect_pathmove(path, 28);
		setvoxel(0,7,z);
		delay_ms(delay);
	
	}
}
    252e:	6c 96       	adiw	r28, 0x1c	; 28
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	cf 90       	pop	r12
    254a:	bf 90       	pop	r11
    254c:	af 90       	pop	r10
    254e:	9f 90       	pop	r9
    2550:	8f 90       	pop	r8
    2552:	7f 90       	pop	r7
    2554:	08 95       	ret

00002556 <effect_smileyspin>:
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
{
    2556:	2f 92       	push	r2
    2558:	3f 92       	push	r3
    255a:	4f 92       	push	r4
    255c:	5f 92       	push	r5
    255e:	6f 92       	push	r6
    2560:	7f 92       	push	r7
    2562:	8f 92       	push	r8
    2564:	9f 92       	push	r9
    2566:	af 92       	push	r10
    2568:	bf 92       	push	r11
    256a:	cf 92       	push	r12
    256c:	df 92       	push	r13
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	0f 93       	push	r16
    2574:	1f 93       	push	r17
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	ec 97       	sbiw	r28, 0x3c	; 60
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	9b a7       	std	Y+43, r25	; 0x2b
    258c:	8a a7       	std	Y+42, r24	; 0x2a
    258e:	6d a7       	std	Y+45, r22	; 0x2d
    2590:	7e a7       	std	Y+46, r23	; 0x2e
    2592:	4c a7       	std	Y+44, r20	; 0x2c
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
    2594:	de 01       	movw	r26, r28
    2596:	11 96       	adiw	r26, 0x01	; 1
    2598:	e3 e8       	ldi	r30, 0x83	; 131
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 e2       	ldi	r24, 0x20	; 32
    259e:	01 90       	ld	r0, Z+
    25a0:	0d 92       	st	X+, r0
    25a2:	81 50       	subi	r24, 0x01	; 1
    25a4:	e1 f7       	brne	.-8      	; 0x259e <effect_smileyspin+0x48>
    25a6:	19 a6       	std	Y+41, r1	; 0x29
    25a8:	18 a6       	std	Y+40, r1	; 0x28
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    25aa:	9e 01       	movw	r18, r28
    25ac:	2f 5f       	subi	r18, 0xFF	; 255
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	3c af       	std	Y+60, r19	; 0x3c
    25b2:	2b af       	std	Y+59, r18	; 0x3b
    25b4:	20 c2       	rjmp	.+1088   	; 0x29f6 <effect_smileyspin+0x4a0>
{
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    25b6:	22 24       	eor	r2, r2
    25b8:	33 24       	eor	r3, r3
    25ba:	88 24       	eor	r8, r8
    25bc:	99 24       	eor	r9, r9
    25be:	44 24       	eor	r4, r4
    25c0:	55 24       	eor	r5, r5
    25c2:	c4 01       	movw	r24, r8
    25c4:	01 96       	adiw	r24, 0x01	; 1
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
    25c6:	21 14       	cp	r2, r1
    25c8:	31 04       	cpc	r3, r1
    25ca:	51 f4       	brne	.+20     	; 0x25e0 <effect_smileyspin+0x8a>
				off++;
    25cc:	4c 01       	movw	r8, r24
				if (off == 4){
    25ce:	84 30       	cpi	r24, 0x04	; 4
    25d0:	91 05       	cpc	r25, r1
    25d2:	39 f4       	brne	.+14     	; 0x25e2 <effect_smileyspin+0x8c>
    25d4:	f1 e0       	ldi	r31, 0x01	; 1
    25d6:	2f 2e       	mov	r2, r31
    25d8:	31 2c       	mov	r3, r1
    25da:	88 24       	eor	r8, r8
    25dc:	99 24       	eor	r9, r9
    25de:	01 c0       	rjmp	.+2      	; 0x25e2 <effect_smileyspin+0x8c>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    25e0:	4c 01       	movw	r8, r24
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    25e2:	c4 01       	movw	r24, r8
    25e4:	e3 e0       	ldi	r30, 0x03	; 3
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	ea 95       	dec	r30
    25ec:	e1 f7       	brne	.-8      	; 0x25e6 <effect_smileyspin+0x90>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    25ee:	6b ac       	ldd	r6, Y+59	; 0x3b
    25f0:	7c ac       	ldd	r7, Y+60	; 0x3c
    25f2:	68 1a       	sub	r6, r24
    25f4:	79 0a       	sbc	r7, r25
    25f6:	00 e0       	ldi	r16, 0x00	; 0
    25f8:	10 e0       	ldi	r17, 0x00	; 0
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    25fa:	ef e1       	ldi	r30, 0x1F	; 31
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	6e 0e       	add	r6, r30
    2600:	7f 1e       	adc	r7, r31
    2602:	21 e0       	ldi	r18, 0x01	; 1
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	2c 0f       	add	r18, r28
    2608:	3d 1f       	adc	r19, r29
    260a:	28 0f       	add	r18, r24
    260c:	39 1f       	adc	r19, r25
    260e:	3a af       	std	Y+58, r19	; 0x3a
    2610:	29 af       	std	Y+57, r18	; 0x39
    2612:	35 c0       	rjmp	.+106    	; 0x267e <effect_smileyspin+0x128>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;break;}
    2614:	80 91 b3 01 	lds	r24, 0x01B3
    2618:	90 91 b4 01 	lds	r25, 0x01B4
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	51 f4       	brne	.+20     	; 0x2634 <effect_smileyspin+0xde>
    2620:	8a a5       	ldd	r24, Y+42	; 0x2a
    2622:	9b a5       	ldd	r25, Y+43	; 0x2b
    2624:	99 a7       	std	Y+41, r25	; 0x29
    2626:	88 a7       	std	Y+40, r24	; 0x28
    2628:	08 e0       	ldi	r16, 0x08	; 8
    262a:	10 e0       	ldi	r17, 0x00	; 0
    262c:	77 e0       	ldi	r23, 0x07	; 7
    262e:	47 2e       	mov	r4, r23
    2630:	51 2c       	mov	r5, r1
    2632:	20 c0       	rjmp	.+64     	; 0x2674 <effect_smileyspin+0x11e>
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    2634:	8c a5       	ldd	r24, Y+44	; 0x2c
    2636:	68 ad       	ldd	r22, Y+56	; 0x38
    2638:	4e 2d       	mov	r20, r14
    263a:	0e 94 18 31 	call	0x6230	; 0x6230 <font_getbitmappixel>
    263e:	88 23       	and	r24, r24
    2640:	61 f0       	breq	.+24     	; 0x265a <effect_smileyspin+0x104>
						if (!flip)
    2642:	21 14       	cp	r2, r1
    2644:	31 04       	cpc	r3, r1
    2646:	11 f4       	brne	.+4      	; 0x264c <effect_smileyspin+0xf6>
							setvoxel(y,dybde[8 * off + d++],x);
    2648:	f6 01       	movw	r30, r12
    264a:	01 c0       	rjmp	.+2      	; 0x264e <effect_smileyspin+0xf8>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    264c:	f5 01       	movw	r30, r10
    264e:	60 81       	ld	r22, Z
    2650:	c7 01       	movw	r24, r14
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	a8 01       	movw	r20, r16
    2656:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    265a:	08 94       	sec
    265c:	e1 1c       	adc	r14, r1
    265e:	f1 1c       	adc	r15, r1
    2660:	08 94       	sec
    2662:	a1 08       	sbc	r10, r1
    2664:	b1 08       	sbc	r11, r1
    2666:	08 94       	sec
    2668:	c1 1c       	adc	r12, r1
    266a:	d1 1c       	adc	r13, r1
    266c:	f8 e0       	ldi	r31, 0x08	; 8
    266e:	ef 16       	cp	r14, r31
    2670:	f1 04       	cpc	r15, r1
    2672:	81 f6       	brne	.-96     	; 0x2614 <effect_smileyspin+0xbe>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2674:	0f 5f       	subi	r16, 0xFF	; 255
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	08 30       	cpi	r16, 0x08	; 8
    267a:	11 05       	cpc	r17, r1
    267c:	4c f4       	brge	.+18     	; 0x2690 <effect_smileyspin+0x13a>
    267e:	53 01       	movw	r10, r6
    2680:	c9 ac       	ldd	r12, Y+57	; 0x39
    2682:	da ac       	ldd	r13, Y+58	; 0x3a
    2684:	ee 24       	eor	r14, r14
    2686:	ff 24       	eor	r15, r15
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    2688:	27 e0       	ldi	r18, 0x07	; 7
    268a:	20 1b       	sub	r18, r16
    268c:	28 af       	std	Y+56, r18	; 0x38
    268e:	c2 cf       	rjmp	.-124    	; 0x2614 <effect_smileyspin+0xbe>
					} else {
						d++;
					}
				}
			}
if (xit == 1) {i=count;s=7;x=8;break;}
    2690:	80 91 b3 01 	lds	r24, 0x01B3
    2694:	90 91 b4 01 	lds	r25, 0x01B4
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	29 f4       	brne	.+10     	; 0x26a6 <effect_smileyspin+0x150>
    269c:	8a a5       	ldd	r24, Y+42	; 0x2a
    269e:	9b a5       	ldd	r25, Y+43	; 0x2b
    26a0:	99 a7       	std	Y+41, r25	; 0x29
    26a2:	88 a7       	std	Y+40, r24	; 0x28
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <effect_smileyspin+0x16e>
			delay_ms(delay);
    26a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    26a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    26aa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			fill(0x00);
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
	{
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
    26b4:	08 94       	sec
    26b6:	41 1c       	adc	r4, r1
    26b8:	51 1c       	adc	r5, r1
    26ba:	97 e0       	ldi	r25, 0x07	; 7
    26bc:	49 16       	cp	r4, r25
    26be:	51 04       	cpc	r5, r1
    26c0:	0c f4       	brge	.+2      	; 0x26c4 <effect_smileyspin+0x16e>
    26c2:	7f cf       	rjmp	.-258    	; 0x25c2 <effect_smileyspin+0x6c>
    26c4:	1e a2       	std	Y+38, r1	; 0x26
    26c6:	1d a2       	std	Y+37, r1	; 0x25
    26c8:	66 24       	eor	r6, r6
    26ca:	77 24       	eor	r7, r7
    26cc:	22 24       	eor	r2, r2
    26ce:	33 24       	eor	r3, r3
    26d0:	c3 01       	movw	r24, r6
    26d2:	01 96       	adiw	r24, 0x01	; 1
		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    26d4:	ed a1       	ldd	r30, Y+37	; 0x25
    26d6:	fe a1       	ldd	r31, Y+38	; 0x26
    26d8:	ef 2b       	or	r30, r31
    26da:	59 f4       	brne	.+22     	; 0x26f2 <effect_smileyspin+0x19c>
				off++;
    26dc:	3c 01       	movw	r6, r24
				if (off == 4){
    26de:	84 30       	cpi	r24, 0x04	; 4
    26e0:	91 05       	cpc	r25, r1
    26e2:	41 f4       	brne	.+16     	; 0x26f4 <effect_smileyspin+0x19e>
    26e4:	21 e0       	ldi	r18, 0x01	; 1
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	3e a3       	std	Y+38, r19	; 0x26
    26ea:	2d a3       	std	Y+37, r18	; 0x25
    26ec:	66 24       	eor	r6, r6
    26ee:	77 24       	eor	r7, r7
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <effect_smileyspin+0x19e>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    26f2:	3c 01       	movw	r6, r24
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    26f4:	c3 01       	movw	r24, r6
    26f6:	63 e0       	ldi	r22, 0x03	; 3
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	6a 95       	dec	r22
    26fe:	e1 f7       	brne	.-8      	; 0x26f8 <effect_smileyspin+0x1a2>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2700:	4b ac       	ldd	r4, Y+59	; 0x3b
    2702:	5c ac       	ldd	r5, Y+60	; 0x3c
    2704:	48 1a       	sub	r4, r24
    2706:	59 0a       	sbc	r5, r25
    2708:	00 e0       	ldi	r16, 0x00	; 0
    270a:	10 e0       	ldi	r17, 0x00	; 0
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    270c:	ef e1       	ldi	r30, 0x1F	; 31
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	4e 0e       	add	r4, r30
    2712:	5f 1e       	adc	r5, r31
    2714:	21 e0       	ldi	r18, 0x01	; 1
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	2c 0f       	add	r18, r28
    271a:	3d 1f       	adc	r19, r29
    271c:	28 0f       	add	r18, r24
    271e:	39 1f       	adc	r19, r25
    2720:	3f ab       	std	Y+55, r19	; 0x37
    2722:	2e ab       	std	Y+54, r18	; 0x36
    2724:	3a c0       	rjmp	.+116    	; 0x279a <effect_smileyspin+0x244>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
    2726:	80 91 b3 01 	lds	r24, 0x01B3
    272a:	90 91 b4 01 	lds	r25, 0x01B4
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	51 f4       	brne	.+20     	; 0x2746 <effect_smileyspin+0x1f0>
    2732:	8a a5       	ldd	r24, Y+42	; 0x2a
    2734:	9b a5       	ldd	r25, Y+43	; 0x2b
    2736:	99 a7       	std	Y+41, r25	; 0x29
    2738:	88 a7       	std	Y+40, r24	; 0x28
    273a:	08 e0       	ldi	r16, 0x08	; 8
    273c:	10 e0       	ldi	r17, 0x00	; 0
    273e:	57 e0       	ldi	r21, 0x07	; 7
    2740:	25 2e       	mov	r2, r21
    2742:	31 2c       	mov	r3, r1
    2744:	25 c0       	rjmp	.+74     	; 0x2790 <effect_smileyspin+0x23a>
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    2746:	4c 2d       	mov	r20, r12
    2748:	41 50       	subi	r20, 0x01	; 1
    274a:	8c a5       	ldd	r24, Y+44	; 0x2c
    274c:	6d a9       	ldd	r22, Y+53	; 0x35
    274e:	0e 94 18 31 	call	0x6230	; 0x6230 <font_getbitmappixel>
    2752:	88 23       	and	r24, r24
    2754:	69 f0       	breq	.+26     	; 0x2770 <effect_smileyspin+0x21a>
						if (!flip)
    2756:	ed a1       	ldd	r30, Y+37	; 0x25
    2758:	fe a1       	ldd	r31, Y+38	; 0x26
    275a:	ef 2b       	or	r30, r31
    275c:	11 f4       	brne	.+4      	; 0x2762 <effect_smileyspin+0x20c>
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    275e:	f5 01       	movw	r30, r10
    2760:	01 c0       	rjmp	.+2      	; 0x2764 <effect_smileyspin+0x20e>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2762:	f4 01       	movw	r30, r8
    2764:	80 81       	ld	r24, Z
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	b7 01       	movw	r22, r14
    276a:	a8 01       	movw	r20, r16
    276c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    2770:	08 94       	sec
    2772:	c1 1c       	adc	r12, r1
    2774:	d1 1c       	adc	r13, r1
    2776:	08 94       	sec
    2778:	e1 08       	sbc	r14, r1
    277a:	f1 08       	sbc	r15, r1
    277c:	08 94       	sec
    277e:	81 08       	sbc	r8, r1
    2780:	91 08       	sbc	r9, r1
    2782:	08 94       	sec
    2784:	a1 1c       	adc	r10, r1
    2786:	b1 1c       	adc	r11, r1
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    2788:	f9 e0       	ldi	r31, 0x09	; 9
    278a:	cf 16       	cp	r12, r31
    278c:	d1 04       	cpc	r13, r1
    278e:	59 f6       	brne	.-106    	; 0x2726 <effect_smileyspin+0x1d0>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2790:	0f 5f       	subi	r16, 0xFF	; 255
    2792:	1f 4f       	sbci	r17, 0xFF	; 255
    2794:	08 30       	cpi	r16, 0x08	; 8
    2796:	11 05       	cpc	r17, r1
    2798:	6c f4       	brge	.+26     	; 0x27b4 <effect_smileyspin+0x25e>
    279a:	42 01       	movw	r8, r4
    279c:	ae a8       	ldd	r10, Y+54	; 0x36
    279e:	bf a8       	ldd	r11, Y+55	; 0x37
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	c4 2e       	mov	r12, r20
    27a4:	d1 2c       	mov	r13, r1
    27a6:	37 e0       	ldi	r19, 0x07	; 7
    27a8:	e3 2e       	mov	r14, r19
    27aa:	f1 2c       	mov	r15, r1
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    27ac:	27 e0       	ldi	r18, 0x07	; 7
    27ae:	20 1b       	sub	r18, r16
    27b0:	2d ab       	std	Y+53, r18	; 0x35
    27b2:	b9 cf       	rjmp	.-142    	; 0x2726 <effect_smileyspin+0x1d0>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    27b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    27b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    27b8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			fill(0x00);
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>

		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    27c2:	08 94       	sec
    27c4:	21 1c       	adc	r2, r1
    27c6:	31 1c       	adc	r3, r1
    27c8:	37 e0       	ldi	r19, 0x07	; 7
    27ca:	23 16       	cp	r2, r19
    27cc:	31 04       	cpc	r3, r1
    27ce:	0c f4       	brge	.+2      	; 0x27d2 <effect_smileyspin+0x27c>
    27d0:	7f cf       	rjmp	.-258    	; 0x26d0 <effect_smileyspin+0x17a>
    27d2:	1c a2       	std	Y+36, r1	; 0x24
    27d4:	1b a2       	std	Y+35, r1	; 0x23
    27d6:	88 24       	eor	r8, r8
    27d8:	99 24       	eor	r9, r9
    27da:	22 24       	eor	r2, r2
    27dc:	33 24       	eor	r3, r3
    27de:	c4 01       	movw	r24, r8
    27e0:	01 96       	adiw	r24, 0x01	; 1
		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
    27e2:	eb a1       	ldd	r30, Y+35	; 0x23
    27e4:	fc a1       	ldd	r31, Y+36	; 0x24
    27e6:	ef 2b       	or	r30, r31
    27e8:	59 f4       	brne	.+22     	; 0x2800 <effect_smileyspin+0x2aa>
				off++;
    27ea:	4c 01       	movw	r8, r24
				if (off == 4){
    27ec:	84 30       	cpi	r24, 0x04	; 4
    27ee:	91 05       	cpc	r25, r1
    27f0:	41 f4       	brne	.+16     	; 0x2802 <effect_smileyspin+0x2ac>
    27f2:	21 e0       	ldi	r18, 0x01	; 1
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	3c a3       	std	Y+36, r19	; 0x24
    27f8:	2b a3       	std	Y+35, r18	; 0x23
    27fa:	88 24       	eor	r8, r8
    27fc:	99 24       	eor	r9, r9
    27fe:	01 c0       	rjmp	.+2      	; 0x2802 <effect_smileyspin+0x2ac>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    2800:	4c 01       	movw	r8, r24
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    2802:	c4 01       	movw	r24, r8
    2804:	23 e0       	ldi	r18, 0x03	; 3
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	2a 95       	dec	r18
    280c:	e1 f7       	brne	.-8      	; 0x2806 <effect_smileyspin+0x2b0>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    280e:	4b ac       	ldd	r4, Y+59	; 0x3b
    2810:	5c ac       	ldd	r5, Y+60	; 0x3c
    2812:	48 1a       	sub	r4, r24
    2814:	59 0a       	sbc	r5, r25
    2816:	00 e0       	ldi	r16, 0x00	; 0
    2818:	10 e0       	ldi	r17, 0x00	; 0
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    281a:	ef e1       	ldi	r30, 0x1F	; 31
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	4e 0e       	add	r4, r30
    2820:	5f 1e       	adc	r5, r31
    2822:	21 e0       	ldi	r18, 0x01	; 1
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	2c 0f       	add	r18, r28
    2828:	3d 1f       	adc	r19, r29
    282a:	28 0f       	add	r18, r24
    282c:	39 1f       	adc	r19, r25
    282e:	3c ab       	std	Y+52, r19	; 0x34
    2830:	2b ab       	std	Y+51, r18	; 0x33
    2832:	3b c0       	rjmp	.+118    	; 0x28aa <effect_smileyspin+0x354>
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    2834:	37 01       	movw	r6, r14
    2836:	08 94       	sec
    2838:	61 08       	sbc	r6, r1
    283a:	71 08       	sbc	r7, r1
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
    283c:	80 91 b3 01 	lds	r24, 0x01B3
    2840:	90 91 b4 01 	lds	r25, 0x01B4
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	51 f4       	brne	.+20     	; 0x285c <effect_smileyspin+0x306>
    2848:	8a a5       	ldd	r24, Y+42	; 0x2a
    284a:	9b a5       	ldd	r25, Y+43	; 0x2b
    284c:	99 a7       	std	Y+41, r25	; 0x29
    284e:	88 a7       	std	Y+40, r24	; 0x28
    2850:	08 e0       	ldi	r16, 0x08	; 8
    2852:	10 e0       	ldi	r17, 0x00	; 0
    2854:	97 e0       	ldi	r25, 0x07	; 7
    2856:	29 2e       	mov	r2, r25
    2858:	31 2c       	mov	r3, r1
    285a:	22 c0       	rjmp	.+68     	; 0x28a0 <effect_smileyspin+0x34a>
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    285c:	8c a5       	ldd	r24, Y+44	; 0x2c
    285e:	6a a9       	ldd	r22, Y+50	; 0x32
    2860:	4f a1       	ldd	r20, Y+39	; 0x27
    2862:	0e 94 18 31 	call	0x6230	; 0x6230 <font_getbitmappixel>
    2866:	88 23       	and	r24, r24
    2868:	69 f0       	breq	.+26     	; 0x2884 <effect_smileyspin+0x32e>
						if (!flip)
    286a:	eb a1       	ldd	r30, Y+35	; 0x23
    286c:	fc a1       	ldd	r31, Y+36	; 0x24
    286e:	ef 2b       	or	r30, r31
    2870:	11 f4       	brne	.+4      	; 0x2876 <effect_smileyspin+0x320>
							setvoxel(y,dybde[8 * off + d++],x);
    2872:	f6 01       	movw	r30, r12
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <effect_smileyspin+0x322>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    2876:	f5 01       	movw	r30, r10
    2878:	60 81       	ld	r22, Z
    287a:	c3 01       	movw	r24, r6
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	a8 01       	movw	r20, r16
    2880:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    2884:	08 94       	sec
    2886:	e1 1c       	adc	r14, r1
    2888:	f1 1c       	adc	r15, r1
    288a:	08 94       	sec
    288c:	a1 08       	sbc	r10, r1
    288e:	b1 08       	sbc	r11, r1
    2890:	08 94       	sec
    2892:	c1 1c       	adc	r12, r1
    2894:	d1 1c       	adc	r13, r1
    2896:	ff a1       	ldd	r31, Y+39	; 0x27
    2898:	f1 50       	subi	r31, 0x01	; 1
    289a:	ff a3       	std	Y+39, r31	; 0x27
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    289c:	ff 3f       	cpi	r31, 0xFF	; 255
    289e:	51 f6       	brne	.-108    	; 0x2834 <effect_smileyspin+0x2de>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    28a0:	0f 5f       	subi	r16, 0xFF	; 255
    28a2:	1f 4f       	sbci	r17, 0xFF	; 255
    28a4:	08 30       	cpi	r16, 0x08	; 8
    28a6:	11 05       	cpc	r17, r1
    28a8:	64 f4       	brge	.+24     	; 0x28c2 <effect_smileyspin+0x36c>
    28aa:	52 01       	movw	r10, r4
    28ac:	cb a8       	ldd	r12, Y+51	; 0x33
    28ae:	dc a8       	ldd	r13, Y+52	; 0x34
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	e8 2e       	mov	r14, r24
    28b4:	f1 2c       	mov	r15, r1
    28b6:	27 e0       	ldi	r18, 0x07	; 7
    28b8:	2f a3       	std	Y+39, r18	; 0x27
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    28ba:	37 e0       	ldi	r19, 0x07	; 7
    28bc:	30 1b       	sub	r19, r16
    28be:	3a ab       	std	Y+50, r19	; 0x32
    28c0:	b9 cf       	rjmp	.-142    	; 0x2834 <effect_smileyspin+0x2de>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    28c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    28c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    28c6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			fill(0x00);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>

		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
    28d0:	08 94       	sec
    28d2:	21 1c       	adc	r2, r1
    28d4:	31 1c       	adc	r3, r1
    28d6:	87 e0       	ldi	r24, 0x07	; 7
    28d8:	28 16       	cp	r2, r24
    28da:	31 04       	cpc	r3, r1
    28dc:	0c f4       	brge	.+2      	; 0x28e0 <effect_smileyspin+0x38a>
    28de:	7f cf       	rjmp	.-258    	; 0x27de <effect_smileyspin+0x288>
    28e0:	22 24       	eor	r2, r2
    28e2:	33 24       	eor	r3, r3
    28e4:	1a a2       	std	Y+34, r1	; 0x22
    28e6:	19 a2       	std	Y+33, r1	; 0x21
    28e8:	66 24       	eor	r6, r6
    28ea:	77 24       	eor	r7, r7
    28ec:	c3 01       	movw	r24, r6
    28ee:	01 96       	adiw	r24, 0x01	; 1
		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    28f0:	e9 a1       	ldd	r30, Y+33	; 0x21
    28f2:	fa a1       	ldd	r31, Y+34	; 0x22
    28f4:	ef 2b       	or	r30, r31
    28f6:	59 f4       	brne	.+22     	; 0x290e <effect_smileyspin+0x3b8>
				off++;
    28f8:	3c 01       	movw	r6, r24
				if (off == 4){
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	91 05       	cpc	r25, r1
    28fe:	41 f4       	brne	.+16     	; 0x2910 <effect_smileyspin+0x3ba>
    2900:	21 e0       	ldi	r18, 0x01	; 1
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	3a a3       	std	Y+34, r19	; 0x22
    2906:	29 a3       	std	Y+33, r18	; 0x21
    2908:	66 24       	eor	r6, r6
    290a:	77 24       	eor	r7, r7
    290c:	01 c0       	rjmp	.+2      	; 0x2910 <effect_smileyspin+0x3ba>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    290e:	3c 01       	movw	r6, r24
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2910:	c3 01       	movw	r24, r6
    2912:	13 e0       	ldi	r17, 0x03	; 3
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	1a 95       	dec	r17
    291a:	e1 f7       	brne	.-8      	; 0x2914 <effect_smileyspin+0x3be>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    291c:	4b ac       	ldd	r4, Y+59	; 0x3b
    291e:	5c ac       	ldd	r5, Y+60	; 0x3c
    2920:	48 1a       	sub	r4, r24
    2922:	59 0a       	sbc	r5, r25
    2924:	00 e0       	ldi	r16, 0x00	; 0
    2926:	10 e0       	ldi	r17, 0x00	; 0
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2928:	ef e1       	ldi	r30, 0x1F	; 31
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	4e 0e       	add	r4, r30
    292e:	5f 1e       	adc	r5, r31
    2930:	21 e0       	ldi	r18, 0x01	; 1
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	2c 0f       	add	r18, r28
    2936:	3d 1f       	adc	r19, r29
    2938:	28 0f       	add	r18, r24
    293a:	39 1f       	adc	r19, r25
    293c:	39 ab       	std	Y+49, r19	; 0x31
    293e:	28 ab       	std	Y+48, r18	; 0x30
    2940:	39 c0       	rjmp	.+114    	; 0x29b4 <effect_smileyspin+0x45e>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
    2942:	80 91 b3 01 	lds	r24, 0x01B3
    2946:	90 91 b4 01 	lds	r25, 0x01B4
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	51 f4       	brne	.+20     	; 0x2962 <effect_smileyspin+0x40c>
    294e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2950:	9b a5       	ldd	r25, Y+43	; 0x2b
    2952:	99 a7       	std	Y+41, r25	; 0x29
    2954:	88 a7       	std	Y+40, r24	; 0x28
    2956:	b7 e0       	ldi	r27, 0x07	; 7
    2958:	2b 2e       	mov	r2, r27
    295a:	31 2c       	mov	r3, r1
    295c:	08 e0       	ldi	r16, 0x08	; 8
    295e:	10 e0       	ldi	r17, 0x00	; 0
    2960:	24 c0       	rjmp	.+72     	; 0x29aa <effect_smileyspin+0x454>
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    2962:	8c a5       	ldd	r24, Y+44	; 0x2c
    2964:	6f a5       	ldd	r22, Y+47	; 0x2f
    2966:	4e 2d       	mov	r20, r14
    2968:	0e 94 18 31 	call	0x6230	; 0x6230 <font_getbitmappixel>
    296c:	88 23       	and	r24, r24
    296e:	69 f0       	breq	.+26     	; 0x298a <effect_smileyspin+0x434>
						if (!flip)
    2970:	e9 a1       	ldd	r30, Y+33	; 0x21
    2972:	fa a1       	ldd	r31, Y+34	; 0x22
    2974:	ef 2b       	or	r30, r31
    2976:	11 f4       	brne	.+4      	; 0x297c <effect_smileyspin+0x426>
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2978:	f5 01       	movw	r30, r10
    297a:	01 c0       	rjmp	.+2      	; 0x297e <effect_smileyspin+0x428>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    297c:	f4 01       	movw	r30, r8
    297e:	80 81       	ld	r24, Z
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	b7 01       	movw	r22, r14
    2984:	a8 01       	movw	r20, r16
    2986:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    298a:	08 94       	sec
    298c:	c1 1c       	adc	r12, r1
    298e:	d1 1c       	adc	r13, r1
    2990:	08 94       	sec
    2992:	e1 08       	sbc	r14, r1
    2994:	f1 08       	sbc	r15, r1
    2996:	08 94       	sec
    2998:	81 08       	sbc	r8, r1
    299a:	91 08       	sbc	r9, r1
    299c:	08 94       	sec
    299e:	a1 1c       	adc	r10, r1
    29a0:	b1 1c       	adc	r11, r1
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    29a2:	f9 e0       	ldi	r31, 0x09	; 9
    29a4:	cf 16       	cp	r12, r31
    29a6:	d1 04       	cpc	r13, r1
    29a8:	61 f6       	brne	.-104    	; 0x2942 <effect_smileyspin+0x3ec>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    29aa:	0f 5f       	subi	r16, 0xFF	; 255
    29ac:	1f 4f       	sbci	r17, 0xFF	; 255
    29ae:	08 30       	cpi	r16, 0x08	; 8
    29b0:	11 05       	cpc	r17, r1
    29b2:	6c f4       	brge	.+26     	; 0x29ce <effect_smileyspin+0x478>
    29b4:	42 01       	movw	r8, r4
    29b6:	a8 a8       	ldd	r10, Y+48	; 0x30
    29b8:	b9 a8       	ldd	r11, Y+49	; 0x31
    29ba:	a1 e0       	ldi	r26, 0x01	; 1
    29bc:	ca 2e       	mov	r12, r26
    29be:	d1 2c       	mov	r13, r1
    29c0:	f7 e0       	ldi	r31, 0x07	; 7
    29c2:	ef 2e       	mov	r14, r31
    29c4:	f1 2c       	mov	r15, r1
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
if (xit == 1) {i=count;s=7;x=8;y=8;break;}
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    29c6:	27 e0       	ldi	r18, 0x07	; 7
    29c8:	20 1b       	sub	r18, r16
    29ca:	2f a7       	std	Y+47, r18	; 0x2f
    29cc:	ba cf       	rjmp	.-140    	; 0x2942 <effect_smileyspin+0x3ec>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    29ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    29d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29d2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			fill(0x00);
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>

		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    29dc:	08 94       	sec
    29de:	21 1c       	adc	r2, r1
    29e0:	31 1c       	adc	r3, r1
    29e2:	37 e0       	ldi	r19, 0x07	; 7
    29e4:	23 16       	cp	r2, r19
    29e6:	31 04       	cpc	r3, r1
    29e8:	0c f4       	brge	.+2      	; 0x29ec <effect_smileyspin+0x496>
    29ea:	80 cf       	rjmp	.-256    	; 0x28ec <effect_smileyspin+0x396>
{
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    29ec:	88 a5       	ldd	r24, Y+40	; 0x28
    29ee:	99 a5       	ldd	r25, Y+41	; 0x29
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	99 a7       	std	Y+41, r25	; 0x29
    29f4:	88 a7       	std	Y+40, r24	; 0x28
    29f6:	e8 a5       	ldd	r30, Y+40	; 0x28
    29f8:	f9 a5       	ldd	r31, Y+41	; 0x29
    29fa:	2a a5       	ldd	r18, Y+42	; 0x2a
    29fc:	3b a5       	ldd	r19, Y+43	; 0x2b
    29fe:	e2 17       	cp	r30, r18
    2a00:	f3 07       	cpc	r31, r19
    2a02:	0c f4       	brge	.+2      	; 0x2a06 <effect_smileyspin+0x4b0>
    2a04:	d8 cd       	rjmp	.-1104   	; 0x25b6 <effect_smileyspin+0x60>
			delay_ms(delay);
			fill(0x00);
		}

	}
}
    2a06:	ec 96       	adiw	r28, 0x3c	; 60
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	ff 90       	pop	r15
    2a1c:	ef 90       	pop	r14
    2a1e:	df 90       	pop	r13
    2a20:	cf 90       	pop	r12
    2a22:	bf 90       	pop	r11
    2a24:	af 90       	pop	r10
    2a26:	9f 90       	pop	r9
    2a28:	8f 90       	pop	r8
    2a2a:	7f 90       	pop	r7
    2a2c:	6f 90       	pop	r6
    2a2e:	5f 90       	pop	r5
    2a30:	4f 90       	pop	r4
    2a32:	3f 90       	pop	r3
    2a34:	2f 90       	pop	r2
    2a36:	08 95       	ret

00002a38 <effect_random_sparkle_flash>:
}


// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
    2a38:	6f 92       	push	r6
    2a3a:	7f 92       	push	r7
    2a3c:	8f 92       	push	r8
    2a3e:	9f 92       	push	r9
    2a40:	af 92       	push	r10
    2a42:	bf 92       	push	r11
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	3c 01       	movw	r6, r24
    2a56:	4b 01       	movw	r8, r22
    2a58:	5a 01       	movw	r10, r20
    2a5a:	cc 24       	eor	r12, r12
    2a5c:	dd 24       	eor	r13, r13
    2a5e:	2c c0       	rjmp	.+88     	; 0x2ab8 <effect_random_sparkle_flash+0x80>
	int i;
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v=0;v<=voxels;v++)
			setvoxel(rand()%8,rand()%8,rand()%8);
    2a60:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    2a64:	8c 01       	movw	r16, r24
    2a66:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    2a6a:	7c 01       	movw	r14, r24
    2a6c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    2a70:	fc 01       	movw	r30, r24
    2a72:	c8 01       	movw	r24, r16
    2a74:	68 e0       	ldi	r22, 0x08	; 8
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    2a7c:	8c 01       	movw	r16, r24
    2a7e:	c7 01       	movw	r24, r14
    2a80:	68 e0       	ldi	r22, 0x08	; 8
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    2a88:	9c 01       	movw	r18, r24
    2a8a:	cf 01       	movw	r24, r30
    2a8c:	68 e0       	ldi	r22, 0x08	; 8
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    2a94:	ac 01       	movw	r20, r24
    2a96:	c8 01       	movw	r24, r16
    2a98:	b9 01       	movw	r22, r18
    2a9a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v=0;v<=voxels;v++)
    2a9e:	21 96       	adiw	r28, 0x01	; 1
    2aa0:	8c 16       	cp	r8, r28
    2aa2:	9d 06       	cpc	r9, r29
    2aa4:	ec f6       	brge	.-70     	; 0x2a60 <effect_random_sparkle_flash+0x28>
			setvoxel(rand()%8,rand()%8,rand()%8);
			
		delay_ms(delay);
    2aa6:	c5 01       	movw	r24, r10
    2aa8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		fill(0x00);
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    2ab2:	08 94       	sec
    2ab4:	c1 1c       	adc	r12, r1
    2ab6:	d1 1c       	adc	r13, r1
    2ab8:	c6 14       	cp	r12, r6
    2aba:	d7 04       	cpc	r13, r7
    2abc:	1c f4       	brge	.+6      	; 0x2ac4 <effect_random_sparkle_flash+0x8c>
    2abe:	c0 e0       	ldi	r28, 0x00	; 0
    2ac0:	d0 e0       	ldi	r29, 0x00	; 0
    2ac2:	ee cf       	rjmp	.-36     	; 0x2aa0 <effect_random_sparkle_flash+0x68>
			setvoxel(rand()%8,rand()%8,rand()%8);
			
		delay_ms(delay);
		fill(0x00);
	}
}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	cf 90       	pop	r12
    2ad4:	bf 90       	pop	r11
    2ad6:	af 90       	pop	r10
    2ad8:	9f 90       	pop	r9
    2ada:	8f 90       	pop	r8
    2adc:	7f 90       	pop	r7
    2ade:	6f 90       	pop	r6
    2ae0:	08 95       	ret

00002ae2 <effect_random_sparkle>:

// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
void effect_random_sparkle (void)
{
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	c1 e0       	ldi	r28, 0x01	; 1
    2ae8:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	
	for (i=1;i<20;i++)
	{
		effect_random_sparkle_flash(5,i,200);
    2aea:	85 e0       	ldi	r24, 0x05	; 5
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	be 01       	movw	r22, r28
    2af0:	48 ec       	ldi	r20, 0xC8	; 200
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <effect_random_sparkle_flash>
// and back to 1 again.
void effect_random_sparkle (void)
{
	int i;
	
	for (i=1;i<20;i++)
    2af8:	21 96       	adiw	r28, 0x01	; 1
    2afa:	c4 31       	cpi	r28, 0x14	; 20
    2afc:	d1 05       	cpc	r29, r1
    2afe:	a9 f7       	brne	.-22     	; 0x2aea <effect_random_sparkle+0x8>
		effect_random_sparkle_flash(5,i,200);
	}
	
	for (i=20;i>=1;i--)
	{
		effect_random_sparkle_flash(5,i,200);
    2b00:	85 e0       	ldi	r24, 0x05	; 5
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	be 01       	movw	r22, r28
    2b06:	48 ec       	ldi	r20, 0xC8	; 200
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <effect_random_sparkle_flash>
	for (i=1;i<20;i++)
	{
		effect_random_sparkle_flash(5,i,200);
	}
	
	for (i=20;i>=1;i--)
    2b0e:	21 97       	sbiw	r28, 0x01	; 1
    2b10:	b9 f7       	brne	.-18     	; 0x2b00 <effect_random_sparkle+0x1e>
	{
		effect_random_sparkle_flash(5,i,200);
	}
	
}
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	08 95       	ret

00002b18 <effect_loadbar>:


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    2b18:	df 92       	push	r13
    2b1a:	ef 92       	push	r14
    2b1c:	ff 92       	push	r15
    2b1e:	0f 93       	push	r16
    2b20:	1f 93       	push	r17
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	8c 01       	movw	r16, r24
	fill(0x00);
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    2b2e:	c0 e0       	ldi	r28, 0x00	; 0
    2b30:	d0 e0       	ldi	r29, 0x00	; 0
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    2b32:	dd 24       	eor	r13, r13
    2b34:	da 94       	dec	r13
			
		delay_ms(delay);
    2b36:	78 01       	movw	r14, r16
    2b38:	11 c0       	rjmp	.+34     	; 0x2b5c <effect_loadbar+0x44>
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    2b3a:	f9 01       	movw	r30, r18
    2b3c:	e8 0f       	add	r30, r24
    2b3e:	f9 1f       	adc	r31, r25
    2b40:	e9 50       	subi	r30, 0x09	; 9
    2b42:	fe 4f       	sbci	r31, 0xFE	; 254
    2b44:	d0 82       	st	Z, r13
	
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    2b46:	01 96       	adiw	r24, 0x01	; 1
    2b48:	88 30       	cpi	r24, 0x08	; 8
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	b1 f7       	brne	.-20     	; 0x2b3a <effect_loadbar+0x22>
			cube[z][y] = 0xff;
			
		delay_ms(delay);
    2b4e:	c7 01       	movw	r24, r14
    2b50:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    2b54:	21 96       	adiw	r28, 0x01	; 1
    2b56:	c8 30       	cpi	r28, 0x08	; 8
    2b58:	d1 05       	cpc	r29, r1
    2b5a:	49 f0       	breq	.+18     	; 0x2b6e <effect_loadbar+0x56>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    2b60:	9e 01       	movw	r18, r28
    2b62:	43 e0       	ldi	r20, 0x03	; 3
    2b64:	22 0f       	add	r18, r18
    2b66:	33 1f       	adc	r19, r19
    2b68:	4a 95       	dec	r20
    2b6a:	e1 f7       	brne	.-8      	; 0x2b64 <effect_loadbar+0x4c>
    2b6c:	e6 cf       	rjmp	.-52     	; 0x2b3a <effect_loadbar+0x22>
			
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
    2b6e:	c8 01       	movw	r24, r16
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	80 0f       	add	r24, r16
    2b76:	91 1f       	adc	r25, r17
    2b78:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    2b7c:	c0 e0       	ldi	r28, 0x00	; 0
    2b7e:	d0 e0       	ldi	r29, 0x00	; 0
    2b80:	11 c0       	rjmp	.+34     	; 0x2ba4 <effect_loadbar+0x8c>
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    2b82:	f9 01       	movw	r30, r18
    2b84:	e8 0f       	add	r30, r24
    2b86:	f9 1f       	adc	r31, r25
    2b88:	e9 50       	subi	r30, 0x09	; 9
    2b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8c:	10 82       	st	Z, r1
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	88 30       	cpi	r24, 0x08	; 8
    2b92:	91 05       	cpc	r25, r1
    2b94:	b1 f7       	brne	.-20     	; 0x2b82 <effect_loadbar+0x6a>
			cube[z][y] = 0x00;
			
		delay_ms(delay);
    2b96:	c7 01       	movw	r24, r14
    2b98:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
    2b9c:	21 96       	adiw	r28, 0x01	; 1
    2b9e:	c8 30       	cpi	r28, 0x08	; 8
    2ba0:	d1 05       	cpc	r29, r1
    2ba2:	49 f0       	breq	.+18     	; 0x2bb6 <effect_loadbar+0x9e>
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    2ba8:	9e 01       	movw	r18, r28
    2baa:	a3 e0       	ldi	r26, 0x03	; 3
    2bac:	22 0f       	add	r18, r18
    2bae:	33 1f       	adc	r19, r19
    2bb0:	aa 95       	dec	r26
    2bb2:	e1 f7       	brne	.-8      	; 0x2bac <effect_loadbar+0x94>
    2bb4:	e6 cf       	rjmp	.-52     	; 0x2b82 <effect_loadbar+0x6a>
			
		delay_ms(delay);
	}
}
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	ff 90       	pop	r15
    2bc0:	ef 90       	pop	r14
    2bc2:	df 90       	pop	r13
    2bc4:	08 95       	ret

00002bc6 <draw_positions_axis>:
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, unsigned char positions[64], int invert)
{
    2bc6:	4f 92       	push	r4
    2bc8:	5f 92       	push	r5
    2bca:	6f 92       	push	r6
    2bcc:	7f 92       	push	r7
    2bce:	9f 92       	push	r9
    2bd0:	af 92       	push	r10
    2bd2:	bf 92       	push	r11
    2bd4:	cf 92       	push	r12
    2bd6:	df 92       	push	r13
    2bd8:	ef 92       	push	r14
    2bda:	ff 92       	push	r15
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	98 2e       	mov	r9, r24
    2be6:	16 2f       	mov	r17, r22
    2be8:	07 2f       	mov	r16, r23
    2bea:	3a 01       	movw	r6, r20
	int x, y, p;
	
	fill(0x00);
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    2bf2:	21 2f       	mov	r18, r17
    2bf4:	30 2f       	mov	r19, r16
    2bf6:	c9 01       	movw	r24, r18
    2bf8:	6c 01       	movw	r12, r24
    2bfa:	c0 e0       	ldi	r28, 0x00	; 0
    2bfc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0; y<8; y++)
		{
			if (invert)
			{
				p = (7-positions[(x*8)+y]);
    2bfe:	57 e0       	ldi	r21, 0x07	; 7
    2c00:	45 2e       	mov	r4, r21
    2c02:	51 2c       	mov	r5, r1
    2c04:	35 c0       	rjmp	.+106    	; 0x2c70 <draw_positions_axis+0xaa>
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
		{
			if (invert)
    2c06:	61 14       	cp	r6, r1
    2c08:	71 04       	cpc	r7, r1
    2c0a:	31 f0       	breq	.+12     	; 0x2c18 <draw_positions_axis+0x52>
			{
				p = (7-positions[(x*8)+y]);
    2c0c:	f5 01       	movw	r30, r10
    2c0e:	80 81       	ld	r24, Z
    2c10:	a2 01       	movw	r20, r4
    2c12:	48 1b       	sub	r20, r24
    2c14:	51 09       	sbc	r21, r1
    2c16:	04 c0       	rjmp	.+8      	; 0x2c20 <draw_positions_axis+0x5a>
			} else
			{
				p = positions[(x*8)+y];
    2c18:	f7 01       	movw	r30, r14
    2c1a:	80 81       	ld	r24, Z
    2c1c:	48 2f       	mov	r20, r24
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
			}
		
			if (axis == AXIS_Z)
    2c20:	fa e7       	ldi	r31, 0x7A	; 122
    2c22:	9f 16       	cp	r9, r31
    2c24:	19 f4       	brne	.+6      	; 0x2c2c <draw_positions_axis+0x66>
				setvoxel(x,y,p);
    2c26:	ce 01       	movw	r24, r28
    2c28:	b8 01       	movw	r22, r16
    2c2a:	0d c0       	rjmp	.+26     	; 0x2c46 <draw_positions_axis+0x80>
				
			if (axis == AXIS_Y)
    2c2c:	89 e7       	ldi	r24, 0x79	; 121
    2c2e:	98 16       	cp	r9, r24
    2c30:	21 f4       	brne	.+8      	; 0x2c3a <draw_positions_axis+0x74>
				setvoxel(x,p,y);
    2c32:	ce 01       	movw	r24, r28
    2c34:	ba 01       	movw	r22, r20
    2c36:	a8 01       	movw	r20, r16
    2c38:	06 c0       	rjmp	.+12     	; 0x2c46 <draw_positions_axis+0x80>
				
			if (axis == AXIS_X)
    2c3a:	98 e7       	ldi	r25, 0x78	; 120
    2c3c:	99 16       	cp	r9, r25
    2c3e:	29 f4       	brne	.+10     	; 0x2c4a <draw_positions_axis+0x84>
				setvoxel(p,y,x);
    2c40:	ca 01       	movw	r24, r20
    2c42:	b8 01       	movw	r22, r16
    2c44:	ae 01       	movw	r20, r28
    2c46:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	
	fill(0x00);
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
    2c4a:	0f 5f       	subi	r16, 0xFF	; 255
    2c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4e:	08 94       	sec
    2c50:	a1 1c       	adc	r10, r1
    2c52:	b1 1c       	adc	r11, r1
    2c54:	08 94       	sec
    2c56:	e1 1c       	adc	r14, r1
    2c58:	f1 1c       	adc	r15, r1
    2c5a:	08 30       	cpi	r16, 0x08	; 8
    2c5c:	11 05       	cpc	r17, r1
    2c5e:	99 f6       	brne	.-90     	; 0x2c06 <draw_positions_axis+0x40>
{
	int x, y, p;
	
	fill(0x00);
	
	for (x=0; x<8; x++)
    2c60:	21 96       	adiw	r28, 0x01	; 1
    2c62:	e8 e0       	ldi	r30, 0x08	; 8
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	ce 0e       	add	r12, r30
    2c68:	df 1e       	adc	r13, r31
    2c6a:	c8 30       	cpi	r28, 0x08	; 8
    2c6c:	d1 05       	cpc	r29, r1
    2c6e:	29 f0       	breq	.+10     	; 0x2c7a <draw_positions_axis+0xb4>
    2c70:	56 01       	movw	r10, r12
    2c72:	76 01       	movw	r14, r12
    2c74:	00 e0       	ldi	r16, 0x00	; 0
    2c76:	10 e0       	ldi	r17, 0x00	; 0
    2c78:	c6 cf       	rjmp	.-116    	; 0x2c06 <draw_positions_axis+0x40>
			if (axis == AXIS_X)
				setvoxel(p,y,x);
		}
	}
	
}
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	ff 90       	pop	r15
    2c84:	ef 90       	pop	r14
    2c86:	df 90       	pop	r13
    2c88:	cf 90       	pop	r12
    2c8a:	bf 90       	pop	r11
    2c8c:	af 90       	pop	r10
    2c8e:	9f 90       	pop	r9
    2c90:	7f 90       	pop	r7
    2c92:	6f 90       	pop	r6
    2c94:	5f 90       	pop	r5
    2c96:	4f 90       	pop	r4
    2c98:	08 95       	ret

00002c9a <effect_boxside_randsend_parallel>:


void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
{
    2c9a:	2f 92       	push	r2
    2c9c:	3f 92       	push	r3
    2c9e:	4f 92       	push	r4
    2ca0:	5f 92       	push	r5
    2ca2:	6f 92       	push	r6
    2ca4:	7f 92       	push	r7
    2ca6:	8f 92       	push	r8
    2ca8:	9f 92       	push	r9
    2caa:	af 92       	push	r10
    2cac:	bf 92       	push	r11
    2cae:	cf 92       	push	r12
    2cb0:	df 92       	push	r13
    2cb2:	ef 92       	push	r14
    2cb4:	ff 92       	push	r15
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	c1 58       	subi	r28, 0x81	; 129
    2cc4:	d0 40       	sbci	r29, 0x00	; 0
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	cf 57       	subi	r28, 0x7F	; 127
    2cd2:	df 4f       	sbci	r29, 0xFF	; 255
    2cd4:	88 83       	st	Y, r24
    2cd6:	c1 58       	subi	r28, 0x81	; 129
    2cd8:	d0 40       	sbci	r29, 0x00	; 0
    2cda:	2b 01       	movw	r4, r22
    2cdc:	3a 01       	movw	r6, r20
    2cde:	49 01       	movw	r8, r18
    2ce0:	71 e4       	ldi	r23, 0x41	; 65
    2ce2:	a7 2e       	mov	r10, r23
    2ce4:	b1 2c       	mov	r11, r1
    2ce6:	ac 0e       	add	r10, r28
    2ce8:	bd 1e       	adc	r11, r29
    2cea:	f5 01       	movw	r30, r10
    2cec:	61 e8       	ldi	r22, 0x81	; 129
    2cee:	c6 2e       	mov	r12, r22
    2cf0:	d1 2c       	mov	r13, r1
    2cf2:	cc 0e       	add	r12, r28
    2cf4:	dd 1e       	adc	r13, r29
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
    2cf6:	11 92       	st	Z+, r1
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    2cf8:	ec 15       	cp	r30, r12
    2cfa:	fd 05       	cpc	r31, r13
    2cfc:	e1 f7       	brne	.-8      	; 0x2cf6 <effect_boxside_randsend_parallel+0x5c>
    2cfe:	00 e0       	ldi	r16, 0x00	; 0
    2d00:	10 e0       	ldi	r17, 0x00	; 0
				sent++;
			}
		}
		
		done = 0;
		for (i=0;i<64;i++)
    2d02:	1e 01       	movw	r2, r28
    2d04:	08 94       	sec
    2d06:	21 1c       	adc	r2, r1
    2d08:	31 1c       	adc	r3, r1
		pos[i] = 0;
	}
	
	while (notdone)
	{
		if (mode == 1)
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	88 16       	cp	r8, r24
    2d0e:	91 04       	cpc	r9, r1
    2d10:	c9 f4       	brne	.+50     	; 0x2d44 <effect_boxside_randsend_parallel+0xaa>
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <effect_boxside_randsend_parallel+0xa2>
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
			{
				i = rand()%64;
    2d14:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    2d18:	60 e4       	ldi	r22, 0x40	; 64
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
				if (pos[i] == 0)
    2d20:	e1 e4       	ldi	r30, 0x41	; 65
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	ec 0f       	add	r30, r28
    2d26:	fd 1f       	adc	r31, r29
    2d28:	e8 0f       	add	r30, r24
    2d2a:	f9 1f       	adc	r31, r25
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 23       	and	r24, r24
    2d30:	89 f7       	brne	.-30     	; 0x2d14 <effect_boxside_randsend_parallel+0x7a>
				{
					sent++;
    2d32:	0f 5f       	subi	r16, 0xFF	; 255
    2d34:	1f 4f       	sbci	r17, 0xFF	; 255
					pos[i] += 1;
    2d36:	91 e0       	ldi	r25, 0x01	; 1
    2d38:	90 83       	st	Z, r25
    2d3a:	16 c0       	rjmp	.+44     	; 0x2d68 <effect_boxside_randsend_parallel+0xce>
	while (notdone)
	{
		if (mode == 1)
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
    2d3c:	00 34       	cpi	r16, 0x40	; 64
    2d3e:	11 05       	cpc	r17, r1
    2d40:	4c f3       	brlt	.-46     	; 0x2d14 <effect_boxside_randsend_parallel+0x7a>
    2d42:	12 c0       	rjmp	.+36     	; 0x2d68 <effect_boxside_randsend_parallel+0xce>
					sent++;
					pos[i] += 1;
					notdone2 = 0;
				}
			}
		} else if (mode == 2)
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	88 16       	cp	r8, r24
    2d48:	91 04       	cpc	r9, r1
    2d4a:	71 f4       	brne	.+28     	; 0x2d68 <effect_boxside_randsend_parallel+0xce>
		{
			if (sent<64)
    2d4c:	00 34       	cpi	r16, 0x40	; 64
    2d4e:	11 05       	cpc	r17, r1
    2d50:	5c f4       	brge	.+22     	; 0x2d68 <effect_boxside_randsend_parallel+0xce>
			{
				pos[sent] += 1;
    2d52:	e1 e4       	ldi	r30, 0x41	; 65
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	ec 0f       	add	r30, r28
    2d58:	fd 1f       	adc	r31, r29
    2d5a:	e0 0f       	add	r30, r16
    2d5c:	f1 1f       	adc	r31, r17
    2d5e:	80 81       	ld	r24, Z
    2d60:	8f 5f       	subi	r24, 0xFF	; 255
    2d62:	80 83       	st	Z, r24
				sent++;
    2d64:	0f 5f       	subi	r16, 0xFF	; 255
    2d66:	1f 4f       	sbci	r17, 0xFF	; 255
    2d68:	f5 01       	movw	r30, r10
    2d6a:	ee 24       	eor	r14, r14
    2d6c:	ff 24       	eor	r15, r15
		}
		
		done = 0;
		for (i=0;i<64;i++)
		{
			if (pos[i] > 0 && pos[i] <7)
    2d6e:	90 81       	ld	r25, Z
    2d70:	89 2f       	mov	r24, r25
    2d72:	81 50       	subi	r24, 0x01	; 1
    2d74:	86 30       	cpi	r24, 0x06	; 6
    2d76:	10 f4       	brcc	.+4      	; 0x2d7c <effect_boxside_randsend_parallel+0xe2>
			{
				pos[i] += 1;
    2d78:	9f 5f       	subi	r25, 0xFF	; 255
    2d7a:	90 83       	st	Z, r25
			}
				
			if (pos[i] == 7)
    2d7c:	80 81       	ld	r24, Z
    2d7e:	87 30       	cpi	r24, 0x07	; 7
    2d80:	19 f4       	brne	.+6      	; 0x2d88 <effect_boxside_randsend_parallel+0xee>
				done++;
    2d82:	08 94       	sec
    2d84:	e1 1c       	adc	r14, r1
    2d86:	f1 1c       	adc	r15, r1
    2d88:	31 96       	adiw	r30, 0x01	; 1
				sent++;
			}
		}
		
		done = 0;
		for (i=0;i<64;i++)
    2d8a:	ec 15       	cp	r30, r12
    2d8c:	fd 05       	cpc	r31, r13
    2d8e:	79 f7       	brne	.-34     	; 0x2d6e <effect_boxside_randsend_parallel+0xd4>
    2d90:	d1 01       	movw	r26, r2
    2d92:	f5 01       	movw	r30, r10
    2d94:	80 81       	ld	r24, Z
		if (done == 64)
			notdone = 0;
		
		for (i=0;i<64;i++)
		{
			if (origin == 0)
    2d96:	41 14       	cp	r4, r1
    2d98:	51 04       	cpc	r5, r1
    2d9a:	19 f0       	breq	.+6      	; 0x2da2 <effect_boxside_randsend_parallel+0x108>
			{
				cubepos[i] = pos[i];
			} else
			{
				cubepos[i] = (7-pos[i]);
    2d9c:	97 e0       	ldi	r25, 0x07	; 7
    2d9e:	98 1b       	sub	r25, r24
    2da0:	89 2f       	mov	r24, r25
    2da2:	8c 93       	st	X, r24
    2da4:	31 96       	adiw	r30, 0x01	; 1
    2da6:	11 96       	adiw	r26, 0x01	; 1
		}
		
		if (done == 64)
			notdone = 0;
		
		for (i=0;i<64;i++)
    2da8:	ec 15       	cp	r30, r12
    2daa:	fd 05       	cpc	r31, r13
    2dac:	99 f7       	brne	.-26     	; 0x2d94 <effect_boxside_randsend_parallel+0xfa>
				cubepos[i] = (7-pos[i]);
			}
		}
		
		
		delay_ms(delay);
    2dae:	c3 01       	movw	r24, r6
    2db0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		draw_positions_axis(axis,cubepos,0);
    2db4:	cf 57       	subi	r28, 0x7F	; 127
    2db6:	df 4f       	sbci	r29, 0xFF	; 255
    2db8:	88 81       	ld	r24, Y
    2dba:	c1 58       	subi	r28, 0x81	; 129
    2dbc:	d0 40       	sbci	r29, 0x00	; 0
    2dbe:	b1 01       	movw	r22, r2
    2dc0:	40 e0       	ldi	r20, 0x00	; 0
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <draw_positions_axis>
		LED_PORT ^= LED_RED;
    2dc8:	82 b3       	in	r24, 0x12	; 18
    2dca:	94 e0       	ldi	r25, 0x04	; 4
    2dcc:	89 27       	eor	r24, r25
    2dce:	82 bb       	out	0x12, r24	; 18
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
	}
	
	while (notdone)
    2dd0:	80 e4       	ldi	r24, 0x40	; 64
    2dd2:	e8 16       	cp	r14, r24
    2dd4:	f1 04       	cpc	r15, r1
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <effect_boxside_randsend_parallel+0x140>
    2dd8:	98 cf       	rjmp	.-208    	; 0x2d0a <effect_boxside_randsend_parallel+0x70>
		delay_ms(delay);
		draw_positions_axis(axis,cubepos,0);
		LED_PORT ^= LED_RED;
	}
	
}
    2dda:	cf 57       	subi	r28, 0x7F	; 127
    2ddc:	df 4f       	sbci	r29, 0xFF	; 255
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	ff 90       	pop	r15
    2df2:	ef 90       	pop	r14
    2df4:	df 90       	pop	r13
    2df6:	cf 90       	pop	r12
    2df8:	bf 90       	pop	r11
    2dfa:	af 90       	pop	r10
    2dfc:	9f 90       	pop	r9
    2dfe:	8f 90       	pop	r8
    2e00:	7f 90       	pop	r7
    2e02:	6f 90       	pop	r6
    2e04:	5f 90       	pop	r5
    2e06:	4f 90       	pop	r4
    2e08:	3f 90       	pop	r3
    2e0a:	2f 90       	pop	r2
    2e0c:	08 95       	ret

00002e0e <effect_axis_updown_randsuspend>:
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    2e0e:	3f 92       	push	r3
    2e10:	4f 92       	push	r4
    2e12:	5f 92       	push	r5
    2e14:	6f 92       	push	r6
    2e16:	7f 92       	push	r7
    2e18:	8f 92       	push	r8
    2e1a:	9f 92       	push	r9
    2e1c:	af 92       	push	r10
    2e1e:	bf 92       	push	r11
    2e20:	cf 92       	push	r12
    2e22:	df 92       	push	r13
    2e24:	ef 92       	push	r14
    2e26:	ff 92       	push	r15
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	c0 58       	subi	r28, 0x80	; 128
    2e36:	d0 40       	sbci	r29, 0x00	; 0
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	38 2e       	mov	r3, r24
    2e44:	2b 01       	movw	r4, r22
    2e46:	5a 01       	movw	r10, r20
    2e48:	49 01       	movw	r8, r18
    2e4a:	00 e0       	ldi	r16, 0x00	; 0
    2e4c:	10 e0       	ldi	r17, 0x00	; 0
	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
	{
		positions[i] = 0; // Set all starting positions to 0
    2e4e:	6e 01       	movw	r12, r28
    2e50:	08 94       	sec
    2e52:	c1 1c       	adc	r12, r1
    2e54:	d1 1c       	adc	r13, r1
		destinations[i] = rand()%8;
    2e56:	a1 e4       	ldi	r26, 0x41	; 65
    2e58:	ea 2e       	mov	r14, r26
    2e5a:	f1 2c       	mov	r15, r1
    2e5c:	ec 0e       	add	r14, r28
    2e5e:	fd 1e       	adc	r15, r29
	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
	{
		positions[i] = 0; // Set all starting positions to 0
    2e60:	f6 01       	movw	r30, r12
    2e62:	e0 0f       	add	r30, r16
    2e64:	f1 1f       	adc	r31, r17
    2e66:	10 82       	st	Z, r1
		destinations[i] = rand()%8;
    2e68:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    2e6c:	f7 01       	movw	r30, r14
    2e6e:	e0 0f       	add	r30, r16
    2e70:	f1 1f       	adc	r31, r17
    2e72:	68 e0       	ldi	r22, 0x08	; 8
    2e74:	70 e0       	ldi	r23, 0x00	; 0
    2e76:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    2e7a:	80 83       	st	Z, r24
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
    2e7c:	0f 5f       	subi	r16, 0xFF	; 255
    2e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e80:	00 34       	cpi	r16, 0x40	; 64
    2e82:	11 05       	cpc	r17, r1
    2e84:	69 f7       	brne	.-38     	; 0x2e60 <effect_axis_updown_randsuspend+0x52>
    2e86:	00 e0       	ldi	r16, 0x00	; 0
    2e88:	10 e0       	ldi	r17, 0x00	; 0
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    2e8a:	6e 01       	movw	r12, r28
    2e8c:	08 94       	sec
    2e8e:	c1 1c       	adc	r12, r1
    2e90:	d1 1c       	adc	r13, r1
    2e92:	f1 e4       	ldi	r31, 0x41	; 65
    2e94:	ef 2e       	mov	r14, r31
    2e96:	f1 2c       	mov	r15, r1
    2e98:	ec 0e       	add	r14, r28
    2e9a:	fd 1e       	adc	r15, r29
    2e9c:	1a c0       	rjmp	.+52     	; 0x2ed2 <effect_axis_updown_randsuspend+0xc4>
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
    2e9e:	d7 01       	movw	r26, r14
    2ea0:	f6 01       	movw	r30, r12
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
		{
if (xit == 1) {i = 8; px=64;break;}
			if (positions[px]<destinations[px])
    2ea2:	90 81       	ld	r25, Z
    2ea4:	8c 91       	ld	r24, X
    2ea6:	98 17       	cp	r25, r24
    2ea8:	10 f4       	brcc	.+4      	; 0x2eae <effect_axis_updown_randsuspend+0xa0>
			{
				positions[px]++;
    2eaa:	9f 5f       	subi	r25, 0xFF	; 255
    2eac:	90 83       	st	Z, r25
    2eae:	31 96       	adiw	r30, 0x01	; 1
    2eb0:	11 96       	adiw	r26, 0x01	; 1

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
    2eb2:	ee 15       	cp	r30, r14
    2eb4:	ff 05       	cpc	r31, r15
    2eb6:	a9 f7       	brne	.-22     	; 0x2ea2 <effect_axis_updown_randsuspend+0x94>
			{
				positions[px]++;
			}
		}
        // Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
    2eb8:	83 2d       	mov	r24, r3
    2eba:	b6 01       	movw	r22, r12
    2ebc:	a4 01       	movw	r20, r8
    2ebe:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <draw_positions_axis>
		delay_ms(delay);
    2ec2:	c2 01       	movw	r24, r4
    2ec4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    2ec8:	0f 5f       	subi	r16, 0xFF	; 255
    2eca:	1f 4f       	sbci	r17, 0xFF	; 255
    2ecc:	08 30       	cpi	r16, 0x08	; 8
    2ece:	11 05       	cpc	r17, r1
    2ed0:	4c f4       	brge	.+18     	; 0x2ee4 <effect_axis_updown_randsuspend+0xd6>
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
		{
if (xit == 1) {i = 8; px=64;break;}
    2ed2:	80 91 b3 01 	lds	r24, 0x01B3
    2ed6:	90 91 b4 01 	lds	r25, 0x01B4
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	01 f7       	brne	.-64     	; 0x2e9e <effect_axis_updown_randsuspend+0x90>
    2ede:	08 e0       	ldi	r16, 0x08	; 8
    2ee0:	10 e0       	ldi	r17, 0x00	; 0
    2ee2:	ea cf       	rjmp	.-44     	; 0x2eb8 <effect_axis_updown_randsuspend+0xaa>
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
	{
		destinations[i] = 7;
if (xit == 1) {i = 64;break;}
    2ee4:	80 91 b3 01 	lds	r24, 0x01B3
    2ee8:	90 91 b4 01 	lds	r25, 0x01B4
    2eec:	f7 01       	movw	r30, r14
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
	{
		destinations[i] = 7;
    2eee:	47 e0       	ldi	r20, 0x07	; 7
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
    2ef0:	9e 01       	movw	r18, r28
    2ef2:	2f 57       	subi	r18, 0x7F	; 127
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		destinations[i] = 7;
    2ef6:	40 83       	st	Z, r20
if (xit == 1) {i = 64;break;}
    2ef8:	81 30       	cpi	r24, 0x01	; 1
    2efa:	91 05       	cpc	r25, r1
    2efc:	21 f0       	breq	.+8      	; 0x2f06 <effect_axis_updown_randsuspend+0xf8>
    2efe:	31 96       	adiw	r30, 0x01	; 1
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
    2f00:	e2 17       	cp	r30, r18
    2f02:	f3 07       	cpc	r31, r19
    2f04:	c1 f7       	brne	.-16     	; 0x2ef6 <effect_axis_updown_randsuspend+0xe8>
		destinations[i] = 7;
if (xit == 1) {i = 64;break;}
	}
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
    2f06:	c5 01       	movw	r24, r10
    2f08:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    2f0c:	00 e0       	ldi	r16, 0x00	; 0
    2f0e:	10 e0       	ldi	r17, 0x00	; 0
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
    2f10:	e1 e4       	ldi	r30, 0x41	; 65
    2f12:	6e 2e       	mov	r6, r30
    2f14:	71 2c       	mov	r7, r1
    2f16:	6c 0e       	add	r6, r28
    2f18:	7d 1e       	adc	r7, r29
			if (positions[px]>destinations[px])
			{
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    2f1a:	5e 01       	movw	r10, r28
    2f1c:	08 94       	sec
    2f1e:	a1 1c       	adc	r10, r1
    2f20:	b1 1c       	adc	r11, r1
    2f22:	1f c0       	rjmp	.+62     	; 0x2f62 <effect_axis_updown_randsuspend+0x154>
		destinations[i] = 7;
if (xit == 1) {i = 64;break;}
	}
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
    2f24:	f6 01       	movw	r30, r12
    2f26:	d7 01       	movw	r26, r14
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
		{
if (xit == 1) {i = 8; px=64;break;}
			if (positions[px]<destinations[px])
    2f28:	80 81       	ld	r24, Z
    2f2a:	9c 91       	ld	r25, X
    2f2c:	89 17       	cp	r24, r25
    2f2e:	10 f4       	brcc	.+4      	; 0x2f34 <effect_axis_updown_randsuspend+0x126>
			{
				positions[px]++;
    2f30:	8f 5f       	subi	r24, 0xFF	; 255
    2f32:	80 83       	st	Z, r24
			}
			if (positions[px]>destinations[px])
    2f34:	80 81       	ld	r24, Z
    2f36:	98 17       	cp	r25, r24
    2f38:	10 f4       	brcc	.+4      	; 0x2f3e <effect_axis_updown_randsuspend+0x130>
			{
				positions[px]--;
    2f3a:	81 50       	subi	r24, 0x01	; 1
    2f3c:	80 83       	st	Z, r24
    2f3e:	31 96       	adiw	r30, 0x01	; 1
    2f40:	11 96       	adiw	r26, 0x01	; 1
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
    2f42:	e6 15       	cp	r30, r6
    2f44:	f7 05       	cpc	r31, r7
    2f46:	81 f7       	brne	.-32     	; 0x2f28 <effect_axis_updown_randsuspend+0x11a>
			if (positions[px]>destinations[px])
			{
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    2f48:	83 2d       	mov	r24, r3
    2f4a:	b5 01       	movw	r22, r10
    2f4c:	a4 01       	movw	r20, r8
    2f4e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <draw_positions_axis>
		delay_ms(delay);
    2f52:	c2 01       	movw	r24, r4
    2f54:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
    2f58:	0f 5f       	subi	r16, 0xFF	; 255
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	08 30       	cpi	r16, 0x08	; 8
    2f5e:	11 05       	cpc	r17, r1
    2f60:	4c f4       	brge	.+18     	; 0x2f74 <effect_axis_updown_randsuspend+0x166>
	{
		for (px=0; px<64; px++)
		{
if (xit == 1) {i = 8; px=64;break;}
    2f62:	80 91 b3 01 	lds	r24, 0x01B3
    2f66:	90 91 b4 01 	lds	r25, 0x01B4
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	d9 f6       	brne	.-74     	; 0x2f24 <effect_axis_updown_randsuspend+0x116>
    2f6e:	08 e0       	ldi	r16, 0x08	; 8
    2f70:	10 e0       	ldi	r17, 0x00	; 0
    2f72:	ea cf       	rjmp	.-44     	; 0x2f48 <effect_axis_updown_randsuspend+0x13a>
			}
		}
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
}
    2f74:	c0 58       	subi	r28, 0x80	; 128
    2f76:	df 4f       	sbci	r29, 0xFF	; 255
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	1f 91       	pop	r17
    2f88:	0f 91       	pop	r16
    2f8a:	ff 90       	pop	r15
    2f8c:	ef 90       	pop	r14
    2f8e:	df 90       	pop	r13
    2f90:	cf 90       	pop	r12
    2f92:	bf 90       	pop	r11
    2f94:	af 90       	pop	r10
    2f96:	9f 90       	pop	r9
    2f98:	8f 90       	pop	r8
    2f9a:	7f 90       	pop	r7
    2f9c:	6f 90       	pop	r6
    2f9e:	5f 90       	pop	r5
    2fa0:	4f 90       	pop	r4
    2fa2:	3f 90       	pop	r3
    2fa4:	08 95       	ret

00002fa6 <effect_z_updown_move>:
	}

}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
    2fa6:	ac 01       	movw	r20, r24
    2fa8:	fc 01       	movw	r30, r24
    2faa:	db 01       	movw	r26, r22
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
	int px;
	for (px=0; px<64; px++)
	{
if (xit == 1) {px=64;break;}
    2fb0:	80 91 b3 01 	lds	r24, 0x01B3
    2fb4:	90 91 b4 01 	lds	r25, 0x01B4
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	99 f0       	breq	.+38     	; 0x2fe2 <effect_z_updown_move+0x3c>
		if (positions[px]<destinations[px])
    2fbc:	90 81       	ld	r25, Z
    2fbe:	8c 91       	ld	r24, X
    2fc0:	98 17       	cp	r25, r24
    2fc2:	10 f4       	brcc	.+4      	; 0x2fc8 <effect_z_updown_move+0x22>
		{
			positions[px]++;
    2fc4:	9f 5f       	subi	r25, 0xFF	; 255
    2fc6:	90 83       	st	Z, r25
		}
		if (positions[px]>destinations[px])
    2fc8:	90 81       	ld	r25, Z
    2fca:	8c 91       	ld	r24, X
    2fcc:	89 17       	cp	r24, r25
    2fce:	10 f4       	brcc	.+4      	; 0x2fd4 <effect_z_updown_move+0x2e>
		{
			positions[px]--;
    2fd0:	91 50       	subi	r25, 0x01	; 1
    2fd2:	90 83       	st	Z, r25
}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
	int px;
	for (px=0; px<64; px++)
    2fd4:	2f 5f       	subi	r18, 0xFF	; 255
    2fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd8:	31 96       	adiw	r30, 0x01	; 1
    2fda:	11 96       	adiw	r26, 0x01	; 1
    2fdc:	20 34       	cpi	r18, 0x40	; 64
    2fde:	31 05       	cpc	r19, r1
    2fe0:	39 f7       	brne	.-50     	; 0x2fb0 <effect_z_updown_move+0xa>
		{
			positions[px]--;
		}
	}
		
	draw_positions_axis (AXIS_Z, positions,0);
    2fe2:	8a e7       	ldi	r24, 0x7A	; 122
    2fe4:	ba 01       	movw	r22, r20
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <draw_positions_axis>
}
    2fee:	08 95       	ret

00002ff0 <effect_z_updown>:
if (xit == 1) {ii = iterations;break;}
	}
}

void effect_z_updown (int iterations, int delay)
{
    2ff0:	2f 92       	push	r2
    2ff2:	3f 92       	push	r3
    2ff4:	4f 92       	push	r4
    2ff6:	5f 92       	push	r5
    2ff8:	6f 92       	push	r6
    2ffa:	7f 92       	push	r7
    2ffc:	8f 92       	push	r8
    2ffe:	9f 92       	push	r9
    3000:	af 92       	push	r10
    3002:	bf 92       	push	r11
    3004:	cf 92       	push	r12
    3006:	df 92       	push	r13
    3008:	ef 92       	push	r14
    300a:	ff 92       	push	r15
    300c:	0f 93       	push	r16
    300e:	1f 93       	push	r17
    3010:	df 93       	push	r29
    3012:	cf 93       	push	r28
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	c0 58       	subi	r28, 0x80	; 128
    301a:	d0 40       	sbci	r29, 0x00	; 0
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	3c 01       	movw	r6, r24
    3028:	7b 01       	movw	r14, r22
    302a:	00 e0       	ldi	r16, 0x00	; 0
    302c:	10 e0       	ldi	r17, 0x00	; 0

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
    302e:	5e 01       	movw	r10, r28
    3030:	08 94       	sec
    3032:	a1 1c       	adc	r10, r1
    3034:	b1 1c       	adc	r11, r1
    3036:	24 e0       	ldi	r18, 0x04	; 4
    3038:	92 2e       	mov	r9, r18
		destinations[i] = rand()%8;
    303a:	91 e4       	ldi	r25, 0x41	; 65
    303c:	c9 2e       	mov	r12, r25
    303e:	d1 2c       	mov	r13, r1
    3040:	cc 0e       	add	r12, r28
    3042:	dd 1e       	adc	r13, r29

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
    3044:	f5 01       	movw	r30, r10
    3046:	e0 0f       	add	r30, r16
    3048:	f1 1f       	adc	r31, r17
    304a:	90 82       	st	Z, r9
		destinations[i] = rand()%8;
    304c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3050:	f6 01       	movw	r30, r12
    3052:	e0 0f       	add	r30, r16
    3054:	f1 1f       	adc	r31, r17
    3056:	68 e0       	ldi	r22, 0x08	; 8
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    305e:	80 83       	st	Z, r24
	unsigned char positions[64];
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++)
    3060:	0f 5f       	subi	r16, 0xFF	; 255
    3062:	1f 4f       	sbci	r17, 0xFF	; 255
    3064:	00 34       	cpi	r16, 0x40	; 64
    3066:	11 05       	cpc	r17, r1
    3068:	69 f7       	brne	.-38     	; 0x3044 <effect_z_updown+0x54>
    306a:	00 e0       	ldi	r16, 0x00	; 0
    306c:	10 e0       	ldi	r17, 0x00	; 0
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
    306e:	81 e4       	ldi	r24, 0x41	; 65
    3070:	a8 2e       	mov	r10, r24
    3072:	b1 2c       	mov	r11, r1
    3074:	ac 0e       	add	r10, r28
    3076:	bd 1e       	adc	r11, r29
    3078:	6e 01       	movw	r12, r28
    307a:	08 94       	sec
    307c:	c1 1c       	adc	r12, r1
    307e:	d1 1c       	adc	r13, r1
		delay_ms(delay);
    3080:	27 01       	movw	r4, r14
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
    3082:	c6 01       	movw	r24, r12
    3084:	b5 01       	movw	r22, r10
    3086:	4a e7       	ldi	r20, 0x7A	; 122
    3088:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <effect_z_updown_move>
		delay_ms(delay);
    308c:	c2 01       	movw	r24, r4
    308e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	{
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
    3092:	0f 5f       	subi	r16, 0xFF	; 255
    3094:	1f 4f       	sbci	r17, 0xFF	; 255
    3096:	08 30       	cpi	r16, 0x08	; 8
    3098:	11 05       	cpc	r17, r1
    309a:	99 f7       	brne	.-26     	; 0x3082 <effect_z_updown+0x92>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    309c:	57 01       	movw	r10, r14
    309e:	aa 0c       	add	r10, r10
    30a0:	bb 1c       	adc	r11, r11
    30a2:	aa 0c       	add	r10, r10
    30a4:	bb 1c       	adc	r11, r11
    30a6:	cc 24       	eor	r12, r12
    30a8:	dd 24       	eor	r13, r13
	for (i=0;i<iterations;i++)
	{
if (xit == 1) {i = iterations;break;}
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
    30aa:	b1 e4       	ldi	r27, 0x41	; 65
    30ac:	8b 2e       	mov	r8, r27
    30ae:	91 2c       	mov	r9, r1
    30b0:	8c 0e       	add	r8, r28
    30b2:	9d 1e       	adc	r9, r29
    30b4:	1e 01       	movw	r2, r28
    30b6:	08 94       	sec
    30b8:	21 1c       	adc	r2, r1
    30ba:	31 1c       	adc	r3, r1
    30bc:	41 c0       	rjmp	.+130    	; 0x3140 <effect_z_updown+0x150>
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
	{
if (xit == 1) {i = iterations;break;}
    30be:	80 91 b3 01 	lds	r24, 0x01B3
    30c2:	90 91 b4 01 	lds	r25, 0x01B4
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	09 f4       	brne	.+2      	; 0x30cc <effect_z_updown+0xdc>
    30ca:	3e c0       	rjmp	.+124    	; 0x3148 <effect_z_updown+0x158>
    30cc:	00 e0       	ldi	r16, 0x00	; 0
    30ce:	10 e0       	ldi	r17, 0x00	; 0
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
    30d0:	c1 01       	movw	r24, r2
    30d2:	b4 01       	movw	r22, r8
    30d4:	4a e7       	ldi	r20, 0x7A	; 122
    30d6:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <effect_z_updown_move>
			delay_ms(delay);
    30da:	c2 01       	movw	r24, r4
    30dc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	}
	
	for (i=0;i<iterations;i++)
	{
if (xit == 1) {i = iterations;break;}
		for (move=0;move<8;move++)
    30e0:	0f 5f       	subi	r16, 0xFF	; 255
    30e2:	1f 4f       	sbci	r17, 0xFF	; 255
    30e4:	08 30       	cpi	r16, 0x08	; 8
    30e6:	11 05       	cpc	r17, r1
    30e8:	99 f7       	brne	.-26     	; 0x30d0 <effect_z_updown+0xe0>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    30ea:	c5 01       	movw	r24, r10
    30ec:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    30f0:	ee 24       	eor	r14, r14
    30f2:	ff 24       	eor	r15, r15


		for (y=0;y<32;y++)
		{
				destinations[rand()%64] = rand()%8;
    30f4:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    30f8:	8c 01       	movw	r16, r24
    30fa:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    30fe:	9c 01       	movw	r18, r24
    3100:	c8 01       	movw	r24, r16
    3102:	60 e4       	ldi	r22, 0x40	; 64
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    310a:	f4 01       	movw	r30, r8
    310c:	e8 0f       	add	r30, r24
    310e:	f9 1f       	adc	r31, r25
    3110:	c9 01       	movw	r24, r18
    3112:	68 e0       	ldi	r22, 0x08	; 8
    3114:	70 e0       	ldi	r23, 0x00	; 0
    3116:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    311a:	80 83       	st	Z, r24
if (xit == 1) {i = iterations; y=32;;break;}
    311c:	80 91 b3 01 	lds	r24, 0x01B3
    3120:	90 91 b4 01 	lds	r25, 0x01B4
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	11 f4       	brne	.+4      	; 0x312c <effect_z_updown+0x13c>
    3128:	63 01       	movw	r12, r6
    312a:	07 c0       	rjmp	.+14     	; 0x313a <effect_z_updown+0x14a>
		}

		delay_ms(delay*4);


		for (y=0;y<32;y++)
    312c:	08 94       	sec
    312e:	e1 1c       	adc	r14, r1
    3130:	f1 1c       	adc	r15, r1
    3132:	80 e2       	ldi	r24, 0x20	; 32
    3134:	e8 16       	cp	r14, r24
    3136:	f1 04       	cpc	r15, r1
    3138:	e9 f6       	brne	.-70     	; 0x30f4 <effect_z_updown+0x104>
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    313a:	08 94       	sec
    313c:	c1 1c       	adc	r12, r1
    313e:	d1 1c       	adc	r13, r1
    3140:	c6 14       	cp	r12, r6
    3142:	d7 04       	cpc	r13, r7
    3144:	0c f4       	brge	.+2      	; 0x3148 <effect_z_updown+0x158>
    3146:	bb cf       	rjmp	.-138    	; 0x30be <effect_z_updown+0xce>
if (xit == 1) {i = iterations; y=32;;break;}
		}
		
	}

}
    3148:	c0 58       	subi	r28, 0x80	; 128
    314a:	df 4f       	sbci	r29, 0xFF	; 255
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	1f 91       	pop	r17
    315c:	0f 91       	pop	r16
    315e:	ff 90       	pop	r15
    3160:	ef 90       	pop	r14
    3162:	df 90       	pop	r13
    3164:	cf 90       	pop	r12
    3166:	bf 90       	pop	r11
    3168:	af 90       	pop	r10
    316a:	9f 90       	pop	r9
    316c:	8f 90       	pop	r8
    316e:	7f 90       	pop	r7
    3170:	6f 90       	pop	r6
    3172:	5f 90       	pop	r5
    3174:	4f 90       	pop	r4
    3176:	3f 90       	pop	r3
    3178:	2f 90       	pop	r2
    317a:	08 95       	ret

0000317c <effect_random_filler>:
	}
}

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    317c:	8f 92       	push	r8
    317e:	9f 92       	push	r9
    3180:	af 92       	push	r10
    3182:	bf 92       	push	r11
    3184:	cf 92       	push	r12
    3186:	df 92       	push	r13
    3188:	ef 92       	push	r14
    318a:	ff 92       	push	r15
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	4c 01       	movw	r8, r24
    3196:	8b 01       	movw	r16, r22
	int x,y,z;
	int loop = 0;
	
	
	if (state == 1)
    3198:	61 30       	cpi	r22, 0x01	; 1
    319a:	71 05       	cpc	r23, r1
    319c:	11 f4       	brne	.+4      	; 0x31a2 <effect_random_filler+0x26>
	{
		fill(0x00);
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	01 c0       	rjmp	.+2      	; 0x31a4 <effect_random_filler+0x28>
	} else
	{
		fill(0xff);
    31a2:	8f ef       	ldi	r24, 0xFF	; 255
    31a4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    31a8:	c0 e0       	ldi	r28, 0x00	; 0
    31aa:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	while (loop<511)
	{
		x = rand()%8;
    31ac:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    31b0:	68 e0       	ldi	r22, 0x08	; 8
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    31b8:	b8 2e       	mov	r11, r24
    31ba:	a9 2e       	mov	r10, r25
		y = rand()%8;
    31bc:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    31c0:	68 e0       	ldi	r22, 0x08	; 8
    31c2:	70 e0       	ldi	r23, 0x00	; 0
    31c4:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    31c8:	d8 2e       	mov	r13, r24
    31ca:	c9 2e       	mov	r12, r25
		z = rand()%8;
    31cc:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    31d0:	68 e0       	ldi	r22, 0x08	; 8
    31d2:	70 e0       	ldi	r23, 0x00	; 0
    31d4:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    31d8:	f8 2e       	mov	r15, r24
    31da:	e9 2e       	mov	r14, r25

		if ((state == 0 && getvoxel(x,y,z) == 0x01) || (state == 1 && getvoxel(x,y,z) == 0x00))
    31dc:	01 15       	cp	r16, r1
    31de:	11 05       	cpc	r17, r1
    31e0:	59 f4       	brne	.+22     	; 0x31f8 <effect_random_filler+0x7c>
    31e2:	8b 2d       	mov	r24, r11
    31e4:	9a 2d       	mov	r25, r10
    31e6:	6d 2d       	mov	r22, r13
    31e8:	7c 2d       	mov	r23, r12
    31ea:	4f 2d       	mov	r20, r15
    31ec:	5e 2d       	mov	r21, r14
    31ee:	0e 94 a7 08 	call	0x114e	; 0x114e <getvoxel>
    31f2:	81 30       	cpi	r24, 0x01	; 1
    31f4:	d9 f4       	brne	.+54     	; 0x322c <effect_random_filler+0xb0>
    31f6:	0d c0       	rjmp	.+26     	; 0x3212 <effect_random_filler+0x96>
    31f8:	01 30       	cpi	r16, 0x01	; 1
    31fa:	11 05       	cpc	r17, r1
    31fc:	b9 f4       	brne	.+46     	; 0x322c <effect_random_filler+0xb0>
    31fe:	8b 2d       	mov	r24, r11
    3200:	9a 2d       	mov	r25, r10
    3202:	6d 2d       	mov	r22, r13
    3204:	7c 2d       	mov	r23, r12
    3206:	4f 2d       	mov	r20, r15
    3208:	5e 2d       	mov	r21, r14
    320a:	0e 94 a7 08 	call	0x114e	; 0x114e <getvoxel>
    320e:	88 23       	and	r24, r24
    3210:	69 f4       	brne	.+26     	; 0x322c <effect_random_filler+0xb0>
		{
			altervoxel(x,y,z,state);
    3212:	8b 2d       	mov	r24, r11
    3214:	9a 2d       	mov	r25, r10
    3216:	6d 2d       	mov	r22, r13
    3218:	7c 2d       	mov	r23, r12
    321a:	4f 2d       	mov	r20, r15
    321c:	5e 2d       	mov	r21, r14
    321e:	98 01       	movw	r18, r16
    3220:	0e 94 ca 08 	call	0x1194	; 0x1194 <altervoxel>
			delay_ms(delay);
    3224:	c4 01       	movw	r24, r8
    3226:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			loop++;
    322a:	21 96       	adiw	r28, 0x01	; 1
	} else
	{
		fill(0xff);
	}
	
	while (loop<511)
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	cf 3f       	cpi	r28, 0xFF	; 255
    3230:	d8 07       	cpc	r29, r24
    3232:	0c f4       	brge	.+2      	; 0x3236 <effect_random_filler+0xba>
    3234:	bb cf       	rjmp	.-138    	; 0x31ac <effect_random_filler+0x30>
			altervoxel(x,y,z,state);
			delay_ms(delay);
			loop++;
		}	
	}
}
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	cf 90       	pop	r12
    3246:	bf 90       	pop	r11
    3248:	af 90       	pop	r10
    324a:	9f 90       	pop	r9
    324c:	8f 90       	pop	r8
    324e:	08 95       	ret

00003250 <sendvoxels_rand_z>:
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    3250:	6f 92       	push	r6
    3252:	7f 92       	push	r7
    3254:	8f 92       	push	r8
    3256:	9f 92       	push	r9
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	df 92       	push	r13
    325e:	ef 92       	push	r14
    3260:	ff 92       	push	r15
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	3c 01       	movw	r6, r24
    326c:	5b 01       	movw	r10, r22
    326e:	4a 01       	movw	r8, r20
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    3276:	00 e0       	ldi	r16, 0x00	; 0
    3278:	10 e0       	ldi	r17, 0x00	; 0
    327a:	1f c0       	rjmp	.+62     	; 0x32ba <sendvoxels_rand_z+0x6a>
	{
		for (y=0;y<8;y++)
		{
			// Then set a voxel either at the top or at the bottom
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
    327c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3280:	62 e0       	ldi	r22, 0x02	; 2
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3288:	ac 01       	movw	r20, r24
    328a:	33 e0       	ldi	r19, 0x03	; 3
    328c:	44 0f       	add	r20, r20
    328e:	55 1f       	adc	r21, r21
    3290:	3a 95       	dec	r19
    3292:	e1 f7       	brne	.-8      	; 0x328c <sendvoxels_rand_z+0x3c>
    3294:	48 1b       	sub	r20, r24
    3296:	59 0b       	sbc	r21, r25
    3298:	c8 01       	movw	r24, r16
    329a:	be 01       	movw	r22, r28
    329c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    32a0:	21 96       	adiw	r28, 0x01	; 1
	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
	{
		for (y=0;y<8;y++)
    32a2:	c8 30       	cpi	r28, 0x08	; 8
    32a4:	d1 05       	cpc	r29, r1
    32a6:	51 f7       	brne	.-44     	; 0x327c <sendvoxels_rand_z+0x2c>
    32a8:	0f 5f       	subi	r16, 0xFF	; 255
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
    32ac:	08 30       	cpi	r16, 0x08	; 8
    32ae:	11 05       	cpc	r17, r1
    32b0:	21 f4       	brne	.+8      	; 0x32ba <sendvoxels_rand_z+0x6a>
    32b2:	dd 24       	eor	r13, r13
    32b4:	ee 24       	eor	r14, r14
    32b6:	ff 24       	eor	r15, r15
    32b8:	30 c0       	rjmp	.+96     	; 0x331a <sendvoxels_rand_z+0xca>
    32ba:	c0 e0       	ldi	r28, 0x00	; 0
    32bc:	d0 e0       	ldi	r29, 0x00	; 0
    32be:	de cf       	rjmp	.-68     	; 0x327c <sendvoxels_rand_z+0x2c>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    32c0:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    32c4:	ec 01       	movw	r28, r24
		y = rand()%8;
    32c6:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    32ca:	68 e0       	ldi	r22, 0x08	; 8
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    32d2:	08 2f       	mov	r16, r24
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    32d4:	8e 15       	cp	r24, r14
    32d6:	01 f1       	breq	.+64     	; 0x3318 <sendvoxels_rand_z+0xc8>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    32d8:	ce 01       	movw	r24, r28
    32da:	68 e0       	ldi	r22, 0x08	; 8
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    32e2:	18 2f       	mov	r17, r24
		y = rand()%8;
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    32e4:	8d 15       	cp	r24, r13
    32e6:	c1 f0       	breq	.+48     	; 0x3318 <sendvoxels_rand_z+0xc8>
		{
			// If the voxel at this x,y is at the bottom
			if (getvoxel(x,y,0))
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	60 2f       	mov	r22, r16
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	40 e0       	ldi	r20, 0x00	; 0
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	0e 94 a7 08 	call	0x114e	; 0x114e <getvoxel>
    32f6:	88 23       	and	r24, r24
    32f8:	21 f0       	breq	.+8      	; 0x3302 <sendvoxels_rand_z+0xb2>
			{
				// send it to the top
				sendvoxel_z(x,y,0,delay);
    32fa:	81 2f       	mov	r24, r17
    32fc:	60 2f       	mov	r22, r16
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	03 c0       	rjmp	.+6      	; 0x3308 <sendvoxels_rand_z+0xb8>
			} else
			{
				// if its at the top, send it to the bottom
				sendvoxel_z(x,y,7,delay);
    3302:	81 2f       	mov	r24, r17
    3304:	60 2f       	mov	r22, r16
    3306:	47 e0       	ldi	r20, 0x07	; 7
    3308:	95 01       	movw	r18, r10
    330a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <sendvoxel_z>
			}
			delay_ms(wait);
    330e:	c4 01       	movw	r24, r8
    3310:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    3314:	d1 2e       	mov	r13, r17
    3316:	e0 2e       	mov	r14, r16
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
    3318:	f3 94       	inc	r15
    331a:	8f 2d       	mov	r24, r15
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	86 15       	cp	r24, r6
    3320:	97 05       	cpc	r25, r7
    3322:	74 f2       	brlt	.-100    	; 0x32c0 <sendvoxels_rand_z+0x70>
			last_y = y;
			last_x = x;
		}
	}

}
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	1f 91       	pop	r17
    332a:	0f 91       	pop	r16
    332c:	ff 90       	pop	r15
    332e:	ef 90       	pop	r14
    3330:	df 90       	pop	r13
    3332:	bf 90       	pop	r11
    3334:	af 90       	pop	r10
    3336:	9f 90       	pop	r9
    3338:	8f 90       	pop	r8
    333a:	7f 90       	pop	r7
    333c:	6f 90       	pop	r6
    333e:	08 95       	ret

00003340 <effect_blinky2>:
		delay_ms(speed);
	}
}

void effect_blinky2()
{
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
	int i,r;
	fill(0x00);
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    3352:	00 e0       	ldi	r16, 0x00	; 0
    3354:	10 e0       	ldi	r17, 0x00	; 0
		
		i = 750;
		while (i>0)
		{
			fill(0x00);
			delay_ms(751-i);
    3356:	4f ee       	ldi	r20, 0xEF	; 239
    3358:	e4 2e       	mov	r14, r20
    335a:	42 e0       	ldi	r20, 0x02	; 2
    335c:	f4 2e       	mov	r15, r20
    335e:	47 c0       	rjmp	.+142    	; 0x33ee <effect_blinky2+0xae>
	for (r=0;r<2;r++)
	{
		i = 750;
		while (i>0)
		{
			fill(0x00);
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
			delay_ms(i);
    3366:	ce 01       	movw	r24, r28
    3368:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			
			fill(0xff);
    336c:	8f ef       	ldi	r24, 0xFF	; 255
    336e:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
			delay_ms(100);
    3372:	84 e6       	ldi	r24, 0x64	; 100
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			
			i = i - (15+(1000/(i/10)));
    337a:	ce 01       	movw	r24, r28
    337c:	66 ef       	ldi	r22, 0xF6	; 246
    337e:	7f ef       	ldi	r23, 0xFF	; 255
    3380:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3384:	88 ee       	ldi	r24, 0xE8	; 232
    3386:	93 e0       	ldi	r25, 0x03	; 3
    3388:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    338c:	6f 50       	subi	r22, 0x0F	; 15
    338e:	70 40       	sbci	r23, 0x00	; 0
    3390:	c6 0f       	add	r28, r22
    3392:	d7 1f       	adc	r29, r23
	fill(0x00);
	
	for (r=0;r<2;r++)
	{
		i = 750;
		while (i>0)
    3394:	1c 16       	cp	r1, r28
    3396:	1d 06       	cpc	r1, r29
    3398:	1c f3       	brlt	.-58     	; 0x3360 <effect_blinky2+0x20>
			delay_ms(100);
			
			i = i - (15+(1000/(i/10)));
		}
		
		delay_ms(1000);
    339a:	88 ee       	ldi	r24, 0xE8	; 232
    339c:	93 e0       	ldi	r25, 0x03	; 3
    339e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    33a2:	ce ee       	ldi	r28, 0xEE	; 238
    33a4:	d2 e0       	ldi	r29, 0x02	; 2
		
		i = 750;
		while (i>0)
		{
			fill(0x00);
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
			delay_ms(751-i);
    33ac:	c7 01       	movw	r24, r14
    33ae:	8c 1b       	sub	r24, r28
    33b0:	9d 0b       	sbc	r25, r29
    33b2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			
			fill(0xff);
    33b6:	8f ef       	ldi	r24, 0xFF	; 255
    33b8:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
			delay_ms(100);
    33bc:	84 e6       	ldi	r24, 0x64	; 100
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			
			i = i - (15+(1000/(i/10)));
    33c4:	ce 01       	movw	r24, r28
    33c6:	66 ef       	ldi	r22, 0xF6	; 246
    33c8:	7f ef       	ldi	r23, 0xFF	; 255
    33ca:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    33ce:	88 ee       	ldi	r24, 0xE8	; 232
    33d0:	93 e0       	ldi	r25, 0x03	; 3
    33d2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    33d6:	6f 50       	subi	r22, 0x0F	; 15
    33d8:	70 40       	sbci	r23, 0x00	; 0
    33da:	c6 0f       	add	r28, r22
    33dc:	d7 1f       	adc	r29, r23
		}
		
		delay_ms(1000);
		
		i = 750;
		while (i>0)
    33de:	1c 16       	cp	r1, r28
    33e0:	1d 06       	cpc	r1, r29
    33e2:	0c f3       	brlt	.-62     	; 0x33a6 <effect_blinky2+0x66>
void effect_blinky2()
{
	int i,r;
	fill(0x00);
	
	for (r=0;r<2;r++)
    33e4:	0f 5f       	subi	r16, 0xFF	; 255
    33e6:	1f 4f       	sbci	r17, 0xFF	; 255
    33e8:	02 30       	cpi	r16, 0x02	; 2
    33ea:	11 05       	cpc	r17, r1
    33ec:	19 f0       	breq	.+6      	; 0x33f4 <effect_blinky2+0xb4>
    33ee:	ce ee       	ldi	r28, 0xEE	; 238
    33f0:	d2 e0       	ldi	r29, 0x02	; 2
    33f2:	b6 cf       	rjmp	.-148    	; 0x3360 <effect_blinky2+0x20>
			
			i = i - (15+(1000/(i/10)));
		}
	}

}
    33f4:	df 91       	pop	r29
    33f6:	cf 91       	pop	r28
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	ff 90       	pop	r15
    33fe:	ef 90       	pop	r14
    3400:	08 95       	ret

00003402 <effect_wormsqueeze>:
		}
	}
}

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
    3402:	2f 92       	push	r2
    3404:	3f 92       	push	r3
    3406:	4f 92       	push	r4
    3408:	5f 92       	push	r5
    340a:	6f 92       	push	r6
    340c:	7f 92       	push	r7
    340e:	8f 92       	push	r8
    3410:	9f 92       	push	r9
    3412:	af 92       	push	r10
    3414:	bf 92       	push	r11
    3416:	cf 92       	push	r12
    3418:	df 92       	push	r13
    341a:	ef 92       	push	r14
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	2e 97       	sbiw	r28, 0x0e	; 14
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	7c 83       	std	Y+4, r23	; 0x04
    343c:	6b 83       	std	Y+3, r22	; 0x03
    343e:	5e 83       	std	Y+6, r21	; 0x06
    3440:	4d 83       	std	Y+5, r20	; 0x05
    3442:	38 87       	std	Y+8, r19	; 0x08
    3444:	2f 83       	std	Y+7, r18	; 0x07
    3446:	1a 87       	std	Y+10, r17	; 0x0a
    3448:	09 87       	std	Y+9, r16	; 0x09
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
	
	if (direction == -1)
    344a:	4f 5f       	subi	r20, 0xFF	; 255
    344c:	5f 4f       	sbci	r21, 0xFF	; 255
    344e:	21 f4       	brne	.+8      	; 0x3458 <effect_wormsqueeze+0x56>
    3450:	67 e0       	ldi	r22, 0x07	; 7
    3452:	26 2e       	mov	r2, r22
    3454:	31 2c       	mov	r3, r1
    3456:	02 c0       	rjmp	.+4      	; 0x345c <effect_wormsqueeze+0x5a>
    3458:	22 24       	eor	r2, r2
    345a:	33 24       	eor	r3, r3
		origin = 7;
	
	cube_size = 8-(size-1);
    345c:	59 e0       	ldi	r21, 0x09	; 9
    345e:	85 2e       	mov	r8, r21
    3460:	91 2c       	mov	r9, r1
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	9a 81       	ldd	r25, Y+2	; 0x02
    3466:	88 1a       	sub	r8, r24
    3468:	99 0a       	sbc	r9, r25
	
	x = rand()%cube_size;
    346a:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    346e:	b4 01       	movw	r22, r8
    3470:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3474:	7c 01       	movw	r14, r24
	y = rand()%cube_size;
    3476:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    347a:	b4 01       	movw	r22, r8
    347c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3480:	2c 01       	movw	r4, r24
    3482:	66 24       	eor	r6, r6
    3484:	77 24       	eor	r7, r7
    3486:	8f c0       	rjmp	.+286    	; 0x35a6 <effect_wormsqueeze+0x1a4>
	
	for (i=0; i<iterations; i++)
	{
		dx = ((rand()%3)-1);
    3488:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    348c:	8c 01       	movw	r16, r24
		dy = ((rand()%3)-1);
    348e:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3492:	9c 01       	movw	r18, r24
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
	{
		dx = ((rand()%3)-1);
    3494:	08 94       	sec
    3496:	e1 08       	sbc	r14, r1
    3498:	f1 08       	sbc	r15, r1
		dy = ((rand()%3)-1);
	
		if ((x+dx) > 0 && (x+dx) < cube_size)
    349a:	c8 01       	movw	r24, r16
    349c:	63 e0       	ldi	r22, 0x03	; 3
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    34a4:	57 01       	movw	r10, r14
    34a6:	a8 0e       	add	r10, r24
    34a8:	b9 1e       	adc	r11, r25
    34aa:	08 94       	sec
    34ac:	e1 1c       	adc	r14, r1
    34ae:	f1 1c       	adc	r15, r1
    34b0:	1a 14       	cp	r1, r10
    34b2:	1b 04       	cpc	r1, r11
    34b4:	1c f4       	brge	.+6      	; 0x34bc <effect_wormsqueeze+0xba>
    34b6:	a8 14       	cp	r10, r8
    34b8:	b9 04       	cpc	r11, r9
    34ba:	0c f0       	brlt	.+2      	; 0x34be <effect_wormsqueeze+0xbc>
    34bc:	57 01       	movw	r10, r14
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
	{
		dx = ((rand()%3)-1);
		dy = ((rand()%3)-1);
    34be:	08 94       	sec
    34c0:	41 08       	sbc	r4, r1
    34c2:	51 08       	sbc	r5, r1
	
		if ((x+dx) > 0 && (x+dx) < cube_size)
			x += dx;
			
		if ((y+dy) > 0 && (y+dy) < cube_size)
    34c4:	c9 01       	movw	r24, r18
    34c6:	63 e0       	ldi	r22, 0x03	; 3
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    34ce:	62 01       	movw	r12, r4
    34d0:	c8 0e       	add	r12, r24
    34d2:	d9 1e       	adc	r13, r25
    34d4:	08 94       	sec
    34d6:	41 1c       	adc	r4, r1
    34d8:	51 1c       	adc	r5, r1
    34da:	1c 14       	cp	r1, r12
    34dc:	1d 04       	cpc	r1, r13
    34de:	1c f4       	brge	.+6      	; 0x34e6 <effect_wormsqueeze+0xe4>
    34e0:	c8 14       	cp	r12, r8
    34e2:	d9 04       	cpc	r13, r9
    34e4:	0c f0       	brlt	.+2      	; 0x34e8 <effect_wormsqueeze+0xe6>
    34e6:	62 01       	movw	r12, r4
			y += dy;
	
		shift(axis, direction);
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	6d 81       	ldd	r22, Y+5	; 0x05
    34ec:	7e 81       	ldd	r23, Y+6	; 0x06
    34ee:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
    34f2:	1e 86       	std	Y+14, r1	; 0x0e
    34f4:	1d 86       	std	Y+13, r1	; 0x0d
    34f6:	3b c0       	rjmp	.+118    	; 0x356e <effect_wormsqueeze+0x16c>

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
			{
if (xit == 1) {i=iterations;j=size;k=size;break;}
    34f8:	80 91 b3 01 	lds	r24, 0x01B3
    34fc:	90 91 b4 01 	lds	r25, 0x01B4
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	39 f4       	brne	.+14     	; 0x3512 <effect_wormsqueeze+0x110>
    3504:	6f 80       	ldd	r6, Y+7	; 0x07
    3506:	78 84       	ldd	r7, Y+8	; 0x08
    3508:	e9 81       	ldd	r30, Y+1	; 0x01
    350a:	fa 81       	ldd	r31, Y+2	; 0x02
    350c:	fe 87       	std	Y+14, r31	; 0x0e
    350e:	ed 87       	std	Y+13, r30	; 0x0d
    3510:	29 c0       	rjmp	.+82     	; 0x3564 <effect_wormsqueeze+0x162>
				if (axis == AXIS_Z)
    3512:	2b 81       	ldd	r18, Y+3	; 0x03
    3514:	3c 81       	ldd	r19, Y+4	; 0x04
    3516:	2a 37       	cpi	r18, 0x7A	; 122
    3518:	31 05       	cpc	r19, r1
    351a:	21 f4       	brne	.+8      	; 0x3524 <effect_wormsqueeze+0x122>
					setvoxel(x+j,y+k,origin);
    351c:	c2 01       	movw	r24, r4
    351e:	b7 01       	movw	r22, r14
    3520:	a1 01       	movw	r20, r2
    3522:	14 c0       	rjmp	.+40     	; 0x354c <effect_wormsqueeze+0x14a>
					
				if (axis == AXIS_Y)
    3524:	8b 81       	ldd	r24, Y+3	; 0x03
    3526:	9c 81       	ldd	r25, Y+4	; 0x04
    3528:	89 37       	cpi	r24, 0x79	; 121
    352a:	91 05       	cpc	r25, r1
    352c:	21 f4       	brne	.+8      	; 0x3536 <effect_wormsqueeze+0x134>
					setvoxel(x+j,origin,y+k);
    352e:	c2 01       	movw	r24, r4
    3530:	b1 01       	movw	r22, r2
    3532:	a7 01       	movw	r20, r14
    3534:	0b c0       	rjmp	.+22     	; 0x354c <effect_wormsqueeze+0x14a>
					
				if (axis == AXIS_X)
    3536:	eb 81       	ldd	r30, Y+3	; 0x03
    3538:	fc 81       	ldd	r31, Y+4	; 0x04
    353a:	e8 37       	cpi	r30, 0x78	; 120
    353c:	f1 05       	cpc	r31, r1
    353e:	41 f4       	brne	.+16     	; 0x3550 <effect_wormsqueeze+0x14e>
					setvoxel(origin,y+j,x+k);
    3540:	a8 01       	movw	r20, r16
    3542:	4a 0d       	add	r20, r10
    3544:	5b 1d       	adc	r21, r11
    3546:	c1 01       	movw	r24, r2
    3548:	6b 85       	ldd	r22, Y+11	; 0x0b
    354a:	7c 85       	ldd	r23, Y+12	; 0x0c
    354c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		shift(axis, direction);
		

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
    3550:	0f 5f       	subi	r16, 0xFF	; 255
    3552:	1f 4f       	sbci	r17, 0xFF	; 255
    3554:	08 94       	sec
    3556:	e1 1c       	adc	r14, r1
    3558:	f1 1c       	adc	r15, r1
    355a:	29 81       	ldd	r18, Y+1	; 0x01
    355c:	3a 81       	ldd	r19, Y+2	; 0x02
    355e:	02 17       	cp	r16, r18
    3560:	13 07       	cpc	r17, r19
    3562:	54 f2       	brlt	.-108    	; 0x34f8 <effect_wormsqueeze+0xf6>
			y += dy;
	
		shift(axis, direction);
		

		for (j=0; j<size;j++)
    3564:	8d 85       	ldd	r24, Y+13	; 0x0d
    3566:	9e 85       	ldd	r25, Y+14	; 0x0e
    3568:	01 96       	adiw	r24, 0x01	; 1
    356a:	9e 87       	std	Y+14, r25	; 0x0e
    356c:	8d 87       	std	Y+13, r24	; 0x0d
    356e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3570:	fe 85       	ldd	r31, Y+14	; 0x0e
    3572:	29 81       	ldd	r18, Y+1	; 0x01
    3574:	3a 81       	ldd	r19, Y+2	; 0x02
    3576:	e2 17       	cp	r30, r18
    3578:	f3 07       	cpc	r31, r19
    357a:	64 f4       	brge	.+24     	; 0x3594 <effect_wormsqueeze+0x192>
    357c:	76 01       	movw	r14, r12
    357e:	00 e0       	ldi	r16, 0x00	; 0
    3580:	10 e0       	ldi	r17, 0x00	; 0
					
				if (axis == AXIS_Y)
					setvoxel(x+j,origin,y+k);
					
				if (axis == AXIS_X)
					setvoxel(origin,y+j,x+k);
    3582:	ec 0d       	add	r30, r12
    3584:	fd 1d       	adc	r31, r13
    3586:	fc 87       	std	Y+12, r31	; 0x0c
    3588:	eb 87       	std	Y+11, r30	; 0x0b
if (xit == 1) {i=iterations;j=size;k=size;break;}
				if (axis == AXIS_Z)
					setvoxel(x+j,y+k,origin);
					
				if (axis == AXIS_Y)
					setvoxel(x+j,origin,y+k);
    358a:	4d 84       	ldd	r4, Y+13	; 0x0d
    358c:	5e 84       	ldd	r5, Y+14	; 0x0e
    358e:	4a 0c       	add	r4, r10
    3590:	5b 1c       	adc	r5, r11
    3592:	e3 cf       	rjmp	.-58     	; 0x355a <effect_wormsqueeze+0x158>
				if (axis == AXIS_X)
					setvoxel(origin,y+j,x+k);
			}
		}
		
		delay_ms(delay);
    3594:	89 85       	ldd	r24, Y+9	; 0x09
    3596:	9a 85       	ldd	r25, Y+10	; 0x0a
    3598:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	cube_size = 8-(size-1);
	
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
    359c:	08 94       	sec
    359e:	61 1c       	adc	r6, r1
    35a0:	71 1c       	adc	r7, r1
    35a2:	75 01       	movw	r14, r10
    35a4:	26 01       	movw	r4, r12
    35a6:	8f 81       	ldd	r24, Y+7	; 0x07
    35a8:	98 85       	ldd	r25, Y+8	; 0x08
    35aa:	68 16       	cp	r6, r24
    35ac:	79 06       	cpc	r7, r25
    35ae:	0c f4       	brge	.+2      	; 0x35b2 <effect_wormsqueeze+0x1b0>
    35b0:	6b cf       	rjmp	.-298    	; 0x3488 <effect_wormsqueeze+0x86>
			}
		}
		
		delay_ms(delay);
	}
}
    35b2:	2e 96       	adiw	r28, 0x0e	; 14
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	1f 91       	pop	r17
    35c4:	0f 91       	pop	r16
    35c6:	ff 90       	pop	r15
    35c8:	ef 90       	pop	r14
    35ca:	df 90       	pop	r13
    35cc:	cf 90       	pop	r12
    35ce:	bf 90       	pop	r11
    35d0:	af 90       	pop	r10
    35d2:	9f 90       	pop	r9
    35d4:	8f 90       	pop	r8
    35d6:	7f 90       	pop	r7
    35d8:	6f 90       	pop	r6
    35da:	5f 90       	pop	r5
    35dc:	4f 90       	pop	r4
    35de:	3f 90       	pop	r3
    35e0:	2f 90       	pop	r2
    35e2:	08 95       	ret

000035e4 <effect_rain>:
	}
}


void effect_rain (int iterations)
{
    35e4:	af 92       	push	r10
    35e6:	bf 92       	push	r11
    35e8:	cf 92       	push	r12
    35ea:	df 92       	push	r13
    35ec:	ef 92       	push	r14
    35ee:	ff 92       	push	r15
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
    35f8:	5c 01       	movw	r10, r24
    35fa:	cc 24       	eor	r12, r12
    35fc:	dd 24       	eor	r13, r13
    35fe:	48 c0       	rjmp	.+144    	; 0x3690 <effect_rain+0xac>
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
	{
if (xit == 1) {ii = iterations;break;}
    3600:	80 91 b3 01 	lds	r24, 0x01B3
    3604:	90 91 b4 01 	lds	r25, 0x01B4
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	09 f4       	brne	.+2      	; 0x360e <effect_rain+0x2a>
    360c:	45 c0       	rjmp	.+138    	; 0x3698 <effect_rain+0xb4>
		rnd_num = rand()%4;
    360e:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3612:	64 e0       	ldi	r22, 0x04	; 4
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    361a:	ec 01       	movw	r28, r24
    361c:	ee 24       	eor	r14, r14
    361e:	ff 24       	eor	r15, r15
    3620:	22 c0       	rjmp	.+68     	; 0x3666 <effect_rain+0x82>
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%8;
    3622:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3626:	8c 01       	movw	r16, r24
			rnd_y = rand()%8;
    3628:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    362c:	9c 01       	movw	r18, r24
			setvoxel(rnd_x,rnd_y,7);
    362e:	c8 01       	movw	r24, r16
    3630:	68 e0       	ldi	r22, 0x08	; 8
    3632:	70 e0       	ldi	r23, 0x00	; 0
    3634:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3638:	fc 01       	movw	r30, r24
    363a:	c9 01       	movw	r24, r18
    363c:	68 e0       	ldi	r22, 0x08	; 8
    363e:	70 e0       	ldi	r23, 0x00	; 0
    3640:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3644:	bc 01       	movw	r22, r24
    3646:	cf 01       	movw	r24, r30
    3648:	47 e0       	ldi	r20, 0x07	; 7
    364a:	50 e0       	ldi	r21, 0x00	; 0
    364c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
if (xit == 1) {ii = iterations;break;}
    3650:	80 91 b3 01 	lds	r24, 0x01B3
    3654:	90 91 b4 01 	lds	r25, 0x01B4
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	11 f4       	brne	.+4      	; 0x3660 <effect_rain+0x7c>
    365c:	65 01       	movw	r12, r10
    365e:	06 c0       	rjmp	.+12     	; 0x366c <effect_rain+0x88>
	for (ii=0;ii<iterations;ii++)
	{
if (xit == 1) {ii = iterations;break;}
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
    3660:	08 94       	sec
    3662:	e1 1c       	adc	r14, r1
    3664:	f1 1c       	adc	r15, r1
    3666:	ec 16       	cp	r14, r28
    3668:	fd 06       	cpc	r15, r29
    366a:	dc f2       	brlt	.-74     	; 0x3622 <effect_rain+0x3e>
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
if (xit == 1) {ii = iterations;break;}
		}
		
		delay_ms(1000);
    366c:	88 ee       	ldi	r24, 0xE8	; 232
    366e:	93 e0       	ldi	r25, 0x03	; 3
    3670:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		shift(AXIS_Z,-1);
    3674:	8a e7       	ldi	r24, 0x7A	; 122
    3676:	6f ef       	ldi	r22, 0xFF	; 255
    3678:	7f ef       	ldi	r23, 0xFF	; 255
    367a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
if (xit == 1) {ii = iterations;break;}
    367e:	80 91 b3 01 	lds	r24, 0x01B3
    3682:	90 91 b4 01 	lds	r25, 0x01B4
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	39 f0       	breq	.+14     	; 0x3698 <effect_rain+0xb4>
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    368a:	08 94       	sec
    368c:	c1 1c       	adc	r12, r1
    368e:	d1 1c       	adc	r13, r1
    3690:	ca 14       	cp	r12, r10
    3692:	db 04       	cpc	r13, r11
    3694:	0c f4       	brge	.+2      	; 0x3698 <effect_rain+0xb4>
    3696:	b4 cf       	rjmp	.-152    	; 0x3600 <effect_rain+0x1c>
		
		delay_ms(1000);
		shift(AXIS_Z,-1);
if (xit == 1) {ii = iterations;break;}
	}
}
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	bf 90       	pop	r11
    36aa:	af 90       	pop	r10
    36ac:	08 95       	ret

000036ae <effect_stringfly2>:

}


void effect_stringfly2(char * str)
{
    36ae:	4f 92       	push	r4
    36b0:	5f 92       	push	r5
    36b2:	6f 92       	push	r6
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <effect_stringfly2+0x22>
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <effect_stringfly2+0x24>
    36d2:	0f 92       	push	r0
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	6c 01       	movw	r12, r24
	int x,y,i;
	unsigned char chr[5];
	
	while ((*str) && (xit == 0))
	{
		font_getchar(*str++, chr);
    36da:	3e 01       	movw	r6, r28
    36dc:	08 94       	sec
    36de:	61 1c       	adc	r6, r1
    36e0:	71 1c       	adc	r7, r1
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80>>y)))
    36e2:	e0 e8       	ldi	r30, 0x80	; 128
    36e4:	4e 2e       	mov	r4, r30
    36e6:	51 2c       	mov	r5, r1
    36e8:	4b c0       	rjmp	.+150    	; 0x3780 <effect_stringfly2+0xd2>
	int x,y,i;
	unsigned char chr[5];
	
	while ((*str) && (xit == 0))
	{
		font_getchar(*str++, chr);
    36ea:	82 2f       	mov	r24, r18
    36ec:	b3 01       	movw	r22, r6
    36ee:	0e 94 55 31 	call	0x62aa	; 0x62aa <font_getchar>
    36f2:	ee 24       	eor	r14, r14
    36f4:	ff 24       	eor	r15, r15
    36f6:	26 c0       	rjmp	.+76     	; 0x3744 <effect_stringfly2+0x96>
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80>>y)))
    36f8:	92 01       	movw	r18, r4
    36fa:	00 2e       	mov	r0, r16
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <effect_stringfly2+0x54>
    36fe:	35 95       	asr	r19
    3700:	27 95       	ror	r18
    3702:	0a 94       	dec	r0
    3704:	e2 f7       	brpl	.-8      	; 0x36fe <effect_stringfly2+0x50>
    3706:	f4 01       	movw	r30, r8
    3708:	80 81       	ld	r24, Z
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	28 23       	and	r18, r24
    370e:	39 23       	and	r19, r25
    3710:	23 2b       	or	r18, r19
    3712:	61 f0       	breq	.+24     	; 0x372c <effect_stringfly2+0x7e>
				{
					setvoxel(7,x+2,y);
    3714:	87 e0       	ldi	r24, 0x07	; 7
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	b5 01       	movw	r22, r10
    371a:	a8 01       	movw	r20, r16
    371c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
					setvoxel(6,x+2,y);
    3720:	86 e0       	ldi	r24, 0x06	; 6
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	b5 01       	movw	r22, r10
    3726:	a8 01       	movw	r20, r16
    3728:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
    372c:	0f 5f       	subi	r16, 0xFF	; 255
    372e:	1f 4f       	sbci	r17, 0xFF	; 255
    3730:	08 30       	cpi	r16, 0x08	; 8
    3732:	11 05       	cpc	r17, r1
    3734:	09 f7       	brne	.-62     	; 0x36f8 <effect_stringfly2+0x4a>
	while ((*str) && (xit == 0))
	{
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    3736:	08 94       	sec
    3738:	e1 1c       	adc	r14, r1
    373a:	f1 1c       	adc	r15, r1
    373c:	f5 e0       	ldi	r31, 0x05	; 5
    373e:	ef 16       	cp	r14, r31
    3740:	f1 04       	cpc	r15, r1
    3742:	59 f0       	breq	.+22     	; 0x375a <effect_stringfly2+0xac>
    3744:	00 e0       	ldi	r16, 0x00	; 0
    3746:	10 e0       	ldi	r17, 0x00	; 0
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80>>y)))
    3748:	43 01       	movw	r8, r6
    374a:	8e 0c       	add	r8, r14
    374c:	9f 1c       	adc	r9, r15
    374e:	72 e0       	ldi	r23, 0x02	; 2
    3750:	a7 2e       	mov	r10, r23
    3752:	b1 2c       	mov	r11, r1
    3754:	ae 0c       	add	r10, r14
    3756:	bf 1c       	adc	r11, r15
    3758:	cf cf       	rjmp	.-98     	; 0x36f8 <effect_stringfly2+0x4a>
	while ((*str) && (xit == 0))
	{
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    375a:	00 e0       	ldi	r16, 0x00	; 0
    375c:	10 e0       	ldi	r17, 0x00	; 0
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i<6; i++)
		{

			delay_ms(1000);
    375e:	88 ee       	ldi	r24, 0xE8	; 232
    3760:	93 e0       	ldi	r25, 0x03	; 3
    3762:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
            shift(AXIS_X,-1);
    3766:	88 e7       	ldi	r24, 0x78	; 120
    3768:	6f ef       	ldi	r22, 0xFF	; 255
    376a:	7f ef       	ldi	r23, 0xFF	; 255
    376c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
			}
		}
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i<6; i++)
    3770:	0f 5f       	subi	r16, 0xFF	; 255
    3772:	1f 4f       	sbci	r17, 0xFF	; 255
    3774:	06 30       	cpi	r16, 0x06	; 6
    3776:	11 05       	cpc	r17, r1
    3778:	91 f7       	brne	.-28     	; 0x375e <effect_stringfly2+0xb0>
	int x,y,i;
	unsigned char chr[5];
	
	while ((*str) && (xit == 0))
	{
		font_getchar(*str++, chr);
    377a:	08 94       	sec
    377c:	c1 1c       	adc	r12, r1
    377e:	d1 1c       	adc	r13, r1
void effect_stringfly2(char * str)
{
	int x,y,i;
	unsigned char chr[5];
	
	while ((*str) && (xit == 0))
    3780:	f6 01       	movw	r30, r12
    3782:	20 81       	ld	r18, Z
    3784:	22 23       	and	r18, r18
    3786:	39 f0       	breq	.+14     	; 0x3796 <effect_stringfly2+0xe8>
    3788:	80 91 b3 01 	lds	r24, 0x01B3
    378c:	90 91 b4 01 	lds	r25, 0x01B4
    3790:	89 2b       	or	r24, r25
    3792:	09 f4       	brne	.+2      	; 0x3796 <effect_stringfly2+0xe8>
    3794:	aa cf       	rjmp	.-172    	; 0x36ea <effect_stringfly2+0x3c>
    3796:	00 e0       	ldi	r16, 0x00	; 0
    3798:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
    // Shift the last character out of the cube.
	for (i = 0; i<8; i++)
	{
		delay_ms(1000);
    379a:	88 ee       	ldi	r24, 0xE8	; 232
    379c:	93 e0       	ldi	r25, 0x03	; 3
    379e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
        shift(AXIS_X,-1);
    37a2:	88 e7       	ldi	r24, 0x78	; 120
    37a4:	6f ef       	ldi	r22, 0xFF	; 255
    37a6:	7f ef       	ldi	r23, 0xFF	; 255
    37a8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
			delay_ms(1000);
            shift(AXIS_X,-1);
		}
	}
    // Shift the last character out of the cube.
	for (i = 0; i<8; i++)
    37ac:	0f 5f       	subi	r16, 0xFF	; 255
    37ae:	1f 4f       	sbci	r17, 0xFF	; 255
    37b0:	08 30       	cpi	r16, 0x08	; 8
    37b2:	11 05       	cpc	r17, r1
    37b4:	91 f7       	brne	.-28     	; 0x379a <effect_stringfly2+0xec>
	{
		delay_ms(1000);
        shift(AXIS_X,-1);
	}
	
}
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	1f 91       	pop	r17
    37c6:	0f 91       	pop	r16
    37c8:	ff 90       	pop	r15
    37ca:	ef 90       	pop	r14
    37cc:	df 90       	pop	r13
    37ce:	cf 90       	pop	r12
    37d0:	bf 90       	pop	r11
    37d2:	af 90       	pop	r10
    37d4:	9f 90       	pop	r9
    37d6:	8f 90       	pop	r8
    37d8:	7f 90       	pop	r7
    37da:	6f 90       	pop	r6
    37dc:	5f 90       	pop	r5
    37de:	4f 90       	pop	r4
    37e0:	08 95       	ret

000037e2 <squarespiral2>:

}
}

void squarespiral2 (int iterations, int Delay)
{
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	ef 92       	push	r14
    37ec:	ff 92       	push	r15
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	5c 01       	movw	r10, r24
    37f8:	6b 01       	movw	r12, r22
    37fa:	ee 24       	eor	r14, r14
    37fc:	ff 24       	eor	r15, r15
    37fe:	5c c0       	rjmp	.+184    	; 0x38b8 <squarespiral2+0xd6>
int loc = 0;
int iter = 0;
while (iter <= iterations)
{
if (xit == 1) {iter = iterations;break;}
    3800:	80 91 b3 01 	lds	r24, 0x01B3
    3804:	90 91 b4 01 	lds	r25, 0x01B4
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	09 f4       	brne	.+2      	; 0x380e <squarespiral2+0x2c>
    380c:	59 c0       	rjmp	.+178    	; 0x38c0 <squarespiral2+0xde>
    380e:	c0 e0       	ldi	r28, 0x00	; 0
    3810:	d0 e0       	ldi	r29, 0x00	; 0
for (loc =0;loc < 7; loc ++)
	{
if (xit == 1) {break;}
    3812:	80 91 b3 01 	lds	r24, 0x01B3
    3816:	90 91 b4 01 	lds	r25, 0x01B4
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	09 f4       	brne	.+2      	; 0x3820 <squarespiral2+0x3e>
    381e:	4c c0       	rjmp	.+152    	; 0x38b8 <squarespiral2+0xd6>
		shift (AXIS_Z,-1);
    3820:	8a e7       	ldi	r24, 0x7A	; 122
    3822:	6f ef       	ldi	r22, 0xFF	; 255
    3824:	7f ef       	ldi	r23, 0xFF	; 255
    3826:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
		setvoxel (0,loc,7);
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	be 01       	movw	r22, r28
    3830:	47 e0       	ldi	r20, 0x07	; 7
    3832:	50 e0       	ldi	r21, 0x00	; 0
    3834:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel (loc,7,7);
    3838:	ce 01       	movw	r24, r28
    383a:	67 e0       	ldi	r22, 0x07	; 7
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	47 e0       	ldi	r20, 0x07	; 7
    3840:	50 e0       	ldi	r21, 0x00	; 0
    3842:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    3846:	07 e0       	ldi	r16, 0x07	; 7
    3848:	10 e0       	ldi	r17, 0x00	; 0
    384a:	0c 1b       	sub	r16, r28
    384c:	1d 0b       	sbc	r17, r29
		setvoxel (7,7-loc,7);
    384e:	87 e0       	ldi	r24, 0x07	; 7
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	b8 01       	movw	r22, r16
    3854:	47 e0       	ldi	r20, 0x07	; 7
    3856:	50 e0       	ldi	r21, 0x00	; 0
    3858:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel (7-loc,0,7);
    385c:	c8 01       	movw	r24, r16
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	47 e0       	ldi	r20, 0x07	; 7
    3864:	50 e0       	ldi	r21, 0x00	; 0
    3866:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel (0,7-loc,7);
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	b8 01       	movw	r22, r16
    3870:	47 e0       	ldi	r20, 0x07	; 7
    3872:	50 e0       	ldi	r21, 0x00	; 0
    3874:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel (7-loc,7,7);
    3878:	c8 01       	movw	r24, r16
    387a:	67 e0       	ldi	r22, 0x07	; 7
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	47 e0       	ldi	r20, 0x07	; 7
    3880:	50 e0       	ldi	r21, 0x00	; 0
    3882:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel (7,loc,7);
    3886:	87 e0       	ldi	r24, 0x07	; 7
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	be 01       	movw	r22, r28
    388c:	47 e0       	ldi	r20, 0x07	; 7
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel (loc,0,7);
    3894:	ce 01       	movw	r24, r28
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	47 e0       	ldi	r20, 0x07	; 7
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		delay_ms (Delay);
    38a2:	c6 01       	movw	r24, r12
    38a4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		iter++;
    38a8:	08 94       	sec
    38aa:	e1 1c       	adc	r14, r1
    38ac:	f1 1c       	adc	r15, r1
int loc = 0;
int iter = 0;
while (iter <= iterations)
{
if (xit == 1) {iter = iterations;break;}
for (loc =0;loc < 7; loc ++)
    38ae:	21 96       	adiw	r28, 0x01	; 1
    38b0:	c7 30       	cpi	r28, 0x07	; 7
    38b2:	d1 05       	cpc	r29, r1
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <squarespiral2+0xd6>
    38b6:	ad cf       	rjmp	.-166    	; 0x3812 <squarespiral2+0x30>

void squarespiral2 (int iterations, int Delay)
{
int loc = 0;
int iter = 0;
while (iter <= iterations)
    38b8:	ae 14       	cp	r10, r14
    38ba:	bf 04       	cpc	r11, r15
    38bc:	0c f0       	brlt	.+2      	; 0x38c0 <squarespiral2+0xde>
    38be:	a0 cf       	rjmp	.-192    	; 0x3800 <squarespiral2+0x1e>
		delay_ms (Delay);
		iter++;
	}
loc = 0;
}
}
    38c0:	df 91       	pop	r29
    38c2:	cf 91       	pop	r28
    38c4:	1f 91       	pop	r17
    38c6:	0f 91       	pop	r16
    38c8:	ff 90       	pop	r15
    38ca:	ef 90       	pop	r14
    38cc:	df 90       	pop	r13
    38ce:	cf 90       	pop	r12
    38d0:	bf 90       	pop	r11
    38d2:	af 90       	pop	r10
    38d4:	08 95       	ret

000038d6 <squarespiral>:




void squarespiral (int iterations, int Delay)
{
    38d6:	af 92       	push	r10
    38d8:	bf 92       	push	r11
    38da:	cf 92       	push	r12
    38dc:	df 92       	push	r13
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	5c 01       	movw	r10, r24
    38ec:	6b 01       	movw	r12, r22
    38ee:	ee 24       	eor	r14, r14
    38f0:	ff 24       	eor	r15, r15
    38f2:	44 c0       	rjmp	.+136    	; 0x397c <squarespiral+0xa6>
int loc = 0;
int iter = 0;
while (iter <= iterations)
{
if (xit == 1) {break;}
    38f4:	80 91 b3 01 	lds	r24, 0x01B3
    38f8:	90 91 b4 01 	lds	r25, 0x01B4
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	09 f4       	brne	.+2      	; 0x3902 <squarespiral+0x2c>
    3900:	41 c0       	rjmp	.+130    	; 0x3984 <squarespiral+0xae>
    3902:	c0 e0       	ldi	r28, 0x00	; 0
    3904:	d0 e0       	ldi	r29, 0x00	; 0
for (loc =0;loc < 7; loc ++)
{
if (xit == 1) {break;}
    3906:	80 91 b3 01 	lds	r24, 0x01B3
    390a:	90 91 b4 01 	lds	r25, 0x01B4
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	a9 f1       	breq	.+106    	; 0x397c <squarespiral+0xa6>
shift (AXIS_Z,-1);
    3912:	8a e7       	ldi	r24, 0x7A	; 122
    3914:	6f ef       	ldi	r22, 0xFF	; 255
    3916:	7f ef       	ldi	r23, 0xFF	; 255
    3918:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
setvoxel (0,loc,7);
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	be 01       	movw	r22, r28
    3922:	47 e0       	ldi	r20, 0x07	; 7
    3924:	50 e0       	ldi	r21, 0x00	; 0
    3926:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
setvoxel (loc,7,7);
    392a:	ce 01       	movw	r24, r28
    392c:	67 e0       	ldi	r22, 0x07	; 7
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	47 e0       	ldi	r20, 0x07	; 7
    3932:	50 e0       	ldi	r21, 0x00	; 0
    3934:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    3938:	07 e0       	ldi	r16, 0x07	; 7
    393a:	10 e0       	ldi	r17, 0x00	; 0
    393c:	0c 1b       	sub	r16, r28
    393e:	1d 0b       	sbc	r17, r29
setvoxel (7,7-loc,7);
    3940:	87 e0       	ldi	r24, 0x07	; 7
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	b8 01       	movw	r22, r16
    3946:	47 e0       	ldi	r20, 0x07	; 7
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
setvoxel (7-loc,0,7);
    394e:	c8 01       	movw	r24, r16
    3950:	60 e0       	ldi	r22, 0x00	; 0
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	47 e0       	ldi	r20, 0x07	; 7
    3956:	50 e0       	ldi	r21, 0x00	; 0
    3958:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>

delay_ms (Delay);
    395c:	c6 01       	movw	r24, r12
    395e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
if (xit == 1) {break;}
    3962:	80 91 b3 01 	lds	r24, 0x01B3
    3966:	90 91 b4 01 	lds	r25, 0x01B4
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	39 f0       	breq	.+14     	; 0x397c <squarespiral+0xa6>
iter++;
    396e:	08 94       	sec
    3970:	e1 1c       	adc	r14, r1
    3972:	f1 1c       	adc	r15, r1
int loc = 0;
int iter = 0;
while (iter <= iterations)
{
if (xit == 1) {break;}
for (loc =0;loc < 7; loc ++)
    3974:	21 96       	adiw	r28, 0x01	; 1
    3976:	c7 30       	cpi	r28, 0x07	; 7
    3978:	d1 05       	cpc	r29, r1
    397a:	29 f6       	brne	.-118    	; 0x3906 <squarespiral+0x30>

void squarespiral (int iterations, int Delay)
{
int loc = 0;
int iter = 0;
while (iter <= iterations)
    397c:	ae 14       	cp	r10, r14
    397e:	bf 04       	cpc	r11, r15
    3980:	0c f0       	brlt	.+2      	; 0x3984 <squarespiral+0xae>
    3982:	b8 cf       	rjmp	.-144    	; 0x38f4 <squarespiral+0x1e>
iter++;
}
loc = 0;

}
}
    3984:	df 91       	pop	r29
    3986:	cf 91       	pop	r28
    3988:	1f 91       	pop	r17
    398a:	0f 91       	pop	r16
    398c:	ff 90       	pop	r15
    398e:	ef 90       	pop	r14
    3990:	df 90       	pop	r13
    3992:	cf 90       	pop	r12
    3994:	bf 90       	pop	r11
    3996:	af 90       	pop	r10
    3998:	08 95       	ret

0000399a <boingboing>:
}


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
{
    399a:	2f 92       	push	r2
    399c:	3f 92       	push	r3
    399e:	4f 92       	push	r4
    39a0:	5f 92       	push	r5
    39a2:	6f 92       	push	r6
    39a4:	7f 92       	push	r7
    39a6:	8f 92       	push	r8
    39a8:	9f 92       	push	r9
    39aa:	af 92       	push	r10
    39ac:	bf 92       	push	r11
    39ae:	cf 92       	push	r12
    39b0:	df 92       	push	r13
    39b2:	ef 92       	push	r14
    39b4:	ff 92       	push	r15
    39b6:	0f 93       	push	r16
    39b8:	1f 93       	push	r17
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	e8 97       	sbiw	r28, 0x38	; 56
    39c4:	0f b6       	in	r0, 0x3f	; 63
    39c6:	f8 94       	cli
    39c8:	de bf       	out	0x3e, r29	; 62
    39ca:	0f be       	out	0x3f, r0	; 63
    39cc:	cd bf       	out	0x3d, r28	; 61
    39ce:	9a ab       	std	Y+50, r25	; 0x32
    39d0:	89 ab       	std	Y+49, r24	; 0x31
    39d2:	7c ab       	std	Y+52, r23	; 0x34
    39d4:	6b ab       	std	Y+51, r22	; 0x33
    39d6:	22 2e       	mov	r2, r18
	fill(0x00);		// Blank the cube
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
	int x, y, z;		// Current coordinates for the point
	int dx, dy, dz;	// Direction of movement
	int lol, i;		// lol?
	unsigned char crash_x, crash_y, crash_z;

	y = rand()%8;
    39de:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    39e2:	68 e0       	ldi	r22, 0x08	; 8
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    39ea:	7c 01       	movw	r14, r24
    39ec:	3c 01       	movw	r6, r24
	x = rand()%8;
    39ee:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    39f2:	68 e0       	ldi	r22, 0x08	; 8
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    39fa:	8c 01       	movw	r16, r24
    39fc:	2c 01       	movw	r4, r24
	z = rand()%8;
    39fe:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3a02:	68 e0       	ldi	r22, 0x08	; 8
    3a04:	70 e0       	ldi	r23, 0x00	; 0
    3a06:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3a0a:	38 2f       	mov	r19, r24
    3a0c:	29 2f       	mov	r18, r25
    3a0e:	6c 01       	movw	r12, r24
    3a10:	fe 01       	movw	r30, r28
    3a12:	31 96       	adiw	r30, 0x01	; 1
}


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
{
    3a14:	ce 01       	movw	r24, r28
    3a16:	c1 96       	adiw	r24, 0x31	; 49
    3a18:	9e ab       	std	Y+54, r25	; 0x36
    3a1a:	8d ab       	std	Y+53, r24	; 0x35

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
	{
		snake[i][0] = x;
    3a1c:	00 83       	st	Z, r16
    3a1e:	11 83       	std	Z+1, r17	; 0x01
		snake[i][1] = y;
    3a20:	e2 82       	std	Z+2, r14	; 0x02
    3a22:	f3 82       	std	Z+3, r15	; 0x03
		snake[i][2] = z;
    3a24:	34 83       	std	Z+4, r19	; 0x04
    3a26:	25 83       	std	Z+5, r18	; 0x05
    3a28:	36 96       	adiw	r30, 0x06	; 6
	x = rand()%8;
	z = rand()%8;

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
    3a2a:	8d a9       	ldd	r24, Y+53	; 0x35
    3a2c:	9e a9       	ldd	r25, Y+54	; 0x36
    3a2e:	e8 17       	cp	r30, r24
    3a30:	f9 07       	cpc	r31, r25
    3a32:	a1 f7       	brne	.-24     	; 0x3a1c <boingboing+0x82>
    3a34:	f1 e0       	ldi	r31, 0x01	; 1
    3a36:	ef 2e       	mov	r14, r31
    3a38:	f1 2c       	mov	r15, r1
    3a3a:	e1 e0       	ldi	r30, 0x01	; 1
    3a3c:	8e 2e       	mov	r8, r30
    3a3e:	91 2c       	mov	r9, r1
    3a40:	71 e0       	ldi	r23, 0x01	; 1
    3a42:	a7 2e       	mov	r10, r23
    3a44:	b1 2c       	mov	r11, r1
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>=0;i--)
    3a46:	fe 01       	movw	r30, r28
    3a48:	3b 97       	sbiw	r30, 0x0b	; 11
    3a4a:	f8 af       	std	Y+56, r31	; 0x38
    3a4c:	ef ab       	std	Y+55, r30	; 0x37
    3a4e:	4b c2       	rjmp	.+1174   	; 0x3ee6 <boingboing+0x54c>
		crash_y = 0;
		crash_z = 0;
	

		// Let's mix things up a little:
		if (rand()%3 == 0)
    3a50:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3a54:	63 e0       	ldi	r22, 0x03	; 3
    3a56:	70 e0       	ldi	r23, 0x00	; 0
    3a58:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3a5c:	89 2b       	or	r24, r25
    3a5e:	71 f5       	brne	.+92     	; 0x3abc <boingboing+0x122>
		{
			// Pick a random axis, and set the speed to a random number.
			lol = rand()%3;
    3a60:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3a64:	63 e0       	ldi	r22, 0x03	; 3
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
			if (lol == 0)
    3a6c:	00 97       	sbiw	r24, 0x00	; 0
    3a6e:	59 f4       	brne	.+22     	; 0x3a86 <boingboing+0xec>
				dx = rand()%3 - 1;
    3a70:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3a74:	63 e0       	ldi	r22, 0x03	; 3
    3a76:	70 e0       	ldi	r23, 0x00	; 0
    3a78:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3a7c:	7c 01       	movw	r14, r24
    3a7e:	08 94       	sec
    3a80:	e1 08       	sbc	r14, r1
    3a82:	f1 08       	sbc	r15, r1
    3a84:	1b c0       	rjmp	.+54     	; 0x3abc <boingboing+0x122>
			
			if (lol == 1)
    3a86:	81 30       	cpi	r24, 0x01	; 1
    3a88:	91 05       	cpc	r25, r1
    3a8a:	59 f4       	brne	.+22     	; 0x3aa2 <boingboing+0x108>
				dy = rand()%3 - 1;
    3a8c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3a90:	63 e0       	ldi	r22, 0x03	; 3
    3a92:	70 e0       	ldi	r23, 0x00	; 0
    3a94:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3a98:	4c 01       	movw	r8, r24
    3a9a:	08 94       	sec
    3a9c:	81 08       	sbc	r8, r1
    3a9e:	91 08       	sbc	r9, r1
    3aa0:	0d c0       	rjmp	.+26     	; 0x3abc <boingboing+0x122>
				
			if (lol == 2)
    3aa2:	82 30       	cpi	r24, 0x02	; 2
    3aa4:	91 05       	cpc	r25, r1
    3aa6:	51 f4       	brne	.+20     	; 0x3abc <boingboing+0x122>
				dz = rand()%3 - 1;
    3aa8:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3aac:	63 e0       	ldi	r22, 0x03	; 3
    3aae:	70 e0       	ldi	r23, 0x00	; 0
    3ab0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3ab4:	5c 01       	movw	r10, r24
    3ab6:	08 94       	sec
    3ab8:	a1 08       	sbc	r10, r1
    3aba:	b1 08       	sbc	r11, r1
		}

	    // The point has reached 0 on the x-axis and is trying to go to -1
        // aka a crash
		if (dx == -1 && x == 0)
    3abc:	ff ef       	ldi	r31, 0xFF	; 255
    3abe:	ef 16       	cp	r14, r31
    3ac0:	ff ef       	ldi	r31, 0xFF	; 255
    3ac2:	ff 06       	cpc	r15, r31
    3ac4:	99 f4       	brne	.+38     	; 0x3aec <boingboing+0x152>
    3ac6:	41 14       	cp	r4, r1
    3ac8:	51 04       	cpc	r5, r1
    3aca:	81 f4       	brne	.+32     	; 0x3aec <boingboing+0x152>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    3acc:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3ad0:	63 e0       	ldi	r22, 0x03	; 3
    3ad2:	70 e0       	ldi	r23, 0x00	; 0
    3ad4:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	19 f0       	breq	.+6      	; 0x3ae2 <boingboing+0x148>
    3adc:	ee 24       	eor	r14, r14
    3ade:	ff 24       	eor	r15, r15
    3ae0:	03 c0       	rjmp	.+6      	; 0x3ae8 <boingboing+0x14e>
    3ae2:	61 e0       	ldi	r22, 0x01	; 1
    3ae4:	e6 2e       	mov	r14, r22
    3ae6:	f1 2c       	mov	r15, r1
    3ae8:	11 e0       	ldi	r17, 0x01	; 1
    3aea:	01 c0       	rjmp	.+2      	; 0x3aee <boingboing+0x154>
    3aec:	10 e0       	ldi	r17, 0x00	; 0
				dx = 0;
			}
		}
		
        // y axis 0 crash
		if (dy == -1 && y == 0)
    3aee:	8f ef       	ldi	r24, 0xFF	; 255
    3af0:	88 16       	cp	r8, r24
    3af2:	8f ef       	ldi	r24, 0xFF	; 255
    3af4:	98 06       	cpc	r9, r24
    3af6:	99 f4       	brne	.+38     	; 0x3b1e <boingboing+0x184>
    3af8:	61 14       	cp	r6, r1
    3afa:	71 04       	cpc	r7, r1
    3afc:	81 f4       	brne	.+32     	; 0x3b1e <boingboing+0x184>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    3afe:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3b02:	63 e0       	ldi	r22, 0x03	; 3
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3b0a:	01 97       	sbiw	r24, 0x01	; 1
    3b0c:	19 f0       	breq	.+6      	; 0x3b14 <boingboing+0x17a>
    3b0e:	88 24       	eor	r8, r8
    3b10:	99 24       	eor	r9, r9
    3b12:	03 c0       	rjmp	.+6      	; 0x3b1a <boingboing+0x180>
    3b14:	51 e0       	ldi	r21, 0x01	; 1
    3b16:	85 2e       	mov	r8, r21
    3b18:	91 2c       	mov	r9, r1
    3b1a:	01 e0       	ldi	r16, 0x01	; 1
    3b1c:	01 c0       	rjmp	.+2      	; 0x3b20 <boingboing+0x186>
    3b1e:	00 e0       	ldi	r16, 0x00	; 0
				dy = 0;
			}
		}
		
        // z axis 0 crash
		if (dz == -1 && z == 0)
    3b20:	9f ef       	ldi	r25, 0xFF	; 255
    3b22:	a9 16       	cp	r10, r25
    3b24:	9f ef       	ldi	r25, 0xFF	; 255
    3b26:	b9 06       	cpc	r11, r25
    3b28:	a1 f4       	brne	.+40     	; 0x3b52 <boingboing+0x1b8>
    3b2a:	c1 14       	cp	r12, r1
    3b2c:	d1 04       	cpc	r13, r1
    3b2e:	89 f4       	brne	.+34     	; 0x3b52 <boingboing+0x1b8>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    3b30:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3b34:	63 e0       	ldi	r22, 0x03	; 3
    3b36:	70 e0       	ldi	r23, 0x00	; 0
    3b38:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3b3c:	01 97       	sbiw	r24, 0x01	; 1
    3b3e:	19 f0       	breq	.+6      	; 0x3b46 <boingboing+0x1ac>
    3b40:	aa 24       	eor	r10, r10
    3b42:	bb 24       	eor	r11, r11
    3b44:	03 c0       	rjmp	.+6      	; 0x3b4c <boingboing+0x1b2>
    3b46:	41 e0       	ldi	r20, 0x01	; 1
    3b48:	a4 2e       	mov	r10, r20
    3b4a:	b1 2c       	mov	r11, r1
    3b4c:	33 24       	eor	r3, r3
    3b4e:	33 94       	inc	r3
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <boingboing+0x1ba>
    3b52:	33 24       	eor	r3, r3
				dz = 0;
			}
		}
	    
        // x axis 7 crash
		if (dx == 1 && x == 7)
    3b54:	e1 e0       	ldi	r30, 0x01	; 1
    3b56:	ee 16       	cp	r14, r30
    3b58:	f1 04       	cpc	r15, r1
    3b5a:	99 f4       	brne	.+38     	; 0x3b82 <boingboing+0x1e8>
    3b5c:	f7 e0       	ldi	r31, 0x07	; 7
    3b5e:	4f 16       	cp	r4, r31
    3b60:	51 04       	cpc	r5, r1
    3b62:	79 f4       	brne	.+30     	; 0x3b82 <boingboing+0x1e8>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    3b64:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3b68:	63 e0       	ldi	r22, 0x03	; 3
    3b6a:	70 e0       	ldi	r23, 0x00	; 0
    3b6c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	19 f0       	breq	.+6      	; 0x3b7a <boingboing+0x1e0>
    3b74:	ee 24       	eor	r14, r14
    3b76:	ff 24       	eor	r15, r15
    3b78:	03 c0       	rjmp	.+6      	; 0x3b80 <boingboing+0x1e6>
    3b7a:	ee 24       	eor	r14, r14
    3b7c:	ea 94       	dec	r14
    3b7e:	fe 2c       	mov	r15, r14
    3b80:	11 e0       	ldi	r17, 0x01	; 1
				dx = 0;
			}
		}
		
        // y axis 7 crash
		if (dy == 1 && y == 7)
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	88 16       	cp	r8, r24
    3b86:	91 04       	cpc	r9, r1
    3b88:	99 f4       	brne	.+38     	; 0x3bb0 <boingboing+0x216>
    3b8a:	97 e0       	ldi	r25, 0x07	; 7
    3b8c:	69 16       	cp	r6, r25
    3b8e:	71 04       	cpc	r7, r1
    3b90:	79 f4       	brne	.+30     	; 0x3bb0 <boingboing+0x216>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    3b92:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3b96:	63 e0       	ldi	r22, 0x03	; 3
    3b98:	70 e0       	ldi	r23, 0x00	; 0
    3b9a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	19 f0       	breq	.+6      	; 0x3ba8 <boingboing+0x20e>
    3ba2:	88 24       	eor	r8, r8
    3ba4:	99 24       	eor	r9, r9
    3ba6:	03 c0       	rjmp	.+6      	; 0x3bae <boingboing+0x214>
    3ba8:	88 24       	eor	r8, r8
    3baa:	8a 94       	dec	r8
    3bac:	98 2c       	mov	r9, r8
    3bae:	01 e0       	ldi	r16, 0x01	; 1
				dy = 0;
			}
		}
		
        // z azis 7 crash
		if (dz == 1 && z == 7)
    3bb0:	e1 e0       	ldi	r30, 0x01	; 1
    3bb2:	ae 16       	cp	r10, r30
    3bb4:	b1 04       	cpc	r11, r1
    3bb6:	a1 f4       	brne	.+40     	; 0x3be0 <boingboing+0x246>
    3bb8:	f7 e0       	ldi	r31, 0x07	; 7
    3bba:	cf 16       	cp	r12, r31
    3bbc:	d1 04       	cpc	r13, r1
    3bbe:	81 f4       	brne	.+32     	; 0x3be0 <boingboing+0x246>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    3bc0:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3bc4:	63 e0       	ldi	r22, 0x03	; 3
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	19 f0       	breq	.+6      	; 0x3bd6 <boingboing+0x23c>
    3bd0:	aa 24       	eor	r10, r10
    3bd2:	bb 24       	eor	r11, r11
    3bd4:	03 c0       	rjmp	.+6      	; 0x3bdc <boingboing+0x242>
    3bd6:	aa 24       	eor	r10, r10
    3bd8:	aa 94       	dec	r10
    3bda:	ba 2c       	mov	r11, r10
    3bdc:	33 24       	eor	r3, r3
    3bde:	33 94       	inc	r3
		}
		
		// mode bit 0 sets crash action enable
		if (mode | 0x01)
		{
			if (crash_x)
    3be0:	11 23       	and	r17, r17
    3be2:	51 f1       	breq	.+84     	; 0x3c38 <boingboing+0x29e>
			{
				if (dy == 0)
    3be4:	81 14       	cp	r8, r1
    3be6:	91 04       	cpc	r9, r1
    3be8:	91 f4       	brne	.+36     	; 0x3c0e <boingboing+0x274>
				{
					if (y == 7)
    3bea:	87 e0       	ldi	r24, 0x07	; 7
    3bec:	68 16       	cp	r6, r24
    3bee:	71 04       	cpc	r7, r1
    3bf0:	39 f0       	breq	.+14     	; 0x3c00 <boingboing+0x266>
					{
						dy = -1;
					} else if (y == 0)
    3bf2:	61 14       	cp	r6, r1
    3bf4:	71 04       	cpc	r7, r1
    3bf6:	41 f0       	breq	.+16     	; 0x3c08 <boingboing+0x26e>
					{
						dy = +1;
					} else
					{
						if (rand()%2 == 0)
    3bf8:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3bfc:	80 fd       	sbrc	r24, 0
    3bfe:	04 c0       	rjmp	.+8      	; 0x3c08 <boingboing+0x26e>
    3c00:	88 24       	eor	r8, r8
    3c02:	8a 94       	dec	r8
    3c04:	98 2c       	mov	r9, r8
    3c06:	03 c0       	rjmp	.+6      	; 0x3c0e <boingboing+0x274>
    3c08:	31 e0       	ldi	r19, 0x01	; 1
    3c0a:	83 2e       	mov	r8, r19
    3c0c:	91 2c       	mov	r9, r1
						{
							dy = 1;
						}
					}
				}
				if (dz == 0)
    3c0e:	a1 14       	cp	r10, r1
    3c10:	b1 04       	cpc	r11, r1
    3c12:	91 f4       	brne	.+36     	; 0x3c38 <boingboing+0x29e>
				{
					if (z == 7)
    3c14:	97 e0       	ldi	r25, 0x07	; 7
    3c16:	c9 16       	cp	r12, r25
    3c18:	d1 04       	cpc	r13, r1
    3c1a:	39 f0       	breq	.+14     	; 0x3c2a <boingboing+0x290>
					{
						dz = -1;
					} else if (z == 0)
    3c1c:	c1 14       	cp	r12, r1
    3c1e:	d1 04       	cpc	r13, r1
    3c20:	41 f0       	breq	.+16     	; 0x3c32 <boingboing+0x298>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    3c22:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3c26:	80 fd       	sbrc	r24, 0
    3c28:	04 c0       	rjmp	.+8      	; 0x3c32 <boingboing+0x298>
    3c2a:	aa 24       	eor	r10, r10
    3c2c:	aa 94       	dec	r10
    3c2e:	ba 2c       	mov	r11, r10
    3c30:	03 c0       	rjmp	.+6      	; 0x3c38 <boingboing+0x29e>
    3c32:	21 e0       	ldi	r18, 0x01	; 1
    3c34:	a2 2e       	mov	r10, r18
    3c36:	b1 2c       	mov	r11, r1
						}
					}	
				}
			}
			
			if (crash_y)
    3c38:	00 23       	and	r16, r16
    3c3a:	51 f1       	breq	.+84     	; 0x3c90 <boingboing+0x2f6>
			{
				if (dx == 0)
    3c3c:	e1 14       	cp	r14, r1
    3c3e:	f1 04       	cpc	r15, r1
    3c40:	91 f4       	brne	.+36     	; 0x3c66 <boingboing+0x2cc>
				{
					if (x == 7)
    3c42:	e7 e0       	ldi	r30, 0x07	; 7
    3c44:	4e 16       	cp	r4, r30
    3c46:	51 04       	cpc	r5, r1
    3c48:	39 f0       	breq	.+14     	; 0x3c58 <boingboing+0x2be>
					{
						dx = -1;
					} else if (x == 0)
    3c4a:	41 14       	cp	r4, r1
    3c4c:	51 04       	cpc	r5, r1
    3c4e:	41 f0       	breq	.+16     	; 0x3c60 <boingboing+0x2c6>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    3c50:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3c54:	80 fd       	sbrc	r24, 0
    3c56:	04 c0       	rjmp	.+8      	; 0x3c60 <boingboing+0x2c6>
    3c58:	ee 24       	eor	r14, r14
    3c5a:	ea 94       	dec	r14
    3c5c:	fe 2c       	mov	r15, r14
    3c5e:	03 c0       	rjmp	.+6      	; 0x3c66 <boingboing+0x2cc>
    3c60:	91 e0       	ldi	r25, 0x01	; 1
    3c62:	e9 2e       	mov	r14, r25
    3c64:	f1 2c       	mov	r15, r1
						{
							dx = 1;
						}
					}
				}
				if (dz == 0)
    3c66:	a1 14       	cp	r10, r1
    3c68:	b1 04       	cpc	r11, r1
    3c6a:	91 f4       	brne	.+36     	; 0x3c90 <boingboing+0x2f6>
				{
					if (z == 3)
    3c6c:	f3 e0       	ldi	r31, 0x03	; 3
    3c6e:	cf 16       	cp	r12, r31
    3c70:	d1 04       	cpc	r13, r1
    3c72:	39 f0       	breq	.+14     	; 0x3c82 <boingboing+0x2e8>
					{
						dz = -1;
					} else if (z == 0)
    3c74:	c1 14       	cp	r12, r1
    3c76:	d1 04       	cpc	r13, r1
    3c78:	41 f0       	breq	.+16     	; 0x3c8a <boingboing+0x2f0>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    3c7a:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3c7e:	80 fd       	sbrc	r24, 0
    3c80:	04 c0       	rjmp	.+8      	; 0x3c8a <boingboing+0x2f0>
    3c82:	aa 24       	eor	r10, r10
    3c84:	aa 94       	dec	r10
    3c86:	ba 2c       	mov	r11, r10
    3c88:	03 c0       	rjmp	.+6      	; 0x3c90 <boingboing+0x2f6>
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	a8 2e       	mov	r10, r24
    3c8e:	b1 2c       	mov	r11, r1
						}
					}	
				}
			}
			
			if (crash_z)
    3c90:	33 20       	and	r3, r3
    3c92:	61 f1       	breq	.+88     	; 0x3cec <boingboing+0x352>
			{
				if (dy == 0)
    3c94:	81 14       	cp	r8, r1
    3c96:	91 04       	cpc	r9, r1
    3c98:	91 f4       	brne	.+36     	; 0x3cbe <boingboing+0x324>
				{
					if (y == 7)
    3c9a:	87 e0       	ldi	r24, 0x07	; 7
    3c9c:	68 16       	cp	r6, r24
    3c9e:	71 04       	cpc	r7, r1
    3ca0:	39 f0       	breq	.+14     	; 0x3cb0 <boingboing+0x316>
					{
						dy = -1;
					} else if (y == 0)
    3ca2:	61 14       	cp	r6, r1
    3ca4:	71 04       	cpc	r7, r1
    3ca6:	41 f0       	breq	.+16     	; 0x3cb8 <boingboing+0x31e>
					{
						dy = 1;
					} else
					{
						if (rand()%2 == 0)
    3ca8:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3cac:	80 fd       	sbrc	r24, 0
    3cae:	04 c0       	rjmp	.+8      	; 0x3cb8 <boingboing+0x31e>
    3cb0:	88 24       	eor	r8, r8
    3cb2:	8a 94       	dec	r8
    3cb4:	98 2c       	mov	r9, r8
    3cb6:	03 c0       	rjmp	.+6      	; 0x3cbe <boingboing+0x324>
    3cb8:	01 e0       	ldi	r16, 0x01	; 1
    3cba:	80 2e       	mov	r8, r16
    3cbc:	91 2c       	mov	r9, r1
						{
							dy = 1;
						}
					}	
				}
				if (dx == 0)
    3cbe:	e1 14       	cp	r14, r1
    3cc0:	f1 04       	cpc	r15, r1
    3cc2:	a1 f4       	brne	.+40     	; 0x3cec <boingboing+0x352>
				{
					if (x == 7)
    3cc4:	97 e0       	ldi	r25, 0x07	; 7
    3cc6:	49 16       	cp	r4, r25
    3cc8:	51 04       	cpc	r5, r1
    3cca:	21 f4       	brne	.+8      	; 0x3cd4 <boingboing+0x33a>
    3ccc:	ee 24       	eor	r14, r14
    3cce:	ea 94       	dec	r14
    3cd0:	fe 2c       	mov	r15, r14
    3cd2:	29 c0       	rjmp	.+82     	; 0x3d26 <boingboing+0x38c>
					{
						dx = -1;
					} else if (x == 0)
    3cd4:	41 14       	cp	r4, r1
    3cd6:	51 04       	cpc	r5, r1
    3cd8:	21 f4       	brne	.+8      	; 0x3ce2 <boingboing+0x348>
    3cda:	11 e0       	ldi	r17, 0x01	; 1
    3cdc:	e1 2e       	mov	r14, r17
    3cde:	f1 2c       	mov	r15, r1
    3ce0:	08 c0       	rjmp	.+16     	; 0x3cf2 <boingboing+0x358>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    3ce2:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3ce6:	80 ff       	sbrs	r24, 0
    3ce8:	04 c1       	rjmp	.+520    	; 0x3ef2 <boingboing+0x558>
    3cea:	51 c0       	rjmp	.+162    	; 0x3d8e <boingboing+0x3f4>
		}
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
    3cec:	41 14       	cp	r4, r1
    3cee:	51 04       	cpc	r5, r1
    3cf0:	b1 f4       	brne	.+44     	; 0x3d1e <boingboing+0x384>
    3cf2:	61 14       	cp	r6, r1
    3cf4:	71 04       	cpc	r7, r1
    3cf6:	41 f4       	brne	.+16     	; 0x3d08 <boingboing+0x36e>
    3cf8:	c1 14       	cp	r12, r1
    3cfa:	d1 04       	cpc	r13, r1
    3cfc:	51 f1       	breq	.+84     	; 0x3d52 <boingboing+0x3b8>
    3cfe:	e7 e0       	ldi	r30, 0x07	; 7
    3d00:	ce 16       	cp	r12, r30
    3d02:	d1 04       	cpc	r13, r1
    3d04:	61 f4       	brne	.+24     	; 0x3d1e <boingboing+0x384>
    3d06:	25 c0       	rjmp	.+74     	; 0x3d52 <boingboing+0x3b8>
    3d08:	f7 e0       	ldi	r31, 0x07	; 7
    3d0a:	6f 16       	cp	r6, r31
    3d0c:	71 04       	cpc	r7, r1
    3d0e:	39 f4       	brne	.+14     	; 0x3d1e <boingboing+0x384>
    3d10:	c1 14       	cp	r12, r1
    3d12:	d1 04       	cpc	r13, r1
    3d14:	f1 f0       	breq	.+60     	; 0x3d52 <boingboing+0x3b8>
    3d16:	87 e0       	ldi	r24, 0x07	; 7
    3d18:	c8 16       	cp	r12, r24
    3d1a:	d1 04       	cpc	r13, r1
    3d1c:	d1 f0       	breq	.+52     	; 0x3d52 <boingboing+0x3b8>
    3d1e:	97 e0       	ldi	r25, 0x07	; 7
    3d20:	49 16       	cp	r4, r25
    3d22:	51 04       	cpc	r5, r1
    3d24:	61 f5       	brne	.+88     	; 0x3d7e <boingboing+0x3e4>
    3d26:	61 14       	cp	r6, r1
    3d28:	71 04       	cpc	r7, r1
    3d2a:	41 f4       	brne	.+16     	; 0x3d3c <boingboing+0x3a2>
    3d2c:	c1 14       	cp	r12, r1
    3d2e:	d1 04       	cpc	r13, r1
    3d30:	81 f0       	breq	.+32     	; 0x3d52 <boingboing+0x3b8>
    3d32:	e7 e0       	ldi	r30, 0x07	; 7
    3d34:	ce 16       	cp	r12, r30
    3d36:	d1 04       	cpc	r13, r1
    3d38:	11 f5       	brne	.+68     	; 0x3d7e <boingboing+0x3e4>
    3d3a:	0b c0       	rjmp	.+22     	; 0x3d52 <boingboing+0x3b8>
    3d3c:	f7 e0       	ldi	r31, 0x07	; 7
    3d3e:	6f 16       	cp	r6, r31
    3d40:	71 04       	cpc	r7, r1
    3d42:	e9 f4       	brne	.+58     	; 0x3d7e <boingboing+0x3e4>
    3d44:	c1 14       	cp	r12, r1
    3d46:	d1 04       	cpc	r13, r1
    3d48:	21 f0       	breq	.+8      	; 0x3d52 <boingboing+0x3b8>
    3d4a:	87 e0       	ldi	r24, 0x07	; 7
    3d4c:	c8 16       	cp	r12, r24
    3d4e:	d1 04       	cpc	r13, r1
    3d50:	b1 f4       	brne	.+44     	; 0x3d7e <boingboing+0x3e4>
				// and the exact opposite corner
				// We don't want that!
			
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
    3d52:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3d56:	63 e0       	ldi	r22, 0x03	; 3
    3d58:	70 e0       	ldi	r23, 0x00	; 0
    3d5a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
				if (lol == 0)
    3d5e:	00 97       	sbiw	r24, 0x00	; 0
    3d60:	19 f4       	brne	.+6      	; 0x3d68 <boingboing+0x3ce>
    3d62:	ee 24       	eor	r14, r14
    3d64:	ff 24       	eor	r15, r15
    3d66:	0b c0       	rjmp	.+22     	; 0x3d7e <boingboing+0x3e4>
					dx = 0;
				
				if (lol == 1)
    3d68:	81 30       	cpi	r24, 0x01	; 1
    3d6a:	91 05       	cpc	r25, r1
    3d6c:	19 f4       	brne	.+6      	; 0x3d74 <boingboing+0x3da>
    3d6e:	88 24       	eor	r8, r8
    3d70:	99 24       	eor	r9, r9
    3d72:	05 c0       	rjmp	.+10     	; 0x3d7e <boingboing+0x3e4>
					dy = 0;
					
				if (lol == 2)
    3d74:	82 30       	cpi	r24, 0x02	; 2
    3d76:	91 05       	cpc	r25, r1
    3d78:	11 f4       	brne	.+4      	; 0x3d7e <boingboing+0x3e4>
    3d7a:	aa 24       	eor	r10, r10
    3d7c:	bb 24       	eor	r11, r11
					dz = 0;
			}
		}

        // one last sanity check
        if (x == 0 && dx == -1)
    3d7e:	41 14       	cp	r4, r1
    3d80:	51 04       	cpc	r5, r1
    3d82:	41 f4       	brne	.+16     	; 0x3d94 <boingboing+0x3fa>
    3d84:	9f ef       	ldi	r25, 0xFF	; 255
    3d86:	e9 16       	cp	r14, r25
    3d88:	9f ef       	ldi	r25, 0xFF	; 255
    3d8a:	f9 06       	cpc	r15, r25
    3d8c:	19 f4       	brne	.+6      	; 0x3d94 <boingboing+0x3fa>
    3d8e:	b1 e0       	ldi	r27, 0x01	; 1
    3d90:	eb 2e       	mov	r14, r27
    3d92:	f1 2c       	mov	r15, r1
            dx = 1;
	
        if (y == 0 && dy == -1)
    3d94:	61 14       	cp	r6, r1
    3d96:	71 04       	cpc	r7, r1
    3d98:	41 f4       	brne	.+16     	; 0x3daa <boingboing+0x410>
    3d9a:	ef ef       	ldi	r30, 0xFF	; 255
    3d9c:	8e 16       	cp	r8, r30
    3d9e:	ef ef       	ldi	r30, 0xFF	; 255
    3da0:	9e 06       	cpc	r9, r30
    3da2:	19 f4       	brne	.+6      	; 0x3daa <boingboing+0x410>
    3da4:	a1 e0       	ldi	r26, 0x01	; 1
    3da6:	8a 2e       	mov	r8, r26
    3da8:	91 2c       	mov	r9, r1
            dy = 1;
	
        if (z == 0 && dz == -1)
    3daa:	c1 14       	cp	r12, r1
    3dac:	d1 04       	cpc	r13, r1
    3dae:	41 f4       	brne	.+16     	; 0x3dc0 <boingboing+0x426>
    3db0:	ff ef       	ldi	r31, 0xFF	; 255
    3db2:	af 16       	cp	r10, r31
    3db4:	ff ef       	ldi	r31, 0xFF	; 255
    3db6:	bf 06       	cpc	r11, r31
    3db8:	19 f4       	brne	.+6      	; 0x3dc0 <boingboing+0x426>
    3dba:	f1 e0       	ldi	r31, 0x01	; 1
    3dbc:	af 2e       	mov	r10, r31
    3dbe:	b1 2c       	mov	r11, r1
            dz = 1;
	
        if (x == 7 && dx == 1)
    3dc0:	87 e0       	ldi	r24, 0x07	; 7
    3dc2:	48 16       	cp	r4, r24
    3dc4:	51 04       	cpc	r5, r1
    3dc6:	39 f4       	brne	.+14     	; 0x3dd6 <boingboing+0x43c>
    3dc8:	91 e0       	ldi	r25, 0x01	; 1
    3dca:	e9 16       	cp	r14, r25
    3dcc:	f1 04       	cpc	r15, r1
    3dce:	19 f4       	brne	.+6      	; 0x3dd6 <boingboing+0x43c>
    3dd0:	ee 24       	eor	r14, r14
    3dd2:	ea 94       	dec	r14
    3dd4:	fe 2c       	mov	r15, r14
            dx = -1;
	
        if (y == 7 && dy == 1)
    3dd6:	e7 e0       	ldi	r30, 0x07	; 7
    3dd8:	6e 16       	cp	r6, r30
    3dda:	71 04       	cpc	r7, r1
    3ddc:	39 f4       	brne	.+14     	; 0x3dec <boingboing+0x452>
    3dde:	f1 e0       	ldi	r31, 0x01	; 1
    3de0:	8f 16       	cp	r8, r31
    3de2:	91 04       	cpc	r9, r1
    3de4:	19 f4       	brne	.+6      	; 0x3dec <boingboing+0x452>
    3de6:	88 24       	eor	r8, r8
    3de8:	8a 94       	dec	r8
    3dea:	98 2c       	mov	r9, r8
            dy = -1;
	
        if (z == 7 && dz == 1)
    3dec:	87 e0       	ldi	r24, 0x07	; 7
    3dee:	c8 16       	cp	r12, r24
    3df0:	d1 04       	cpc	r13, r1
    3df2:	39 f4       	brne	.+14     	; 0x3e02 <boingboing+0x468>
    3df4:	91 e0       	ldi	r25, 0x01	; 1
    3df6:	a9 16       	cp	r10, r25
    3df8:	b1 04       	cpc	r11, r1
    3dfa:	19 f4       	brne	.+6      	; 0x3e02 <boingboing+0x468>
    3dfc:	aa 24       	eor	r10, r10
    3dfe:	aa 94       	dec	r10
    3e00:	ba 2c       	mov	r11, r10
            dz = -1;
	
	
		// Finally, move the voxel.
		x = x + dx;
    3e02:	4e 0c       	add	r4, r14
    3e04:	5f 1c       	adc	r5, r15
		y = y + dy;
    3e06:	68 0c       	add	r6, r8
    3e08:	79 1c       	adc	r7, r9
		z = z + dz;
    3e0a:	ca 0c       	add	r12, r10
    3e0c:	db 1c       	adc	r13, r11
		
		if (drawmode == 0x01) // show one voxel at time
    3e0e:	e1 e0       	ldi	r30, 0x01	; 1
    3e10:	2e 16       	cp	r2, r30
    3e12:	79 f4       	brne	.+30     	; 0x3e32 <boingboing+0x498>
		{
			setvoxel(x,y,z);
    3e14:	c2 01       	movw	r24, r4
    3e16:	b3 01       	movw	r22, r6
    3e18:	a6 01       	movw	r20, r12
    3e1a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
			delay_ms(delay);
    3e1e:	8b a9       	ldd	r24, Y+51	; 0x33
    3e20:	9c a9       	ldd	r25, Y+52	; 0x34
    3e22:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			clrvoxel(x,y,z);	
    3e26:	c2 01       	movw	r24, r4
    3e28:	b3 01       	movw	r22, r6
    3e2a:	a6 01       	movw	r20, r12
    3e2c:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
    3e30:	55 c0       	rjmp	.+170    	; 0x3edc <boingboing+0x542>
		} else if (drawmode == 0x02) // flip the voxel in question
    3e32:	f2 e0       	ldi	r31, 0x02	; 2
    3e34:	2f 16       	cp	r2, r31
    3e36:	51 f4       	brne	.+20     	; 0x3e4c <boingboing+0x4b2>
		{
			flpvoxel(x,y,z);
    3e38:	c2 01       	movw	r24, r4
    3e3a:	b3 01       	movw	r22, r6
    3e3c:	a6 01       	movw	r20, r12
    3e3e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <flpvoxel>
			delay_ms(delay);
    3e42:	8b a9       	ldd	r24, Y+51	; 0x33
    3e44:	9c a9       	ldd	r25, Y+52	; 0x34
    3e46:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    3e4a:	48 c0       	rjmp	.+144    	; 0x3edc <boingboing+0x542>
		} if (drawmode == 0x03) // draw a snake
    3e4c:	83 e0       	ldi	r24, 0x03	; 3
    3e4e:	28 16       	cp	r2, r24
    3e50:	09 f0       	breq	.+2      	; 0x3e54 <boingboing+0x4ba>
    3e52:	44 c0       	rjmp	.+136    	; 0x3edc <boingboing+0x542>
    3e54:	fe 01       	movw	r30, r28
    3e56:	b5 96       	adiw	r30, 0x25	; 37
		{
			for (i=7;i>=0;i--)
			{
				snake[i][0] = snake[i-1][0];
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	97 83       	std	Z+7, r25	; 0x07
    3e5e:	86 83       	std	Z+6, r24	; 0x06
				snake[i][1] = snake[i-1][1];
    3e60:	82 81       	ldd	r24, Z+2	; 0x02
    3e62:	93 81       	ldd	r25, Z+3	; 0x03
    3e64:	91 87       	std	Z+9, r25	; 0x09
    3e66:	80 87       	std	Z+8, r24	; 0x08
				snake[i][2] = snake[i-1][2];
    3e68:	84 81       	ldd	r24, Z+4	; 0x04
    3e6a:	95 81       	ldd	r25, Z+5	; 0x05
    3e6c:	93 87       	std	Z+11, r25	; 0x0b
    3e6e:	82 87       	std	Z+10, r24	; 0x0a
    3e70:	36 97       	sbiw	r30, 0x06	; 6
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>=0;i--)
    3e72:	8f a9       	ldd	r24, Y+55	; 0x37
    3e74:	98 ad       	ldd	r25, Y+56	; 0x38
    3e76:	e8 17       	cp	r30, r24
    3e78:	f9 07       	cpc	r31, r25
    3e7a:	71 f7       	brne	.-36     	; 0x3e58 <boingboing+0x4be>
			{
				snake[i][0] = snake[i-1][0];
				snake[i][1] = snake[i-1][1];
				snake[i][2] = snake[i-1][2];
			}
			snake[0][0] = x;
    3e7c:	5a 82       	std	Y+2, r5	; 0x02
    3e7e:	49 82       	std	Y+1, r4	; 0x01
			snake[0][1] = y;
    3e80:	7c 82       	std	Y+4, r7	; 0x04
    3e82:	6b 82       	std	Y+3, r6	; 0x03
			snake[0][2] = z;
    3e84:	de 82       	std	Y+6, r13	; 0x06
    3e86:	cd 82       	std	Y+5, r12	; 0x05
    3e88:	8e 01       	movw	r16, r28
    3e8a:	0f 5f       	subi	r16, 0xFF	; 255
    3e8c:	1f 4f       	sbci	r17, 0xFF	; 255
				
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
    3e8e:	f8 01       	movw	r30, r16
    3e90:	62 81       	ldd	r22, Z+2	; 0x02
    3e92:	73 81       	ldd	r23, Z+3	; 0x03
    3e94:	44 81       	ldd	r20, Z+4	; 0x04
    3e96:	55 81       	ldd	r21, Z+5	; 0x05
    3e98:	80 81       	ld	r24, Z
    3e9a:	91 81       	ldd	r25, Z+1	; 0x01
    3e9c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    3ea0:	0a 5f       	subi	r16, 0xFA	; 250
    3ea2:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			snake[0][0] = x;
			snake[0][1] = y;
			snake[0][2] = z;
				
			for (i=0;i<8;i++)
    3ea4:	8d a9       	ldd	r24, Y+53	; 0x35
    3ea6:	9e a9       	ldd	r25, Y+54	; 0x36
    3ea8:	08 17       	cp	r16, r24
    3eaa:	19 07       	cpc	r17, r25
    3eac:	81 f7       	brne	.-32     	; 0x3e8e <boingboing+0x4f4>
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
    3eae:	8b a9       	ldd	r24, Y+51	; 0x33
    3eb0:	9c a9       	ldd	r25, Y+52	; 0x34
    3eb2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    3eb6:	8e 01       	movw	r16, r28
    3eb8:	0f 5f       	subi	r16, 0xFF	; 255
    3eba:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	62 81       	ldd	r22, Z+2	; 0x02
    3ec0:	73 81       	ldd	r23, Z+3	; 0x03
    3ec2:	44 81       	ldd	r20, Z+4	; 0x04
    3ec4:	55 81       	ldd	r21, Z+5	; 0x05
    3ec6:	80 81       	ld	r24, Z
    3ec8:	91 81       	ldd	r25, Z+1	; 0x01
    3eca:	0e 94 df 06 	call	0xdbe	; 0xdbe <clrvoxel>
    3ece:	0a 5f       	subi	r16, 0xFA	; 250
    3ed0:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
			for (i=0;i<8;i++)
    3ed2:	8d a9       	ldd	r24, Y+53	; 0x35
    3ed4:	9e a9       	ldd	r25, Y+54	; 0x36
    3ed6:	08 17       	cp	r16, r24
    3ed8:	19 07       	cpc	r17, r25
    3eda:	81 f7       	brne	.-32     	; 0x3ebc <boingboing+0x522>
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
		}
		
	
		iterations--;
    3edc:	e9 a9       	ldd	r30, Y+49	; 0x31
    3ede:	fa a9       	ldd	r31, Y+50	; 0x32
    3ee0:	31 97       	sbiw	r30, 0x01	; 1
    3ee2:	fa ab       	std	Y+50, r31	; 0x32
    3ee4:	e9 ab       	std	Y+49, r30	; 0x31
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    3ee6:	89 a9       	ldd	r24, Y+49	; 0x31
    3ee8:	9a a9       	ldd	r25, Y+50	; 0x32
    3eea:	89 2b       	or	r24, r25
    3eec:	09 f0       	breq	.+2      	; 0x3ef0 <boingboing+0x556>
    3eee:	b0 cd       	rjmp	.-1184   	; 0x3a50 <boingboing+0xb6>
    3ef0:	04 c0       	rjmp	.+8      	; 0x3efa <boingboing+0x560>
		}
		
	
		iterations--;
	}
}
    3ef2:	ee 24       	eor	r14, r14
    3ef4:	ea 94       	dec	r14
    3ef6:	fe 2c       	mov	r15, r14
    3ef8:	4d cf       	rjmp	.-358    	; 0x3d94 <boingboing+0x3fa>
    3efa:	e8 96       	adiw	r28, 0x38	; 56
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	cf 91       	pop	r28
    3f08:	df 91       	pop	r29
    3f0a:	1f 91       	pop	r17
    3f0c:	0f 91       	pop	r16
    3f0e:	ff 90       	pop	r15
    3f10:	ef 90       	pop	r14
    3f12:	df 90       	pop	r13
    3f14:	cf 90       	pop	r12
    3f16:	bf 90       	pop	r11
    3f18:	af 90       	pop	r10
    3f1a:	9f 90       	pop	r9
    3f1c:	8f 90       	pop	r8
    3f1e:	7f 90       	pop	r7
    3f20:	6f 90       	pop	r6
    3f22:	5f 90       	pop	r5
    3f24:	4f 90       	pop	r4
    3f26:	3f 90       	pop	r3
    3f28:	2f 90       	pop	r2
    3f2a:	08 95       	ret

00003f2c <sendplane_rand_z>:

// Send all the voxels from one side of the cube to the other
// Start at z and send to the opposite side.
// Sends in random order.
void sendplane_rand_z (unsigned char z, int delay, int wait)
{
    3f2c:	cf 92       	push	r12
    3f2e:	df 92       	push	r13
    3f30:	ef 92       	push	r14
    3f32:	ff 92       	push	r15
    3f34:	0f 93       	push	r16
    3f36:	1f 93       	push	r17
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	f8 2e       	mov	r15, r24
    3f3e:	6b 01       	movw	r12, r22
    3f40:	ea 01       	movw	r28, r20
	unsigned char loop = 16;
	unsigned char x, y;

	fill(0x00);
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>

	setplane_z(z);
    3f48:	8f 2d       	mov	r24, r15
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	0e 94 0b 09 	call	0x1216	; 0x1216 <setplane_z>
    3f50:	10 e1       	ldi	r17, 0x10	; 16
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
	{
		x = rand()%4;
    3f52:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3f56:	64 e0       	ldi	r22, 0x04	; 4
    3f58:	70 e0       	ldi	r23, 0x00	; 0
    3f5a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3f5e:	e8 2e       	mov	r14, r24
		y = rand()%4;
    3f60:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    3f64:	64 e0       	ldi	r22, 0x04	; 4
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    3f6c:	08 2f       	mov	r16, r24
		if (getvoxel(x,y,z))
    3f6e:	8e 2d       	mov	r24, r14
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	60 2f       	mov	r22, r16
    3f74:	70 e0       	ldi	r23, 0x00	; 0
    3f76:	4f 2d       	mov	r20, r15
    3f78:	50 e0       	ldi	r21, 0x00	; 0
    3f7a:	0e 94 a7 08 	call	0x114e	; 0x114e <getvoxel>
    3f7e:	88 23       	and	r24, r24
    3f80:	41 f3       	breq	.-48     	; 0x3f52 <sendplane_rand_z+0x26>
		{
			// Send the voxel flying
			sendvoxel_z(x,y,z,delay);
    3f82:	8e 2d       	mov	r24, r14
    3f84:	60 2f       	mov	r22, r16
    3f86:	4f 2d       	mov	r20, r15
    3f88:	96 01       	movw	r18, r12
    3f8a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <sendvoxel_z>
			delay_ms(wait);
    3f8e:	ce 01       	movw	r24, r28
    3f90:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
    3f94:	11 50       	subi	r17, 0x01	; 1
	fill(0x00);

	setplane_z(z);
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
    3f96:	e9 f6       	brne	.-70     	; 0x3f52 <sendplane_rand_z+0x26>
			sendvoxel_z(x,y,z,delay);
			delay_ms(wait);
			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
		}
	}
}
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	1f 91       	pop	r17
    3f9e:	0f 91       	pop	r16
    3fa0:	ff 90       	pop	r15
    3fa2:	ef 90       	pop	r14
    3fa4:	df 90       	pop	r13
    3fa6:	cf 90       	pop	r12
    3fa8:	08 95       	ret

00003faa <effect_box_woopwoop>:
    }
}

// Creates a wireframe box that shrinks or grows out from the center of the cube.
void effect_box_woopwoop (int delay, int grow)
{
    3faa:	8f 92       	push	r8
    3fac:	9f 92       	push	r9
    3fae:	af 92       	push	r10
    3fb0:	bf 92       	push	r11
    3fb2:	cf 92       	push	r12
    3fb4:	df 92       	push	r13
    3fb6:	ef 92       	push	r14
    3fb8:	ff 92       	push	r15
    3fba:	0f 93       	push	r16
    3fbc:	1f 93       	push	r17
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	5c 01       	movw	r10, r24
    3fc4:	6b 01       	movw	r12, r22
	int i,ii;
	
	fill(0x00);
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    3fcc:	c0 e0       	ldi	r28, 0x00	; 0
    3fce:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<4;i++)
	{
if (xit == 1) {i = 4;break;}
        ii = i;
        if (grow > 0)
    3fd0:	a3 e0       	ldi	r26, 0x03	; 3
    3fd2:	8a 2e       	mov	r8, r26
    3fd4:	91 2c       	mov	r9, r1
	int i,ii;
	
	fill(0x00);
	for (i=0;i<4;i++)
	{
if (xit == 1) {i = 4;break;}
    3fd6:	80 91 b3 01 	lds	r24, 0x01B3
    3fda:	90 91 b4 01 	lds	r25, 0x01B4
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f0       	breq	.+60     	; 0x401e <effect_box_woopwoop+0x74>
        ii = i;
        if (grow > 0)
    3fe2:	1c 14       	cp	r1, r12
    3fe4:	1d 04       	cpc	r1, r13
    3fe6:	14 f0       	brlt	.+4      	; 0x3fec <effect_box_woopwoop+0x42>
    3fe8:	ce 01       	movw	r24, r28
    3fea:	03 c0       	rjmp	.+6      	; 0x3ff2 <effect_box_woopwoop+0x48>
    3fec:	c4 01       	movw	r24, r8
    3fee:	8c 1b       	sub	r24, r28
    3ff0:	9d 0b       	sbc	r25, r29
            ii = 3-i;

		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
    3ff2:	ac 01       	movw	r20, r24
    3ff4:	4c 5f       	subi	r20, 0xFC	; 252
    3ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ff8:	74 01       	movw	r14, r8
    3ffa:	e8 1a       	sub	r14, r24
    3ffc:	f9 0a       	sbc	r15, r25
    3ffe:	ca 01       	movw	r24, r20
    4000:	ba 01       	movw	r22, r20
    4002:	97 01       	movw	r18, r14
    4004:	87 01       	movw	r16, r14
    4006:	0e 94 29 0b 	call	0x1652	; 0x1652 <box_wireframe>
		delay_ms(delay);
    400a:	c5 01       	movw	r24, r10
    400c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		fill(0x00);
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
void effect_box_woopwoop (int delay, int grow)
{
	int i,ii;
	
	fill(0x00);
	for (i=0;i<4;i++)
    4016:	21 96       	adiw	r28, 0x01	; 1
    4018:	c4 30       	cpi	r28, 0x04	; 4
    401a:	d1 05       	cpc	r29, r1
    401c:	e1 f6       	brne	.-72     	; 0x3fd6 <effect_box_woopwoop+0x2c>

		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
		delay_ms(delay);
		fill(0x00);
	}
}
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	1f 91       	pop	r17
    4024:	0f 91       	pop	r16
    4026:	ff 90       	pop	r15
    4028:	ef 90       	pop	r14
    402a:	df 90       	pop	r13
    402c:	cf 90       	pop	r12
    402e:	bf 90       	pop	r11
    4030:	af 90       	pop	r10
    4032:	9f 90       	pop	r9
    4034:	8f 90       	pop	r8
    4036:	08 95       	ret

00004038 <effect_box_shrink_grow>:
	}

}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
    4038:	2f 92       	push	r2
    403a:	3f 92       	push	r3
    403c:	4f 92       	push	r4
    403e:	5f 92       	push	r5
    4040:	6f 92       	push	r6
    4042:	7f 92       	push	r7
    4044:	8f 92       	push	r8
    4046:	9f 92       	push	r9
    4048:	af 92       	push	r10
    404a:	bf 92       	push	r11
    404c:	cf 92       	push	r12
    404e:	df 92       	push	r13
    4050:	ef 92       	push	r14
    4052:	ff 92       	push	r15
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    4058:	df 93       	push	r29
    405a:	cf 93       	push	r28
    405c:	00 d0       	rcall	.+0      	; 0x405e <effect_box_shrink_grow+0x26>
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62
    4062:	3c 01       	movw	r6, r24
    4064:	4b 01       	movw	r8, r22
    4066:	5a 83       	std	Y+2, r21	; 0x02
    4068:	49 83       	std	Y+1, r20	; 0x01
    406a:	19 01       	movw	r2, r18
    406c:	aa 24       	eor	r10, r10
    406e:	bb 24       	eor	r11, r11
                mirror_z();

            if (rot == 1 || rot == 3)
                mirror_y();

            if (rot == 2 || rot == 3)
    4070:	0e ef       	ldi	r16, 0xFE	; 254
    4072:	40 2e       	mov	r4, r16
    4074:	0f ef       	ldi	r16, 0xFF	; 255
    4076:	50 2e       	mov	r5, r16
    4078:	46 0e       	add	r4, r22
    407a:	57 1e       	adc	r5, r23
    407c:	5c c0       	rjmp	.+184    	; 0x4136 <effect_box_shrink_grow+0xfe>
void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
	{
if (xit == 1) {x = iterations;break;}
    407e:	80 91 b3 01 	lds	r24, 0x01B3
    4082:	90 91 b4 01 	lds	r25, 0x01B4
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	09 f4       	brne	.+2      	; 0x408c <effect_box_shrink_grow+0x54>
    408a:	59 c0       	rjmp	.+178    	; 0x413e <effect_box_shrink_grow+0x106>
    408c:	cc 24       	eor	r12, r12
    408e:	dd 24       	eor	r13, r13
		for (i=0;i<16;i++)
		{
if (xit == 1) {x = iterations;i=16;break;}
    4090:	80 91 b3 01 	lds	r24, 0x01B3
    4094:	90 91 b4 01 	lds	r25, 0x01B4
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	11 f4       	brne	.+4      	; 0x40a0 <effect_box_shrink_grow+0x68>
    409c:	53 01       	movw	r10, r6
    409e:	48 c0       	rjmp	.+144    	; 0x4130 <effect_box_shrink_grow+0xf8>
            xyz = 7-i; // This reverses counter i between 0 and 7.
            if (i > 7) 
    40a0:	88 e0       	ldi	r24, 0x08	; 8
    40a2:	c8 16       	cp	r12, r24
    40a4:	d1 04       	cpc	r13, r1
    40a6:	34 f4       	brge	.+12     	; 0x40b4 <effect_box_shrink_grow+0x7c>
    40a8:	17 e0       	ldi	r17, 0x07	; 7
    40aa:	e1 2e       	mov	r14, r17
    40ac:	f1 2c       	mov	r15, r1
    40ae:	ec 18       	sub	r14, r12
    40b0:	fd 08       	sbc	r15, r13
    40b2:	06 c0       	rjmp	.+12     	; 0x40c0 <effect_box_shrink_grow+0x88>
    40b4:	b8 ef       	ldi	r27, 0xF8	; 248
    40b6:	eb 2e       	mov	r14, r27
    40b8:	bf ef       	ldi	r27, 0xFF	; 255
    40ba:	fb 2e       	mov	r15, r27
    40bc:	ec 0c       	add	r14, r12
    40be:	fd 1c       	adc	r15, r13
                xyz = i-8; // at i > 7, i 8-15 becomes xyz 0-7.
            
            fill(0x00); delay_ms(1);
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
            cli(); // disable interrupts while the cube is being rotated
    40ce:	f8 94       	cli
			box_wireframe(0,0,0,xyz,xyz,xyz);
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	60 e0       	ldi	r22, 0x00	; 0
    40d6:	70 e0       	ldi	r23, 0x00	; 0
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	50 e0       	ldi	r21, 0x00	; 0
    40dc:	97 01       	movw	r18, r14
    40de:	87 01       	movw	r16, r14
    40e0:	0e 94 29 0b 	call	0x1652	; 0x1652 <box_wireframe>

            if (flip > 0) // upside-down
    40e4:	e9 81       	ldd	r30, Y+1	; 0x01
    40e6:	fa 81       	ldd	r31, Y+2	; 0x02
    40e8:	1e 16       	cp	r1, r30
    40ea:	1f 06       	cpc	r1, r31
    40ec:	14 f4       	brge	.+4      	; 0x40f2 <effect_box_shrink_grow+0xba>
                mirror_z();
    40ee:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <mirror_z>

            if (rot == 1 || rot == 3)
    40f2:	f1 e0       	ldi	r31, 0x01	; 1
    40f4:	8f 16       	cp	r8, r31
    40f6:	91 04       	cpc	r9, r1
    40f8:	21 f0       	breq	.+8      	; 0x4102 <effect_box_shrink_grow+0xca>
    40fa:	83 e0       	ldi	r24, 0x03	; 3
    40fc:	88 16       	cp	r8, r24
    40fe:	91 04       	cpc	r9, r1
    4100:	11 f4       	brne	.+4      	; 0x4106 <effect_box_shrink_grow+0xce>
                mirror_y();
    4102:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <mirror_y>

            if (rot == 2 || rot == 3)
    4106:	92 e0       	ldi	r25, 0x02	; 2
    4108:	49 16       	cp	r4, r25
    410a:	51 04       	cpc	r5, r1
    410c:	10 f4       	brcc	.+4      	; 0x4112 <effect_box_shrink_grow+0xda>
                mirror_x();
    410e:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <mirror_x>
            
            sei(); // enable interrupts
    4112:	78 94       	sei
			delay_ms(delay);
    4114:	c1 01       	movw	r24, r2
    4116:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	        fill(0x00);
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
	{
if (xit == 1) {x = iterations;break;}
		for (i=0;i<16;i++)
    4120:	08 94       	sec
    4122:	c1 1c       	adc	r12, r1
    4124:	d1 1c       	adc	r13, r1
    4126:	e0 e1       	ldi	r30, 0x10	; 16
    4128:	ce 16       	cp	r12, r30
    412a:	d1 04       	cpc	r13, r1
    412c:	09 f0       	breq	.+2      	; 0x4130 <effect_box_shrink_grow+0xf8>
    412e:	b0 cf       	rjmp	.-160    	; 0x4090 <effect_box_shrink_grow+0x58>
}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
    4130:	08 94       	sec
    4132:	a1 1c       	adc	r10, r1
    4134:	b1 1c       	adc	r11, r1
    4136:	a6 14       	cp	r10, r6
    4138:	b7 04       	cpc	r11, r7
    413a:	0c f4       	brge	.+2      	; 0x413e <effect_box_shrink_grow+0x106>
    413c:	a0 cf       	rjmp	.-192    	; 0x407e <effect_box_shrink_grow+0x46>
            sei(); // enable interrupts
			delay_ms(delay);
	        fill(0x00);
        }
    }
}
    413e:	0f 90       	pop	r0
    4140:	0f 90       	pop	r0
    4142:	cf 91       	pop	r28
    4144:	df 91       	pop	r29
    4146:	1f 91       	pop	r17
    4148:	0f 91       	pop	r16
    414a:	ff 90       	pop	r15
    414c:	ef 90       	pop	r14
    414e:	df 90       	pop	r13
    4150:	cf 90       	pop	r12
    4152:	bf 90       	pop	r11
    4154:	af 90       	pop	r10
    4156:	9f 90       	pop	r9
    4158:	8f 90       	pop	r8
    415a:	7f 90       	pop	r7
    415c:	6f 90       	pop	r6
    415e:	5f 90       	pop	r5
    4160:	4f 90       	pop	r4
    4162:	3f 90       	pop	r3
    4164:	2f 90       	pop	r2
    4166:	08 95       	ret

00004168 <effect_planboing2>:
		delay_ms(speed);
	}
}

void effect_planboing2 (int plane, int speed)
{
    4168:	ef 92       	push	r14
    416a:	ff 92       	push	r15
    416c:	0f 93       	push	r16
    416e:	1f 93       	push	r17
    4170:	e8 2e       	mov	r14, r24
    4172:	f6 2e       	mov	r15, r22
    4174:	07 2f       	mov	r16, r23
    4176:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	for (i=0;i<8;i++)
	{
		// fill(0x00);
        setplane(plane, i);
    4178:	8e 2d       	mov	r24, r14
    417a:	61 2f       	mov	r22, r17
    417c:	0e 94 bc 09 	call	0x1378	; 0x1378 <setplane>
		delay_ms(speed);
    4180:	8f 2d       	mov	r24, r15
    4182:	90 2f       	mov	r25, r16
    4184:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    4188:	1f 5f       	subi	r17, 0xFF	; 255
}

void effect_planboing2 (int plane, int speed)
{
	int i;
	for (i=0;i<8;i++)
    418a:	18 30       	cpi	r17, 0x08	; 8
    418c:	a9 f7       	brne	.-22     	; 0x4178 <effect_planboing2+0x10>
    418e:	17 e0       	ldi	r17, 0x07	; 7
		delay_ms(speed);
	}
	
	for (i=7;i>=0;i--)
	{
		fill(0x00);
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
        setplane(plane,i);
    4196:	8e 2d       	mov	r24, r14
    4198:	61 2f       	mov	r22, r17
    419a:	0e 94 bc 09 	call	0x1378	; 0x1378 <setplane>
		delay_ms(speed);
    419e:	8f 2d       	mov	r24, r15
    41a0:	90 2f       	mov	r25, r16
    41a2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    41a6:	11 50       	subi	r17, 0x01	; 1
    41a8:	98 f7       	brcc	.-26     	; 0x4190 <effect_planboing2+0x28>
	}
}
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	ff 90       	pop	r15
    41b0:	ef 90       	pop	r14
    41b2:	08 95       	ret

000041b4 <effect_planboing>:
	
}

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
    41b4:	ef 92       	push	r14
    41b6:	ff 92       	push	r15
    41b8:	0f 93       	push	r16
    41ba:	1f 93       	push	r17
    41bc:	e8 2e       	mov	r14, r24
    41be:	f6 2e       	mov	r15, r22
    41c0:	07 2f       	mov	r16, r23
    41c2:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	for (i=0;i<8;i++)
	{
		fill(0x00);
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
        setplane(plane, i);
    41ca:	8e 2d       	mov	r24, r14
    41cc:	61 2f       	mov	r22, r17
    41ce:	0e 94 bc 09 	call	0x1378	; 0x1378 <setplane>
		delay_ms(speed);
    41d2:	8f 2d       	mov	r24, r15
    41d4:	90 2f       	mov	r25, r16
    41d6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    41da:	1f 5f       	subi	r17, 0xFF	; 255

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
	int i;
	for (i=0;i<8;i++)
    41dc:	18 30       	cpi	r17, 0x08	; 8
    41de:	91 f7       	brne	.-28     	; 0x41c4 <effect_planboing+0x10>
    41e0:	17 e0       	ldi	r17, 0x07	; 7
		delay_ms(speed);
	}
	
	for (i=7;i>=0;i--)
	{
		fill(0x00);
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
        setplane(plane,i);
    41e8:	8e 2d       	mov	r24, r14
    41ea:	61 2f       	mov	r22, r17
    41ec:	0e 94 bc 09 	call	0x1378	; 0x1378 <setplane>
		delay_ms(speed);
    41f0:	8f 2d       	mov	r24, r15
    41f2:	90 2f       	mov	r25, r16
    41f4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    41f8:	11 50       	subi	r17, 0x01	; 1
    41fa:	98 f7       	brcc	.-26     	; 0x41e2 <effect_planboing+0x2e>
	}
}
    41fc:	1f 91       	pop	r17
    41fe:	0f 91       	pop	r16
    4200:	ff 90       	pop	r15
    4202:	ef 90       	pop	r14
    4204:	08 95       	ret

00004206 <effect_test>:
}



void effect_test (void)
{
    4206:	af 92       	push	r10
    4208:	bf 92       	push	r11
    420a:	cf 92       	push	r12
    420c:	df 92       	push	r13
    420e:	ef 92       	push	r14
    4210:	ff 92       	push	r15
    4212:	0f 93       	push	r16
    4214:	1f 93       	push	r17
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	c0 e0       	ldi	r28, 0x00	; 0
    421c:	d0 e0       	ldi	r29, 0x00	; 0

	int x,y,i;

	for (i=0;i<1000;i++)
	{
		x = sin(i/8)*2+3.5;
    421e:	be 01       	movw	r22, r28
    4220:	83 e0       	ldi	r24, 0x03	; 3
    4222:	75 95       	asr	r23
    4224:	67 95       	ror	r22
    4226:	8a 95       	dec	r24
    4228:	e1 f7       	brne	.-8      	; 0x4222 <effect_test+0x1c>
    422a:	88 27       	eor	r24, r24
    422c:	77 fd       	sbrc	r23, 7
    422e:	80 95       	com	r24
    4230:	98 2f       	mov	r25, r24
    4232:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    4236:	7b 01       	movw	r14, r22
    4238:	8c 01       	movw	r16, r24
    423a:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    423e:	9b 01       	movw	r18, r22
    4240:	ac 01       	movw	r20, r24
    4242:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	40 e6       	ldi	r20, 0x60	; 96
    424c:	50 e4       	ldi	r21, 0x40	; 64
    424e:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    4252:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    4256:	5b 01       	movw	r10, r22
    4258:	6c 01       	movw	r12, r24
		y = cos(i/8)*2+3.5;
    425a:	c8 01       	movw	r24, r16
    425c:	b7 01       	movw	r22, r14
    425e:	0e 94 36 39 	call	0x726c	; 0x726c <cos>
    4262:	9b 01       	movw	r18, r22
    4264:	ac 01       	movw	r20, r24
    4266:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e6       	ldi	r20, 0x60	; 96
    4270:	50 e4       	ldi	r21, 0x40	; 64
    4272:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    4276:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    427a:	7b 01       	movw	r14, r22
    427c:	8c 01       	movw	r16, r24

		setvoxel(x,y,1);
    427e:	c5 01       	movw	r24, r10
    4280:	b7 01       	movw	r22, r14
    4282:	41 e0       	ldi	r20, 0x01	; 1
    4284:	50 e0       	ldi	r21, 0x00	; 0
    4286:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		setvoxel(x,y,1);
    428a:	c5 01       	movw	r24, r10
    428c:	b7 01       	movw	r22, r14
    428e:	41 e0       	ldi	r20, 0x01	; 1
    4290:	50 e0       	ldi	r21, 0x00	; 0
    4292:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		delay_ms(1000);
    4296:	88 ee       	ldi	r24, 0xE8	; 232
    4298:	93 e0       	ldi	r25, 0x03	; 3
    429a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		fill(0x00);
    429e:	80 e0       	ldi	r24, 0x00	; 0
    42a0:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
void effect_test (void)
{

	int x,y,i;

	for (i=0;i<1000;i++)
    42a4:	21 96       	adiw	r28, 0x01	; 1
    42a6:	83 e0       	ldi	r24, 0x03	; 3
    42a8:	c8 3e       	cpi	r28, 0xE8	; 232
    42aa:	d8 07       	cpc	r29, r24
    42ac:	09 f0       	breq	.+2      	; 0x42b0 <effect_test+0xaa>
    42ae:	b7 cf       	rjmp	.-146    	; 0x421e <effect_test+0x18>
		setvoxel(x,y,1);
		delay_ms(1000);
		fill(0x00);
	}

}
    42b0:	df 91       	pop	r29
    42b2:	cf 91       	pop	r28
    42b4:	1f 91       	pop	r17
    42b6:	0f 91       	pop	r16
    42b8:	ff 90       	pop	r15
    42ba:	ef 90       	pop	r14
    42bc:	df 90       	pop	r13
    42be:	cf 90       	pop	r12
    42c0:	bf 90       	pop	r11
    42c2:	af 90       	pop	r10
    42c4:	08 95       	ret

000042c6 <quad_ripples>:
		delay_ms(delay);
	}
}

void quad_ripples(int iterations, int delay)
{
    42c6:	2f 92       	push	r2
    42c8:	3f 92       	push	r3
    42ca:	4f 92       	push	r4
    42cc:	5f 92       	push	r5
    42ce:	6f 92       	push	r6
    42d0:	7f 92       	push	r7
    42d2:	8f 92       	push	r8
    42d4:	9f 92       	push	r9
    42d6:	af 92       	push	r10
    42d8:	bf 92       	push	r11
    42da:	cf 92       	push	r12
    42dc:	df 92       	push	r13
    42de:	ef 92       	push	r14
    42e0:	ff 92       	push	r15
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	df 93       	push	r29
    42e8:	cf 93       	push	r28
    42ea:	cd b7       	in	r28, 0x3d	; 61
    42ec:	de b7       	in	r29, 0x3e	; 62
    42ee:	c5 55       	subi	r28, 0x55	; 85
    42f0:	d0 40       	sbci	r29, 0x00	; 0
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	f8 94       	cli
    42f6:	de bf       	out	0x3e, r29	; 62
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	5c 01       	movw	r10, r24
    42fe:	66 96       	adiw	r28, 0x16	; 22
    4300:	7f af       	std	Y+63, r23	; 0x3f
    4302:	6e af       	std	Y+62, r22	; 0x3e
    4304:	66 97       	sbiw	r28, 0x16	; 22
	// 16 values for square root of a^2+b^2.  index a*4+b = 10*sqrt
	// This gives the distance to 3.5,3.5 from the point
	unsigned char sqrt_LUT[]={49,43,38,35,43,35,29,26,38,29,21,16,35,25,16,7};
    4306:	de 01       	movw	r26, r28
    4308:	11 96       	adiw	r26, 0x01	; 1
    430a:	e3 ea       	ldi	r30, 0xA3	; 163
    430c:	f0 e0       	ldi	r31, 0x00	; 0
    430e:	80 e1       	ldi	r24, 0x10	; 16
    4310:	01 90       	ld	r0, Z+
    4312:	0d 92       	st	X+, r0
    4314:	81 50       	subi	r24, 0x01	; 1
    4316:	e1 f7       	brne	.-8      	; 0x4310 <quad_ripples+0x4a>
	//LUT_START // Macro from new tottymath.  Commented and replaced with full code
	unsigned char LUT[65];
	init_LUT(LUT);
    4318:	ce 01       	movw	r24, r28
    431a:	41 96       	adiw	r24, 0x11	; 17
    431c:	0e 94 97 38 	call	0x712e	; 0x712e <init_LUT>
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
    4320:	c5 01       	movw	r24, r10
    4322:	88 0f       	add	r24, r24
    4324:	99 1f       	adc	r25, r25
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	64 96       	adiw	r28, 0x14	; 20
    432c:	9f af       	std	Y+63, r25	; 0x3f
    432e:	8e af       	std	Y+62, r24	; 0x3e
    4330:	64 97       	sbiw	r28, 0x14	; 20
    4332:	44 24       	eor	r4, r4
    4334:	55 24       	eor	r5, r5
    4336:	b0 c0       	rjmp	.+352    	; 0x4498 <quad_ripples+0x1d2>
	{
if (xit == 1) {i=iterations;break;}
    4338:	80 91 b3 01 	lds	r24, 0x01B3
    433c:	90 91 b4 01 	lds	r25, 0x01B4
    4340:	01 97       	sbiw	r24, 0x01	; 1
    4342:	09 f4       	brne	.+2      	; 0x4346 <quad_ripples+0x80>
    4344:	b1 c0       	rjmp	.+354    	; 0x44a8 <quad_ripples+0x1e2>
		fill(0x00);
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    434c:	88 24       	eor	r8, r8
    434e:	99 24       	eor	r9, r9
    4350:	84 c0       	rjmp	.+264    	; 0x445a <quad_ripples+0x194>
			{
				// x+y*4 gives no. from 0-15 for sqrt_LUT
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
    4352:	f1 01       	movw	r30, r2
    4354:	80 81       	ld	r24, Z
    4356:	b2 01       	movw	r22, r4
    4358:	68 0f       	add	r22, r24
    435a:	71 1d       	adc	r23, r1
    435c:	ce 01       	movw	r24, r28
    435e:	41 96       	adiw	r24, 0x11	; 17
    4360:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <totty_sin>
				// Use 4-way mirroring to save on calculations
				setvoxel(x,y,height);
    4364:	8c 53       	subi	r24, 0x3C	; 60
    4366:	9f 4f       	sbci	r25, 0xFF	; 255
    4368:	61 e3       	ldi	r22, 0x31	; 49
    436a:	70 e0       	ldi	r23, 0x00	; 0
    436c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    4370:	06 2f       	mov	r16, r22
    4372:	10 e0       	ldi	r17, 0x00	; 0
    4374:	c4 01       	movw	r24, r8
    4376:	b5 01       	movw	r22, r10
    4378:	a8 01       	movw	r20, r16
    437a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,y,height);
    437e:	c3 01       	movw	r24, r6
    4380:	b5 01       	movw	r22, r10
    4382:	a8 01       	movw	r20, r16
    4384:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    4388:	47 e0       	ldi	r20, 0x07	; 7
    438a:	c4 2e       	mov	r12, r20
    438c:	d1 2c       	mov	r13, r1
    438e:	ca 18       	sub	r12, r10
    4390:	db 08       	sbc	r13, r11
				setvoxel(x,7-y,height);
    4392:	c4 01       	movw	r24, r8
    4394:	b6 01       	movw	r22, r12
    4396:	a8 01       	movw	r20, r16
    4398:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-y,height);
    439c:	c3 01       	movw	r24, r6
    439e:	b6 01       	movw	r22, r12
    43a0:	a8 01       	movw	r20, r16
    43a2:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,y,7-height);
    43a6:	37 e0       	ldi	r19, 0x07	; 7
    43a8:	e3 2e       	mov	r14, r19
    43aa:	f1 2c       	mov	r15, r1
    43ac:	e0 1a       	sub	r14, r16
    43ae:	f1 0a       	sbc	r15, r17
    43b0:	c4 01       	movw	r24, r8
    43b2:	b5 01       	movw	r22, r10
    43b4:	a7 01       	movw	r20, r14
    43b6:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,y,7-height);
    43ba:	c3 01       	movw	r24, r6
    43bc:	b5 01       	movw	r22, r10
    43be:	a7 01       	movw	r20, r14
    43c0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,7-y,7-height);
    43c4:	c4 01       	movw	r24, r8
    43c6:	b6 01       	movw	r22, r12
    43c8:	a7 01       	movw	r20, r14
    43ca:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-y,7-height);
    43ce:	c3 01       	movw	r24, r6
    43d0:	b6 01       	movw	r22, r12
    43d2:	a7 01       	movw	r20, r14
    43d4:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,height,y);
    43d8:	c4 01       	movw	r24, r8
    43da:	b8 01       	movw	r22, r16
    43dc:	a5 01       	movw	r20, r10
    43de:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,height,y);
    43e2:	c3 01       	movw	r24, r6
    43e4:	b8 01       	movw	r22, r16
    43e6:	a5 01       	movw	r20, r10
    43e8:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,height,7-y);
    43ec:	c4 01       	movw	r24, r8
    43ee:	b8 01       	movw	r22, r16
    43f0:	a6 01       	movw	r20, r12
    43f2:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,height,7-y);
    43f6:	c3 01       	movw	r24, r6
    43f8:	b8 01       	movw	r22, r16
    43fa:	a6 01       	movw	r20, r12
    43fc:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,7-height,y);
    4400:	c4 01       	movw	r24, r8
    4402:	b7 01       	movw	r22, r14
    4404:	a5 01       	movw	r20, r10
    4406:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-height,y);
    440a:	c3 01       	movw	r24, r6
    440c:	b7 01       	movw	r22, r14
    440e:	a5 01       	movw	r20, r10
    4410:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,7-height,7-y);
    4414:	c4 01       	movw	r24, r8
    4416:	b7 01       	movw	r22, r14
    4418:	a6 01       	movw	r20, r12
    441a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-height,7-y);
    441e:	c3 01       	movw	r24, r6
    4420:	b7 01       	movw	r22, r14
    4422:	a6 01       	movw	r20, r12
    4424:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
if (xit == 1) {break;}
    4428:	80 91 b3 01 	lds	r24, 0x01B3
    442c:	90 91 b4 01 	lds	r25, 0x01B4
    4430:	01 97       	sbiw	r24, 0x01	; 1
    4432:	61 f0       	breq	.+24     	; 0x444c <quad_ripples+0x186>
    4434:	08 94       	sec
    4436:	a1 1c       	adc	r10, r1
    4438:	b1 1c       	adc	r11, r1
    443a:	84 e0       	ldi	r24, 0x04	; 4
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	28 0e       	add	r2, r24
    4440:	39 1e       	adc	r3, r25
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i=iterations;break;}
		fill(0x00);
		for (x=0;x<4;x++)
			for(y=0;y<4;y++)
    4442:	94 e0       	ldi	r25, 0x04	; 4
    4444:	a9 16       	cp	r10, r25
    4446:	b1 04       	cpc	r11, r1
    4448:	09 f0       	breq	.+2      	; 0x444c <quad_ripples+0x186>
    444a:	83 cf       	rjmp	.-250    	; 0x4352 <quad_ripples+0x8c>
    444c:	08 94       	sec
    444e:	81 1c       	adc	r8, r1
    4450:	91 1c       	adc	r9, r1
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i=iterations;break;}
		fill(0x00);
		for (x=0;x<4;x++)
    4452:	e4 e0       	ldi	r30, 0x04	; 4
    4454:	8e 16       	cp	r8, r30
    4456:	91 04       	cpc	r9, r1
    4458:	79 f0       	breq	.+30     	; 0x4478 <quad_ripples+0x1b2>
    445a:	21 e0       	ldi	r18, 0x01	; 1
    445c:	22 2e       	mov	r2, r18
    445e:	31 2c       	mov	r3, r1
    4460:	2c 0e       	add	r2, r28
    4462:	3d 1e       	adc	r3, r29
    4464:	28 0c       	add	r2, r8
    4466:	39 1c       	adc	r3, r9
    4468:	aa 24       	eor	r10, r10
    446a:	bb 24       	eor	r11, r11
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
				// Use 4-way mirroring to save on calculations
				setvoxel(x,y,height);
    446c:	97 e0       	ldi	r25, 0x07	; 7
    446e:	69 2e       	mov	r6, r25
    4470:	71 2c       	mov	r7, r1
    4472:	68 18       	sub	r6, r8
    4474:	79 08       	sbc	r7, r9
    4476:	6d cf       	rjmp	.-294    	; 0x4352 <quad_ripples+0x8c>
				setvoxel(7-x,7-height,7-y);
if (xit == 1) {break;}


			}
		delay_ms(delay);
    4478:	66 96       	adiw	r28, 0x16	; 22
    447a:	8e ad       	ldd	r24, Y+62	; 0x3e
    447c:	9f ad       	ldd	r25, Y+63	; 0x3f
    447e:	66 97       	sbiw	r28, 0x16	; 22
    4480:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
if (xit == 1) {break;}
    4484:	80 91 b3 01 	lds	r24, 0x01B3
    4488:	90 91 b4 01 	lds	r25, 0x01B4
    448c:	01 97       	sbiw	r24, 0x01	; 1
    448e:	61 f0       	breq	.+24     	; 0x44a8 <quad_ripples+0x1e2>
	//LUT_START // Macro from new tottymath.  Commented and replaced with full code
	unsigned char LUT[65];
	init_LUT(LUT);
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
    4490:	84 e0       	ldi	r24, 0x04	; 4
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	48 0e       	add	r4, r24
    4496:	59 1e       	adc	r5, r25
    4498:	64 96       	adiw	r28, 0x14	; 20
    449a:	ee ad       	ldd	r30, Y+62	; 0x3e
    449c:	ff ad       	ldd	r31, Y+63	; 0x3f
    449e:	64 97       	sbiw	r28, 0x14	; 20
    44a0:	4e 16       	cp	r4, r30
    44a2:	5f 06       	cpc	r5, r31
    44a4:	0c f4       	brge	.+2      	; 0x44a8 <quad_ripples+0x1e2>
    44a6:	48 cf       	rjmp	.-368    	; 0x4338 <quad_ripples+0x72>

			}
		delay_ms(delay);
if (xit == 1) {break;}
	}
}
    44a8:	cb 5a       	subi	r28, 0xAB	; 171
    44aa:	df 4f       	sbci	r29, 0xFF	; 255
    44ac:	0f b6       	in	r0, 0x3f	; 63
    44ae:	f8 94       	cli
    44b0:	de bf       	out	0x3e, r29	; 62
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	cd bf       	out	0x3d, r28	; 61
    44b6:	cf 91       	pop	r28
    44b8:	df 91       	pop	r29
    44ba:	1f 91       	pop	r17
    44bc:	0f 91       	pop	r16
    44be:	ff 90       	pop	r15
    44c0:	ef 90       	pop	r14
    44c2:	df 90       	pop	r13
    44c4:	cf 90       	pop	r12
    44c6:	bf 90       	pop	r11
    44c8:	af 90       	pop	r10
    44ca:	9f 90       	pop	r9
    44cc:	8f 90       	pop	r8
    44ce:	7f 90       	pop	r7
    44d0:	6f 90       	pop	r6
    44d2:	5f 90       	pop	r5
    44d4:	4f 90       	pop	r4
    44d6:	3f 90       	pop	r3
    44d8:	2f 90       	pop	r2
    44da:	08 95       	ret

000044dc <mirror_ripples>:

}


void mirror_ripples(int iterations, int delay)
{
    44dc:	2f 92       	push	r2
    44de:	3f 92       	push	r3
    44e0:	4f 92       	push	r4
    44e2:	5f 92       	push	r5
    44e4:	6f 92       	push	r6
    44e6:	7f 92       	push	r7
    44e8:	8f 92       	push	r8
    44ea:	9f 92       	push	r9
    44ec:	af 92       	push	r10
    44ee:	bf 92       	push	r11
    44f0:	cf 92       	push	r12
    44f2:	df 92       	push	r13
    44f4:	ef 92       	push	r14
    44f6:	ff 92       	push	r15
    44f8:	0f 93       	push	r16
    44fa:	1f 93       	push	r17
    44fc:	df 93       	push	r29
    44fe:	cf 93       	push	r28
    4500:	cd b7       	in	r28, 0x3d	; 61
    4502:	de b7       	in	r29, 0x3e	; 62
    4504:	c5 55       	subi	r28, 0x55	; 85
    4506:	d0 40       	sbci	r29, 0x00	; 0
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	f8 94       	cli
    450c:	de bf       	out	0x3e, r29	; 62
    450e:	0f be       	out	0x3f, r0	; 63
    4510:	cd bf       	out	0x3d, r28	; 61
    4512:	6c 01       	movw	r12, r24
    4514:	66 96       	adiw	r28, 0x16	; 22
    4516:	7f af       	std	Y+63, r23	; 0x3f
    4518:	6e af       	std	Y+62, r22	; 0x3e
    451a:	66 97       	sbiw	r28, 0x16	; 22

	// 16 values for square root of a^2+b^2.  index a*4+b = 10*sqrt
	// This gives the distance to 3.5,3.5 from the point
	unsigned char sqrt_LUT[]={49,43,38,35,43,35,29,26,38,29,21,16,35,25,16,7};
    451c:	de 01       	movw	r26, r28
    451e:	11 96       	adiw	r26, 0x01	; 1
    4520:	e3 eb       	ldi	r30, 0xB3	; 179
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	80 e1       	ldi	r24, 0x10	; 16
    4526:	01 90       	ld	r0, Z+
    4528:	0d 92       	st	X+, r0
    452a:	81 50       	subi	r24, 0x01	; 1
    452c:	e1 f7       	brne	.-8      	; 0x4526 <mirror_ripples+0x4a>
	//LUT_START // Macro from new tottymath.  Commented and replaced with full code
	unsigned char LUT[65];
	init_LUT(LUT);
    452e:	ce 01       	movw	r24, r28
    4530:	41 96       	adiw	r24, 0x11	; 17
    4532:	0e 94 97 38 	call	0x712e	; 0x712e <init_LUT>
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
    4536:	c6 01       	movw	r24, r12
    4538:	88 0f       	add	r24, r24
    453a:	99 1f       	adc	r25, r25
    453c:	88 0f       	add	r24, r24
    453e:	99 1f       	adc	r25, r25
    4540:	64 96       	adiw	r28, 0x14	; 20
    4542:	9f af       	std	Y+63, r25	; 0x3f
    4544:	8e af       	std	Y+62, r24	; 0x3e
    4546:	64 97       	sbiw	r28, 0x14	; 20
    4548:	44 24       	eor	r4, r4
    454a:	55 24       	eor	r5, r5
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
				// Use 4-way mirroring to save on calculations
				setvoxel(x,y,height);
    454c:	77 e0       	ldi	r23, 0x07	; 7
    454e:	27 2e       	mov	r2, r23
    4550:	31 2c       	mov	r3, r1
    4552:	83 c0       	rjmp	.+262    	; 0x465a <mirror_ripples+0x17e>
	init_LUT(LUT);
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i=iterations;break;}
    4554:	80 91 b3 01 	lds	r24, 0x01B3
    4558:	90 91 b4 01 	lds	r25, 0x01B4
    455c:	01 97       	sbiw	r24, 0x01	; 1
    455e:	09 f4       	brne	.+2      	; 0x4562 <mirror_ripples+0x86>
    4560:	84 c0       	rjmp	.+264    	; 0x466a <mirror_ripples+0x18e>
		fill(0x00);
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    4568:	aa 24       	eor	r10, r10
    456a:	bb 24       	eor	r11, r11
    456c:	59 c0       	rjmp	.+178    	; 0x4620 <mirror_ripples+0x144>
			{
				// x+y*4 gives no. from 0-15 for sqrt_LUT
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
    456e:	f3 01       	movw	r30, r6
    4570:	80 81       	ld	r24, Z
    4572:	b2 01       	movw	r22, r4
    4574:	68 0f       	add	r22, r24
    4576:	71 1d       	adc	r23, r1
    4578:	ce 01       	movw	r24, r28
    457a:	41 96       	adiw	r24, 0x11	; 17
    457c:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <totty_sin>
				// Use 4-way mirroring to save on calculations
				setvoxel(x,y,height);
    4580:	8c 53       	subi	r24, 0x3C	; 60
    4582:	9f 4f       	sbci	r25, 0xFF	; 255
    4584:	61 e3       	ldi	r22, 0x31	; 49
    4586:	70 e0       	ldi	r23, 0x00	; 0
    4588:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    458c:	06 2f       	mov	r16, r22
    458e:	10 e0       	ldi	r17, 0x00	; 0
    4590:	c5 01       	movw	r24, r10
    4592:	b6 01       	movw	r22, r12
    4594:	a8 01       	movw	r20, r16
    4596:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,y,height);
    459a:	c4 01       	movw	r24, r8
    459c:	b6 01       	movw	r22, r12
    459e:	a8 01       	movw	r20, r16
    45a0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    45a4:	71 01       	movw	r14, r2
    45a6:	ec 18       	sub	r14, r12
    45a8:	fd 08       	sbc	r15, r13
				setvoxel(x,7-y,height);
    45aa:	c5 01       	movw	r24, r10
    45ac:	b7 01       	movw	r22, r14
    45ae:	a8 01       	movw	r20, r16
    45b0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-y,height);
    45b4:	c4 01       	movw	r24, r8
    45b6:	b7 01       	movw	r22, r14
    45b8:	a8 01       	movw	r20, r16
    45ba:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,y,7-height);
    45be:	c1 01       	movw	r24, r2
    45c0:	80 1b       	sub	r24, r16
    45c2:	91 0b       	sbc	r25, r17
    45c4:	8c 01       	movw	r16, r24
    45c6:	c5 01       	movw	r24, r10
    45c8:	b6 01       	movw	r22, r12
    45ca:	a8 01       	movw	r20, r16
    45cc:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,y,7-height);
    45d0:	c4 01       	movw	r24, r8
    45d2:	b6 01       	movw	r22, r12
    45d4:	a8 01       	movw	r20, r16
    45d6:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,7-y,7-height);
    45da:	c5 01       	movw	r24, r10
    45dc:	b7 01       	movw	r22, r14
    45de:	a8 01       	movw	r20, r16
    45e0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-y,7-height);
    45e4:	c4 01       	movw	r24, r8
    45e6:	b7 01       	movw	r22, r14
    45e8:	a8 01       	movw	r20, r16
    45ea:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
if (xit == 1) {break;}
    45ee:	80 91 b3 01 	lds	r24, 0x01B3
    45f2:	90 91 b4 01 	lds	r25, 0x01B4
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	61 f0       	breq	.+24     	; 0x4612 <mirror_ripples+0x136>
    45fa:	08 94       	sec
    45fc:	c1 1c       	adc	r12, r1
    45fe:	d1 1c       	adc	r13, r1
    4600:	e4 e0       	ldi	r30, 0x04	; 4
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	6e 0e       	add	r6, r30
    4606:	7f 1e       	adc	r7, r31
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i=iterations;break;}
		fill(0x00);
		for (x=0;x<4;x++)
			for(y=0;y<4;y++)
    4608:	f4 e0       	ldi	r31, 0x04	; 4
    460a:	cf 16       	cp	r12, r31
    460c:	d1 04       	cpc	r13, r1
    460e:	09 f0       	breq	.+2      	; 0x4612 <mirror_ripples+0x136>
    4610:	ae cf       	rjmp	.-164    	; 0x456e <mirror_ripples+0x92>
    4612:	08 94       	sec
    4614:	a1 1c       	adc	r10, r1
    4616:	b1 1c       	adc	r11, r1
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i=iterations;break;}
		fill(0x00);
		for (x=0;x<4;x++)
    4618:	84 e0       	ldi	r24, 0x04	; 4
    461a:	a8 16       	cp	r10, r24
    461c:	b1 04       	cpc	r11, r1
    461e:	69 f0       	breq	.+26     	; 0x463a <mirror_ripples+0x15e>
    4620:	61 e0       	ldi	r22, 0x01	; 1
    4622:	66 2e       	mov	r6, r22
    4624:	71 2c       	mov	r7, r1
    4626:	6c 0e       	add	r6, r28
    4628:	7d 1e       	adc	r7, r29
    462a:	6a 0c       	add	r6, r10
    462c:	7b 1c       	adc	r7, r11
    462e:	cc 24       	eor	r12, r12
    4630:	dd 24       	eor	r13, r13
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
				// Use 4-way mirroring to save on calculations
				setvoxel(x,y,height);
    4632:	41 01       	movw	r8, r2
    4634:	8a 18       	sub	r8, r10
    4636:	9b 08       	sbc	r9, r11
    4638:	9a cf       	rjmp	.-204    	; 0x456e <mirror_ripples+0x92>
				setvoxel(x,7-y,7-height);
				setvoxel(7-x,7-y,7-height);
if (xit == 1) {break;}

			}
if (xit == 1) {break;}
    463a:	80 91 b3 01 	lds	r24, 0x01B3
    463e:	90 91 b4 01 	lds	r25, 0x01B4
    4642:	01 97       	sbiw	r24, 0x01	; 1
    4644:	91 f0       	breq	.+36     	; 0x466a <mirror_ripples+0x18e>
		delay_ms(delay);
    4646:	66 96       	adiw	r28, 0x16	; 22
    4648:	8e ad       	ldd	r24, Y+62	; 0x3e
    464a:	9f ad       	ldd	r25, Y+63	; 0x3f
    464c:	66 97       	sbiw	r28, 0x16	; 22
    464e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	//LUT_START // Macro from new tottymath.  Commented and replaced with full code
	unsigned char LUT[65];
	init_LUT(LUT);
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
    4652:	e4 e0       	ldi	r30, 0x04	; 4
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	4e 0e       	add	r4, r30
    4658:	5f 1e       	adc	r5, r31
    465a:	64 96       	adiw	r28, 0x14	; 20
    465c:	8e ad       	ldd	r24, Y+62	; 0x3e
    465e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4660:	64 97       	sbiw	r28, 0x14	; 20
    4662:	48 16       	cp	r4, r24
    4664:	59 06       	cpc	r5, r25
    4666:	0c f4       	brge	.+2      	; 0x466a <mirror_ripples+0x18e>
    4668:	75 cf       	rjmp	.-278    	; 0x4554 <mirror_ripples+0x78>

			}
if (xit == 1) {break;}
		delay_ms(delay);
	}
}
    466a:	cb 5a       	subi	r28, 0xAB	; 171
    466c:	df 4f       	sbci	r29, 0xFF	; 255
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	f8 94       	cli
    4672:	de bf       	out	0x3e, r29	; 62
    4674:	0f be       	out	0x3f, r0	; 63
    4676:	cd bf       	out	0x3d, r28	; 61
    4678:	cf 91       	pop	r28
    467a:	df 91       	pop	r29
    467c:	1f 91       	pop	r17
    467e:	0f 91       	pop	r16
    4680:	ff 90       	pop	r15
    4682:	ef 90       	pop	r14
    4684:	df 90       	pop	r13
    4686:	cf 90       	pop	r12
    4688:	bf 90       	pop	r11
    468a:	af 90       	pop	r10
    468c:	9f 90       	pop	r9
    468e:	8f 90       	pop	r8
    4690:	7f 90       	pop	r7
    4692:	6f 90       	pop	r6
    4694:	5f 90       	pop	r5
    4696:	4f 90       	pop	r4
    4698:	3f 90       	pop	r3
    469a:	2f 90       	pop	r2
    469c:	08 95       	ret

0000469e <side_ripples>:
		delay_ms(delay);
	}
}

void side_ripples(int iterations, int delay)
{
    469e:	2f 92       	push	r2
    46a0:	3f 92       	push	r3
    46a2:	4f 92       	push	r4
    46a4:	5f 92       	push	r5
    46a6:	6f 92       	push	r6
    46a8:	7f 92       	push	r7
    46aa:	8f 92       	push	r8
    46ac:	9f 92       	push	r9
    46ae:	af 92       	push	r10
    46b0:	bf 92       	push	r11
    46b2:	cf 92       	push	r12
    46b4:	df 92       	push	r13
    46b6:	ef 92       	push	r14
    46b8:	ff 92       	push	r15
    46ba:	0f 93       	push	r16
    46bc:	1f 93       	push	r17
    46be:	df 93       	push	r29
    46c0:	cf 93       	push	r28
    46c2:	cd b7       	in	r28, 0x3d	; 61
    46c4:	de b7       	in	r29, 0x3e	; 62
    46c6:	c5 55       	subi	r28, 0x55	; 85
    46c8:	d0 40       	sbci	r29, 0x00	; 0
    46ca:	0f b6       	in	r0, 0x3f	; 63
    46cc:	f8 94       	cli
    46ce:	de bf       	out	0x3e, r29	; 62
    46d0:	0f be       	out	0x3f, r0	; 63
    46d2:	cd bf       	out	0x3d, r28	; 61
    46d4:	6c 01       	movw	r12, r24
    46d6:	66 96       	adiw	r28, 0x16	; 22
    46d8:	7f af       	std	Y+63, r23	; 0x3f
    46da:	6e af       	std	Y+62, r22	; 0x3e
    46dc:	66 97       	sbiw	r28, 0x16	; 22
	// 16 values for square root of a^2+b^2.  index a*4+b = 10*sqrt
	// This gives the distance to 3.5,3.5 from the point
	unsigned char sqrt_LUT[]={49,43,38,35,43,35,29,26,38,29,21,16,35,25,16,7};
    46de:	de 01       	movw	r26, r28
    46e0:	11 96       	adiw	r26, 0x01	; 1
    46e2:	e3 ec       	ldi	r30, 0xC3	; 195
    46e4:	f0 e0       	ldi	r31, 0x00	; 0
    46e6:	80 e1       	ldi	r24, 0x10	; 16
    46e8:	01 90       	ld	r0, Z+
    46ea:	0d 92       	st	X+, r0
    46ec:	81 50       	subi	r24, 0x01	; 1
    46ee:	e1 f7       	brne	.-8      	; 0x46e8 <side_ripples+0x4a>
	//LUT_START // Macro from new tottymath.  Commented and replaced with full code
	unsigned char LUT[65];
	init_LUT(LUT);
    46f0:	ce 01       	movw	r24, r28
    46f2:	41 96       	adiw	r24, 0x11	; 17
    46f4:	0e 94 97 38 	call	0x712e	; 0x712e <init_LUT>
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
    46f8:	c6 01       	movw	r24, r12
    46fa:	88 0f       	add	r24, r24
    46fc:	99 1f       	adc	r25, r25
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	64 96       	adiw	r28, 0x14	; 20
    4704:	9f af       	std	Y+63, r25	; 0x3f
    4706:	8e af       	std	Y+62, r24	; 0x3e
    4708:	64 97       	sbiw	r28, 0x14	; 20
    470a:	44 24       	eor	r4, r4
    470c:	55 24       	eor	r5, r5
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
				// Use 4-way mirroring to save on calculations
				setvoxel(x,height,y);
    470e:	a7 e0       	ldi	r26, 0x07	; 7
    4710:	2a 2e       	mov	r2, r26
    4712:	31 2c       	mov	r3, r1
    4714:	83 c0       	rjmp	.+262    	; 0x481c <side_ripples+0x17e>
	init_LUT(LUT);
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i=iterations;break;}
    4716:	80 91 b3 01 	lds	r24, 0x01B3
    471a:	90 91 b4 01 	lds	r25, 0x01B4
    471e:	01 97       	sbiw	r24, 0x01	; 1
    4720:	09 f4       	brne	.+2      	; 0x4724 <side_ripples+0x86>
    4722:	84 c0       	rjmp	.+264    	; 0x482c <side_ripples+0x18e>
		fill(0x00);
    4724:	80 e0       	ldi	r24, 0x00	; 0
    4726:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    472a:	aa 24       	eor	r10, r10
    472c:	bb 24       	eor	r11, r11
    472e:	59 c0       	rjmp	.+178    	; 0x47e2 <side_ripples+0x144>
			{
				// x+y*4 gives no. from 0-15 for sqrt_LUT
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
    4730:	f3 01       	movw	r30, r6
    4732:	80 81       	ld	r24, Z
    4734:	b2 01       	movw	r22, r4
    4736:	68 0f       	add	r22, r24
    4738:	71 1d       	adc	r23, r1
    473a:	ce 01       	movw	r24, r28
    473c:	41 96       	adiw	r24, 0x11	; 17
    473e:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <totty_sin>
				// Use 4-way mirroring to save on calculations
				setvoxel(x,height,y);
    4742:	8c 53       	subi	r24, 0x3C	; 60
    4744:	9f 4f       	sbci	r25, 0xFF	; 255
    4746:	61 e3       	ldi	r22, 0x31	; 49
    4748:	70 e0       	ldi	r23, 0x00	; 0
    474a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    474e:	06 2f       	mov	r16, r22
    4750:	10 e0       	ldi	r17, 0x00	; 0
    4752:	c5 01       	movw	r24, r10
    4754:	b8 01       	movw	r22, r16
    4756:	a6 01       	movw	r20, r12
    4758:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,height,y);
    475c:	c4 01       	movw	r24, r8
    475e:	b8 01       	movw	r22, r16
    4760:	a6 01       	movw	r20, r12
    4762:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    4766:	71 01       	movw	r14, r2
    4768:	ec 18       	sub	r14, r12
    476a:	fd 08       	sbc	r15, r13
				setvoxel(x,height,7-y);
    476c:	c5 01       	movw	r24, r10
    476e:	b8 01       	movw	r22, r16
    4770:	a7 01       	movw	r20, r14
    4772:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,height,7-y);
    4776:	c4 01       	movw	r24, r8
    4778:	b8 01       	movw	r22, r16
    477a:	a7 01       	movw	r20, r14
    477c:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,7-height,y);
    4780:	c1 01       	movw	r24, r2
    4782:	80 1b       	sub	r24, r16
    4784:	91 0b       	sbc	r25, r17
    4786:	8c 01       	movw	r16, r24
    4788:	c5 01       	movw	r24, r10
    478a:	b8 01       	movw	r22, r16
    478c:	a6 01       	movw	r20, r12
    478e:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-height,y);
    4792:	c4 01       	movw	r24, r8
    4794:	b8 01       	movw	r22, r16
    4796:	a6 01       	movw	r20, r12
    4798:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(x,7-height,7-y);
    479c:	c5 01       	movw	r24, r10
    479e:	b8 01       	movw	r22, r16
    47a0:	a7 01       	movw	r20, r14
    47a2:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-height,7-y);
    47a6:	c4 01       	movw	r24, r8
    47a8:	b8 01       	movw	r22, r16
    47aa:	a7 01       	movw	r20, r14
    47ac:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
if (xit == 1) {break;}
    47b0:	80 91 b3 01 	lds	r24, 0x01B3
    47b4:	90 91 b4 01 	lds	r25, 0x01B4
    47b8:	01 97       	sbiw	r24, 0x01	; 1
    47ba:	61 f0       	breq	.+24     	; 0x47d4 <side_ripples+0x136>
    47bc:	08 94       	sec
    47be:	c1 1c       	adc	r12, r1
    47c0:	d1 1c       	adc	r13, r1
    47c2:	e4 e0       	ldi	r30, 0x04	; 4
    47c4:	f0 e0       	ldi	r31, 0x00	; 0
    47c6:	6e 0e       	add	r6, r30
    47c8:	7f 1e       	adc	r7, r31
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i=iterations;break;}
		fill(0x00);
		for (x=0;x<4;x++)
			for(y=0;y<4;y++)
    47ca:	f4 e0       	ldi	r31, 0x04	; 4
    47cc:	cf 16       	cp	r12, r31
    47ce:	d1 04       	cpc	r13, r1
    47d0:	09 f0       	breq	.+2      	; 0x47d4 <side_ripples+0x136>
    47d2:	ae cf       	rjmp	.-164    	; 0x4730 <side_ripples+0x92>
    47d4:	08 94       	sec
    47d6:	a1 1c       	adc	r10, r1
    47d8:	b1 1c       	adc	r11, r1
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i=iterations;break;}
		fill(0x00);
		for (x=0;x<4;x++)
    47da:	84 e0       	ldi	r24, 0x04	; 4
    47dc:	a8 16       	cp	r10, r24
    47de:	b1 04       	cpc	r11, r1
    47e0:	69 f0       	breq	.+26     	; 0x47fc <side_ripples+0x15e>
    47e2:	f1 e0       	ldi	r31, 0x01	; 1
    47e4:	6f 2e       	mov	r6, r31
    47e6:	71 2c       	mov	r7, r1
    47e8:	6c 0e       	add	r6, r28
    47ea:	7d 1e       	adc	r7, r29
    47ec:	6a 0c       	add	r6, r10
    47ee:	7b 1c       	adc	r7, r11
    47f0:	cc 24       	eor	r12, r12
    47f2:	dd 24       	eor	r13, r13
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
				// Use 4-way mirroring to save on calculations
				setvoxel(x,height,y);
    47f4:	41 01       	movw	r8, r2
    47f6:	8a 18       	sub	r8, r10
    47f8:	9b 08       	sbc	r9, r11
    47fa:	9a cf       	rjmp	.-204    	; 0x4730 <side_ripples+0x92>
				setvoxel(x,7-height,7-y);
				setvoxel(7-x,7-height,7-y);
if (xit == 1) {break;}

			}
if (xit == 1) {break;}
    47fc:	80 91 b3 01 	lds	r24, 0x01B3
    4800:	90 91 b4 01 	lds	r25, 0x01B4
    4804:	01 97       	sbiw	r24, 0x01	; 1
    4806:	91 f0       	breq	.+36     	; 0x482c <side_ripples+0x18e>
		delay_ms(delay);
    4808:	66 96       	adiw	r28, 0x16	; 22
    480a:	8e ad       	ldd	r24, Y+62	; 0x3e
    480c:	9f ad       	ldd	r25, Y+63	; 0x3f
    480e:	66 97       	sbiw	r28, 0x16	; 22
    4810:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	//LUT_START // Macro from new tottymath.  Commented and replaced with full code
	unsigned char LUT[65];
	init_LUT(LUT);
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
    4814:	e4 e0       	ldi	r30, 0x04	; 4
    4816:	f0 e0       	ldi	r31, 0x00	; 0
    4818:	4e 0e       	add	r4, r30
    481a:	5f 1e       	adc	r5, r31
    481c:	64 96       	adiw	r28, 0x14	; 20
    481e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4820:	9f ad       	ldd	r25, Y+63	; 0x3f
    4822:	64 97       	sbiw	r28, 0x14	; 20
    4824:	48 16       	cp	r4, r24
    4826:	59 06       	cpc	r5, r25
    4828:	0c f4       	brge	.+2      	; 0x482c <side_ripples+0x18e>
    482a:	75 cf       	rjmp	.-278    	; 0x4716 <side_ripples+0x78>
			}
if (xit == 1) {break;}
		delay_ms(delay);
	}

}
    482c:	cb 5a       	subi	r28, 0xAB	; 171
    482e:	df 4f       	sbci	r29, 0xFF	; 255
    4830:	0f b6       	in	r0, 0x3f	; 63
    4832:	f8 94       	cli
    4834:	de bf       	out	0x3e, r29	; 62
    4836:	0f be       	out	0x3f, r0	; 63
    4838:	cd bf       	out	0x3d, r28	; 61
    483a:	cf 91       	pop	r28
    483c:	df 91       	pop	r29
    483e:	1f 91       	pop	r17
    4840:	0f 91       	pop	r16
    4842:	ff 90       	pop	r15
    4844:	ef 90       	pop	r14
    4846:	df 90       	pop	r13
    4848:	cf 90       	pop	r12
    484a:	bf 90       	pop	r11
    484c:	af 90       	pop	r10
    484e:	9f 90       	pop	r9
    4850:	8f 90       	pop	r8
    4852:	7f 90       	pop	r7
    4854:	6f 90       	pop	r6
    4856:	5f 90       	pop	r5
    4858:	4f 90       	pop	r4
    485a:	3f 90       	pop	r3
    485c:	2f 90       	pop	r2
    485e:	08 95       	ret

00004860 <int_ripples>:
if (xit == 1) {break;}
	} // Main loop
}

void int_ripples(int iterations, int delay)
{
    4860:	2f 92       	push	r2
    4862:	3f 92       	push	r3
    4864:	4f 92       	push	r4
    4866:	5f 92       	push	r5
    4868:	6f 92       	push	r6
    486a:	7f 92       	push	r7
    486c:	8f 92       	push	r8
    486e:	9f 92       	push	r9
    4870:	af 92       	push	r10
    4872:	bf 92       	push	r11
    4874:	cf 92       	push	r12
    4876:	df 92       	push	r13
    4878:	ff 92       	push	r15
    487a:	0f 93       	push	r16
    487c:	1f 93       	push	r17
    487e:	df 93       	push	r29
    4880:	cf 93       	push	r28
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
    4886:	c3 55       	subi	r28, 0x53	; 83
    4888:	d0 40       	sbci	r29, 0x00	; 0
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	de bf       	out	0x3e, r29	; 62
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	6c 01       	movw	r12, r24
    4896:	64 96       	adiw	r28, 0x14	; 20
    4898:	7f af       	std	Y+63, r23	; 0x3f
    489a:	6e af       	std	Y+62, r22	; 0x3e
    489c:	64 97       	sbiw	r28, 0x14	; 20
// if (xit == 1) {break;}
	// 16 values for square root of a^2+b^2.  index a*4+b = 10*sqrt
	// This gives the distance to 3.5,3.5 from the point
	unsigned char sqrt_LUT[]={49,43,38,35,43,35,29,26,38,29,21,16,35,25,16,7};
    489e:	de 01       	movw	r26, r28
    48a0:	11 96       	adiw	r26, 0x01	; 1
    48a2:	e3 ed       	ldi	r30, 0xD3	; 211
    48a4:	f0 e0       	ldi	r31, 0x00	; 0
    48a6:	80 e1       	ldi	r24, 0x10	; 16
    48a8:	01 90       	ld	r0, Z+
    48aa:	0d 92       	st	X+, r0
    48ac:	81 50       	subi	r24, 0x01	; 1
    48ae:	e1 f7       	brne	.-8      	; 0x48a8 <int_ripples+0x48>
	//LUT_START // Macro from new tottymath.  Commented and replaced with full code
	unsigned char LUT[65];
	init_LUT(LUT);
    48b0:	ce 01       	movw	r24, r28
    48b2:	41 96       	adiw	r24, 0x11	; 17
    48b4:	0e 94 97 38 	call	0x712e	; 0x712e <init_LUT>
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
    48b8:	16 01       	movw	r2, r12
    48ba:	22 0c       	add	r2, r2
    48bc:	33 1c       	adc	r3, r3
    48be:	22 0c       	add	r2, r2
    48c0:	33 1c       	adc	r3, r3
    48c2:	66 24       	eor	r6, r6
    48c4:	77 24       	eor	r7, r7
    48c6:	6a c0       	rjmp	.+212    	; 0x499c <int_ripples+0x13c>
	{
if (xit == 1) {i = iterations;break;}
    48c8:	80 91 b3 01 	lds	r24, 0x01B3
    48cc:	90 91 b4 01 	lds	r25, 0x01B4
    48d0:	01 97       	sbiw	r24, 0x01	; 1
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <int_ripples+0x76>
    48d4:	67 c0       	rjmp	.+206    	; 0x49a4 <int_ripples+0x144>
		fill(0x00);
    48d6:	80 e0       	ldi	r24, 0x00	; 0
    48d8:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    48dc:	aa 24       	eor	r10, r10
    48de:	bb 24       	eor	r11, r11
    48e0:	3e c0       	rjmp	.+124    	; 0x495e <int_ripples+0xfe>
			{
				// x+y*4 gives no. from 0-15 for sqrt_LUT
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
    48e2:	f4 01       	movw	r30, r8
    48e4:	80 81       	ld	r24, Z
    48e6:	b3 01       	movw	r22, r6
    48e8:	68 0f       	add	r22, r24
    48ea:	71 1d       	adc	r23, r1
    48ec:	ce 01       	movw	r24, r28
    48ee:	41 96       	adiw	r24, 0x11	; 17
    48f0:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <totty_sin>
				// Use 4-way mirroring to save on calculations
				setvoxel(x,y,height);
    48f4:	8c 53       	subi	r24, 0x3C	; 60
    48f6:	9f 4f       	sbci	r25, 0xFF	; 255
    48f8:	61 e3       	ldi	r22, 0x31	; 49
    48fa:	70 e0       	ldi	r23, 0x00	; 0
    48fc:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    4900:	f6 2e       	mov	r15, r22
    4902:	c5 01       	movw	r24, r10
    4904:	b6 01       	movw	r22, r12
    4906:	4f 2d       	mov	r20, r15
    4908:	50 e0       	ldi	r21, 0x00	; 0
    490a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,y,height);
    490e:	c2 01       	movw	r24, r4
    4910:	b6 01       	movw	r22, r12
    4912:	4f 2d       	mov	r20, r15
    4914:	50 e0       	ldi	r21, 0x00	; 0
    4916:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    491a:	07 e0       	ldi	r16, 0x07	; 7
    491c:	10 e0       	ldi	r17, 0x00	; 0
    491e:	0c 19       	sub	r16, r12
    4920:	1d 09       	sbc	r17, r13
				setvoxel(x,7-y,height);
    4922:	c5 01       	movw	r24, r10
    4924:	b8 01       	movw	r22, r16
    4926:	4f 2d       	mov	r20, r15
    4928:	50 e0       	ldi	r21, 0x00	; 0
    492a:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				setvoxel(7-x,7-y,height);
    492e:	c2 01       	movw	r24, r4
    4930:	b8 01       	movw	r22, r16
    4932:	4f 2d       	mov	r20, r15
    4934:	50 e0       	ldi	r21, 0x00	; 0
    4936:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
    493a:	08 94       	sec
    493c:	c1 1c       	adc	r12, r1
    493e:	d1 1c       	adc	r13, r1
    4940:	84 e0       	ldi	r24, 0x04	; 4
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	88 0e       	add	r8, r24
    4946:	99 1e       	adc	r9, r25
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i = iterations;break;}
		fill(0x00);
		for (x=0;x<4;x++)
			for(y=0;y<4;y++)
    4948:	94 e0       	ldi	r25, 0x04	; 4
    494a:	c9 16       	cp	r12, r25
    494c:	d1 04       	cpc	r13, r1
    494e:	49 f6       	brne	.-110    	; 0x48e2 <int_ripples+0x82>
    4950:	08 94       	sec
    4952:	a1 1c       	adc	r10, r1
    4954:	b1 1c       	adc	r11, r1
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
	{
if (xit == 1) {i = iterations;break;}
		fill(0x00);
		for (x=0;x<4;x++)
    4956:	e4 e0       	ldi	r30, 0x04	; 4
    4958:	ae 16       	cp	r10, r30
    495a:	b1 04       	cpc	r11, r1
    495c:	79 f0       	breq	.+30     	; 0x497c <int_ripples+0x11c>
    495e:	01 e0       	ldi	r16, 0x01	; 1
    4960:	80 2e       	mov	r8, r16
    4962:	91 2c       	mov	r9, r1
    4964:	8c 0e       	add	r8, r28
    4966:	9d 1e       	adc	r9, r29
    4968:	8a 0c       	add	r8, r10
    496a:	9b 1c       	adc	r9, r11
    496c:	cc 24       	eor	r12, r12
    496e:	dd 24       	eor	r13, r13
				distance=sqrt_LUT[x+y*4];// distance is 0-50 roughly
				// height is sin of distance + iteration*4
				//height=4+totty_sin(LUT,distance+i)/52;
				height=(196+totty_sin(LUT,distance+i))/49;
				// Use 4-way mirroring to save on calculations
				setvoxel(x,y,height);
    4970:	17 e0       	ldi	r17, 0x07	; 7
    4972:	41 2e       	mov	r4, r17
    4974:	51 2c       	mov	r5, r1
    4976:	4a 18       	sub	r4, r10
    4978:	5b 08       	sbc	r5, r11
    497a:	b3 cf       	rjmp	.-154    	; 0x48e2 <int_ripples+0x82>
				setvoxel(7-x,y,height);
				setvoxel(x,7-y,height);
				setvoxel(7-x,7-y,height);
			}
if (xit == 1) {break;}
    497c:	80 91 b3 01 	lds	r24, 0x01B3
    4980:	90 91 b4 01 	lds	r25, 0x01B4
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	71 f0       	breq	.+28     	; 0x49a4 <int_ripples+0x144>
		delay_ms(delay);
    4988:	64 96       	adiw	r28, 0x14	; 20
    498a:	8e ad       	ldd	r24, Y+62	; 0x3e
    498c:	9f ad       	ldd	r25, Y+63	; 0x3f
    498e:	64 97       	sbiw	r28, 0x14	; 20
    4990:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	//LUT_START // Macro from new tottymath.  Commented and replaced with full code
	unsigned char LUT[65];
	init_LUT(LUT);
	int i;
	unsigned char x,y,height,distance;
	for (i=0;i<iterations*4;i+=4)
    4994:	84 e0       	ldi	r24, 0x04	; 4
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	68 0e       	add	r6, r24
    499a:	79 1e       	adc	r7, r25
    499c:	62 14       	cp	r6, r2
    499e:	73 04       	cpc	r7, r3
    49a0:	0c f4       	brge	.+2      	; 0x49a4 <int_ripples+0x144>
    49a2:	92 cf       	rjmp	.-220    	; 0x48c8 <int_ripples+0x68>
				setvoxel(7-x,7-y,height);
			}
if (xit == 1) {break;}
		delay_ms(delay);
	}
}
    49a4:	cd 5a       	subi	r28, 0xAD	; 173
    49a6:	df 4f       	sbci	r29, 0xFF	; 255
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	de bf       	out	0x3e, r29	; 62
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	cd bf       	out	0x3d, r28	; 61
    49b2:	cf 91       	pop	r28
    49b4:	df 91       	pop	r29
    49b6:	1f 91       	pop	r17
    49b8:	0f 91       	pop	r16
    49ba:	ff 90       	pop	r15
    49bc:	df 90       	pop	r13
    49be:	cf 90       	pop	r12
    49c0:	bf 90       	pop	r11
    49c2:	af 90       	pop	r10
    49c4:	9f 90       	pop	r9
    49c6:	8f 90       	pop	r8
    49c8:	7f 90       	pop	r7
    49ca:	6f 90       	pop	r6
    49cc:	5f 90       	pop	r5
    49ce:	4f 90       	pop	r4
    49d0:	3f 90       	pop	r3
    49d2:	2f 90       	pop	r2
    49d4:	08 95       	ret

000049d6 <effect_cubix>:
if (xit == 1) {break;}
	}
}

void effect_cubix(int iterations,unsigned char cubies)
{
    49d6:	2f 92       	push	r2
    49d8:	3f 92       	push	r3
    49da:	4f 92       	push	r4
    49dc:	5f 92       	push	r5
    49de:	6f 92       	push	r6
    49e0:	7f 92       	push	r7
    49e2:	8f 92       	push	r8
    49e4:	9f 92       	push	r9
    49e6:	af 92       	push	r10
    49e8:	bf 92       	push	r11
    49ea:	cf 92       	push	r12
    49ec:	df 92       	push	r13
    49ee:	ef 92       	push	r14
    49f0:	ff 92       	push	r15
    49f2:	0f 93       	push	r16
    49f4:	1f 93       	push	r17
    49f6:	df 93       	push	r29
    49f8:	cf 93       	push	r28
    49fa:	00 d0       	rcall	.+0      	; 0x49fc <effect_cubix+0x26>
    49fc:	00 d0       	rcall	.+0      	; 0x49fe <effect_cubix+0x28>
    49fe:	cd b7       	in	r28, 0x3d	; 61
    4a00:	de b7       	in	r29, 0x3e	; 62
    4a02:	c8 2e       	mov	r12, r24
    4a04:	b9 2e       	mov	r11, r25
    4a06:	36 2e       	mov	r3, r22
				runstate=0;
if (xit == 1) {break;}
		}
if (xit == 1) {break;}
	} // Main loop
}
    4a08:	2d b7       	in	r18, 0x3d	; 61
    4a0a:	3e b7       	in	r19, 0x3e	; 62
    4a0c:	3a 83       	std	Y+2, r19	; 0x02
    4a0e:	29 83       	std	Y+1, r18	; 0x01
	// 0=pos
	// 1=dir (0 stopped 1,2 or 4 move in X, Y or Z)
	// 2=inc or dec in direction (2=inc, 0=dec)
	// 3=countdown to new movement
	// 4=x, 5=y, 6=z
	unsigned char qubes[cubies][7];
    4a10:	87 e0       	ldi	r24, 0x07	; 7
    4a12:	68 9f       	mul	r22, r24
    4a14:	c0 01       	movw	r24, r0
    4a16:	11 24       	eor	r1, r1
    4a18:	4d b7       	in	r20, 0x3d	; 61
    4a1a:	5e b7       	in	r21, 0x3e	; 62
    4a1c:	48 1b       	sub	r20, r24
    4a1e:	59 0b       	sbc	r21, r25
    4a20:	0f b6       	in	r0, 0x3f	; 63
    4a22:	f8 94       	cli
    4a24:	5e bf       	out	0x3e, r21	; 62
    4a26:	0f be       	out	0x3f, r0	; 63
    4a28:	4d bf       	out	0x3d, r20	; 61
    4a2a:	8d b6       	in	r8, 0x3d	; 61
    4a2c:	9e b6       	in	r9, 0x3e	; 62
    4a2e:	08 94       	sec
    4a30:	81 1c       	adc	r8, r1
    4a32:	91 1c       	adc	r9, r1
    4a34:	dd 24       	eor	r13, r13
    4a36:	2b c0       	rjmp	.+86     	; 0x4a8e <effect_cubix+0xb8>
	unsigned char i,j,diridx,newdir;
	unsigned char runstate=2;
	//	Initialise qubes array
	for (i=0;i<cubies;i++)
	{
		qubes[i][0]=i;// position = i
    4a38:	ed 2c       	mov	r14, r13
    4a3a:	ff 24       	eor	r15, r15
    4a3c:	87 01       	movw	r16, r14
    4a3e:	b3 e0       	ldi	r27, 0x03	; 3
    4a40:	00 0f       	add	r16, r16
    4a42:	11 1f       	adc	r17, r17
    4a44:	ba 95       	dec	r27
    4a46:	e1 f7       	brne	.-8      	; 0x4a40 <effect_cubix+0x6a>
    4a48:	0e 19       	sub	r16, r14
    4a4a:	1f 09       	sbc	r17, r15
    4a4c:	08 0d       	add	r16, r8
    4a4e:	19 1d       	adc	r17, r9
    4a50:	d8 01       	movw	r26, r16
    4a52:	dc 92       	st	X, r13
		qubes[i][1]=0;// static
    4a54:	11 96       	adiw	r26, 0x01	; 1
    4a56:	1c 92       	st	X, r1
		qubes[i][3]=rand()&0x0f;// 0-15
    4a58:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    4a5c:	8f 70       	andi	r24, 0x0F	; 15
    4a5e:	f8 01       	movw	r30, r16
    4a60:	83 83       	std	Z+3, r24	; 0x03
		// Hack in the X,Y and Z positions
		qubes[i][4]=4*(i&0x01);
    4a62:	c7 01       	movw	r24, r14
    4a64:	81 70       	andi	r24, 0x01	; 1
    4a66:	90 70       	andi	r25, 0x00	; 0
    4a68:	88 0f       	add	r24, r24
    4a6a:	99 1f       	adc	r25, r25
    4a6c:	88 0f       	add	r24, r24
    4a6e:	99 1f       	adc	r25, r25
    4a70:	84 83       	std	Z+4, r24	; 0x04
		qubes[i][5]=2*(i&0x02);
    4a72:	f2 e0       	ldi	r31, 0x02	; 2
    4a74:	ef 22       	and	r14, r31
    4a76:	ff 24       	eor	r15, r15
    4a78:	ee 0c       	add	r14, r14
    4a7a:	ff 1c       	adc	r15, r15
    4a7c:	d8 01       	movw	r26, r16
    4a7e:	15 96       	adiw	r26, 0x05	; 5
    4a80:	ec 92       	st	X, r14
    4a82:	15 97       	sbiw	r26, 0x05	; 5
		qubes[i][6]=(i&0x04);
    4a84:	8d 2d       	mov	r24, r13
    4a86:	84 70       	andi	r24, 0x04	; 4
    4a88:	16 96       	adiw	r26, 0x06	; 6
    4a8a:	8c 93       	st	X, r24
	unsigned char qubes[cubies][7];
	int ii; // iteration counter
	unsigned char i,j,diridx,newdir;
	unsigned char runstate=2;
	//	Initialise qubes array
	for (i=0;i<cubies;i++)
    4a8c:	d3 94       	inc	r13
    4a8e:	d3 14       	cp	r13, r3
    4a90:	98 f2       	brcs	.-90     	; 0x4a38 <effect_cubix+0x62>
    4a92:	8c 2d       	mov	r24, r12
    4a94:	9b 2d       	mov	r25, r11
    4a96:	9c 01       	movw	r18, r24
    4a98:	29 01       	movw	r4, r18
    4a9a:	e2 e0       	ldi	r30, 0x02	; 2
    4a9c:	7e 2e       	mov	r7, r30
					for (j=0;j<cubies;j++)// check newdir is safe to move to
					{
						if ((diridx==qubes[j][0])||(diridx==(qubes[j][0]^qubes[j][1])))
						{
							newdir=0;
							qube[3]=5;
    4a9e:	75 e0       	ldi	r23, 0x05	; 5
    4aa0:	27 2e       	mov	r2, r23
		}
		else//runstate at 1
		{
			diridx=0;
			for(j=0;j<cubies;j++)
				if (qubes[j][0]+1>cubies) diridx=1;// Any cube not at home
    4aa2:	e3 2d       	mov	r30, r3
    4aa4:	f0 e0       	ldi	r31, 0x00	; 0
    4aa6:	fc 83       	std	Y+4, r31	; 0x04
    4aa8:	eb 83       	std	Y+3, r30	; 0x03
    4aaa:	f0 c0       	rjmp	.+480    	; 0x4c8c <effect_cubix+0x2b6>
	}
	// Main loop
	ii=iterations;
	while((runstate) && (xit == 0))
	{
		fill(0x00);
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    4ab2:	64 01       	movw	r12, r8
    4ab4:	66 24       	eor	r6, r6
    4ab6:	aa 24       	eor	r10, r10
    4ab8:	bb 24       	eor	r11, r11
    4aba:	a9 c0       	rjmp	.+338    	; 0x4c0e <effect_cubix+0x238>
		for (i=0;i<cubies;i++)
		{
			// Use a pointer to simplify array indexing
			// qube[0..7] = qubes[i][0..7]
			unsigned char *qube=&qubes[i][0];
    4abc:	74 01       	movw	r14, r8
    4abe:	ea 0c       	add	r14, r10
    4ac0:	fb 1c       	adc	r15, r11
			if (qube[1]) //moving
    4ac2:	d7 01       	movw	r26, r14
    4ac4:	11 96       	adiw	r26, 0x01	; 1
    4ac6:	8c 91       	ld	r24, X
    4ac8:	88 23       	and	r24, r24
    4aca:	51 f1       	breq	.+84     	; 0x4b20 <effect_cubix+0x14a>
			{
				diridx=3+qube[1];//4,5 or 7
    4acc:	8d 5f       	subi	r24, 0xFD	; 253
				if (diridx==7) diridx=6;
    4ace:	87 30       	cpi	r24, 0x07	; 7
    4ad0:	09 f4       	brne	.+2      	; 0x4ad4 <effect_cubix+0xfe>
    4ad2:	86 e0       	ldi	r24, 0x06	; 6
				qube[diridx]+=qube[2]-1;
    4ad4:	f7 01       	movw	r30, r14
    4ad6:	e8 0f       	add	r30, r24
    4ad8:	f1 1d       	adc	r31, r1
    4ada:	d7 01       	movw	r26, r14
    4adc:	12 96       	adiw	r26, 0x02	; 2
    4ade:	9c 91       	ld	r25, X
    4ae0:	91 50       	subi	r25, 0x01	; 1
    4ae2:	80 81       	ld	r24, Z
    4ae4:	98 0f       	add	r25, r24
    4ae6:	90 83       	st	Z, r25
				if ((qube[diridx]==0)||(qube[diridx]==4))
    4ae8:	99 23       	and	r25, r25
    4aea:	19 f0       	breq	.+6      	; 0x4af2 <effect_cubix+0x11c>
    4aec:	94 30       	cpi	r25, 0x04	; 4
    4aee:	09 f0       	breq	.+2      	; 0x4af2 <effect_cubix+0x11c>
    4af0:	70 c0       	rjmp	.+224    	; 0x4bd2 <effect_cubix+0x1fc>
				{
					// XOR old pos and dir to get new pos.
					qube[0]=qube[0]^qube[1];
    4af2:	f6 01       	movw	r30, r12
    4af4:	80 81       	ld	r24, Z
    4af6:	d7 01       	movw	r26, r14
    4af8:	11 96       	adiw	r26, 0x01	; 1
    4afa:	9c 91       	ld	r25, X
    4afc:	11 97       	sbiw	r26, 0x01	; 1
    4afe:	89 27       	eor	r24, r25
    4b00:	80 83       	st	Z, r24
					qube[1]=0;// Stop moving!
    4b02:	11 96       	adiw	r26, 0x01	; 1
    4b04:	1c 92       	st	X, r1
					qube[3]=rand()&0x0f; // countdown to next move 0-15
    4b06:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    4b0a:	98 2f       	mov	r25, r24
    4b0c:	9f 70       	andi	r25, 0x0F	; 15
    4b0e:	f7 01       	movw	r30, r14
    4b10:	93 83       	std	Z+3, r25	; 0x03
					if(runstate==1)
    4b12:	f1 e0       	ldi	r31, 0x01	; 1
    4b14:	7f 16       	cp	r7, r31
    4b16:	09 f0       	breq	.+2      	; 0x4b1a <effect_cubix+0x144>
    4b18:	5c c0       	rjmp	.+184    	; 0x4bd2 <effect_cubix+0x1fc>
						if (qube[0]<5)
    4b1a:	d6 01       	movw	r26, r12
    4b1c:	8c 91       	ld	r24, X
    4b1e:	59 c0       	rjmp	.+178    	; 0x4bd2 <effect_cubix+0x1fc>
							qube[3]*=1;// Make lower qubes move very slowly to finish was value 4
				}
			}
			else // not moving
			{
				if (qube[3])// counting down
    4b20:	87 01       	movw	r16, r14
    4b22:	0d 5f       	subi	r16, 0xFD	; 253
    4b24:	1f 4f       	sbci	r17, 0xFF	; 255
    4b26:	d7 01       	movw	r26, r14
    4b28:	13 96       	adiw	r26, 0x03	; 3
    4b2a:	8c 91       	ld	r24, X
    4b2c:	13 97       	sbiw	r26, 0x03	; 3
    4b2e:	88 23       	and	r24, r24
    4b30:	21 f0       	breq	.+8      	; 0x4b3a <effect_cubix+0x164>
					qube[3]--;
    4b32:	81 50       	subi	r24, 0x01	; 1
    4b34:	13 96       	adiw	r26, 0x03	; 3
    4b36:	8c 93       	st	X, r24
    4b38:	4c c0       	rjmp	.+152    	; 0x4bd2 <effect_cubix+0x1fc>
				else // ready to move
				{
					newdir=(1<<(rand()%3));//1,2 or 4
    4b3a:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    4b3e:	63 e0       	ldi	r22, 0x03	; 3
    4b40:	70 e0       	ldi	r23, 0x00	; 0
    4b42:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    4b46:	e1 e0       	ldi	r30, 0x01	; 1
    4b48:	f0 e0       	ldi	r31, 0x00	; 0
    4b4a:	02 c0       	rjmp	.+4      	; 0x4b50 <effect_cubix+0x17a>
    4b4c:	ee 0f       	add	r30, r30
    4b4e:	ff 1f       	adc	r31, r31
    4b50:	8a 95       	dec	r24
    4b52:	e2 f7       	brpl	.-8      	; 0x4b4c <effect_cubix+0x176>
    4b54:	5e 2f       	mov	r21, r30
					diridx=qube[0]^newdir;
    4b56:	d6 01       	movw	r26, r12
    4b58:	4c 91       	ld	r20, X
    4b5a:	4e 27       	eor	r20, r30
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	17 c0       	rjmp	.+46     	; 0x4b8e <effect_cubix+0x1b8>
					for (j=0;j<cubies;j++)// check newdir is safe to move to
					{
						if ((diridx==qubes[j][0])||(diridx==(qubes[j][0]^qubes[j][1])))
    4b60:	83 2f       	mov	r24, r19
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	fc 01       	movw	r30, r24
    4b66:	63 e0       	ldi	r22, 0x03	; 3
    4b68:	ee 0f       	add	r30, r30
    4b6a:	ff 1f       	adc	r31, r31
    4b6c:	6a 95       	dec	r22
    4b6e:	e1 f7       	brne	.-8      	; 0x4b68 <effect_cubix+0x192>
    4b70:	e8 1b       	sub	r30, r24
    4b72:	f9 0b       	sbc	r31, r25
    4b74:	e8 0d       	add	r30, r8
    4b76:	f9 1d       	adc	r31, r9
    4b78:	20 81       	ld	r18, Z
    4b7a:	42 17       	cp	r20, r18
    4b7c:	21 f0       	breq	.+8      	; 0x4b86 <effect_cubix+0x1b0>
    4b7e:	81 81       	ldd	r24, Z+1	; 0x01
    4b80:	28 27       	eor	r18, r24
    4b82:	42 17       	cp	r20, r18
    4b84:	19 f4       	brne	.+6      	; 0x4b8c <effect_cubix+0x1b6>
						{
							newdir=0;
							qube[3]=5;
    4b86:	f8 01       	movw	r30, r16
    4b88:	20 82       	st	Z, r2
    4b8a:	50 e0       	ldi	r21, 0x00	; 0
					qube[3]--;
				else // ready to move
				{
					newdir=(1<<(rand()%3));//1,2 or 4
					diridx=qube[0]^newdir;
					for (j=0;j<cubies;j++)// check newdir is safe to move to
    4b8c:	3f 5f       	subi	r19, 0xFF	; 255
    4b8e:	33 15       	cp	r19, r3
    4b90:	38 f3       	brcs	.-50     	; 0x4b60 <effect_cubix+0x18a>
							newdir=0;
							qube[3]=5;
						}
					}

					if (newdir)
    4b92:	55 23       	and	r21, r21
    4b94:	e1 f0       	breq	.+56     	; 0x4bce <effect_cubix+0x1f8>
					{
						diridx=3+newdir;
    4b96:	95 2f       	mov	r25, r21
    4b98:	9d 5f       	subi	r25, 0xFD	; 253
						if (diridx==7) diridx=6;
    4b9a:	97 30       	cpi	r25, 0x07	; 7
    4b9c:	09 f4       	brne	.+2      	; 0x4ba0 <effect_cubix+0x1ca>
    4b9e:	96 e0       	ldi	r25, 0x06	; 6
						if (qube[diridx])// should be 4 or 0
    4ba0:	f7 01       	movw	r30, r14
    4ba2:	e9 0f       	add	r30, r25
    4ba4:	f1 1d       	adc	r31, r1
    4ba6:	80 81       	ld	r24, Z
    4ba8:	88 23       	and	r24, r24
    4baa:	21 f0       	breq	.+8      	; 0x4bb4 <effect_cubix+0x1de>
							qube[2]=0; // dec if at 4
    4bac:	d7 01       	movw	r26, r14
    4bae:	12 96       	adiw	r26, 0x02	; 2
    4bb0:	1c 92       	st	X, r1
    4bb2:	0d c0       	rjmp	.+26     	; 0x4bce <effect_cubix+0x1f8>
						else
						{
							qube[2]=2; // inc if at 0
    4bb4:	22 e0       	ldi	r18, 0x02	; 2
    4bb6:	f7 01       	movw	r30, r14
    4bb8:	22 83       	std	Z+2, r18	; 0x02
							if(runstate==1)// Try to make qubes go home
    4bba:	31 e0       	ldi	r19, 0x01	; 1
    4bbc:	73 16       	cp	r7, r19
    4bbe:	39 f4       	brne	.+14     	; 0x4bce <effect_cubix+0x1f8>
								if ((diridx>4)&&(qube[0]<4))
    4bc0:	95 30       	cpi	r25, 0x05	; 5
    4bc2:	28 f0       	brcs	.+10     	; 0x4bce <effect_cubix+0x1f8>
    4bc4:	d6 01       	movw	r26, r12
    4bc6:	8c 91       	ld	r24, X
    4bc8:	84 30       	cpi	r24, 0x04	; 4
    4bca:	08 f4       	brcc	.+2      	; 0x4bce <effect_cubix+0x1f8>
    4bcc:	50 e0       	ldi	r21, 0x00	; 0
									newdir=0;//Don't allow qubes on bottom row to move up or back
						}
					}
					qube[1]=newdir;
    4bce:	f7 01       	movw	r30, r14
    4bd0:	51 83       	std	Z+1, r21	; 0x01
				}
			}
			//if (i&0x01)//odd number
				box_filled(qube[4],qube[5],qube[6],qube[4]+3,qube[5]+3,qube[6]+3);
    4bd2:	d7 01       	movw	r26, r14
    4bd4:	14 96       	adiw	r26, 0x04	; 4
    4bd6:	2c 91       	ld	r18, X
    4bd8:	14 97       	sbiw	r26, 0x04	; 4
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	15 96       	adiw	r26, 0x05	; 5
    4bde:	0c 91       	ld	r16, X
    4be0:	15 97       	sbiw	r26, 0x05	; 5
    4be2:	10 e0       	ldi	r17, 0x00	; 0
    4be4:	16 96       	adiw	r26, 0x06	; 6
    4be6:	ec 91       	ld	r30, X
    4be8:	f0 e0       	ldi	r31, 0x00	; 0
    4bea:	c9 01       	movw	r24, r18
    4bec:	b8 01       	movw	r22, r16
    4bee:	af 01       	movw	r20, r30
    4bf0:	2d 5f       	subi	r18, 0xFD	; 253
    4bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf4:	0d 5f       	subi	r16, 0xFD	; 253
    4bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf8:	33 96       	adiw	r30, 0x03	; 3
    4bfa:	7f 01       	movw	r14, r30
    4bfc:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <box_filled>
	// Main loop
	ii=iterations;
	while((runstate) && (xit == 0))
	{
		fill(0x00);
		for (i=0;i<cubies;i++)
    4c00:	63 94       	inc	r6
    4c02:	e7 e0       	ldi	r30, 0x07	; 7
    4c04:	f0 e0       	ldi	r31, 0x00	; 0
    4c06:	ce 0e       	add	r12, r30
    4c08:	df 1e       	adc	r13, r31
    4c0a:	ae 0e       	add	r10, r30
    4c0c:	bf 1e       	adc	r11, r31
    4c0e:	63 14       	cp	r6, r3
    4c10:	08 f4       	brcc	.+2      	; 0x4c14 <effect_cubix+0x23e>
    4c12:	54 cf       	rjmp	.-344    	; 0x4abc <effect_cubix+0xe6>
			//if (i&0x01)//odd number
				box_filled(qube[4],qube[5],qube[6],qube[4]+3,qube[5]+3,qube[6]+3);
			//else
			//	box_wireframe(qube[4],qube[5],qube[6],qube[4]+3,qube[5]+3,qube[6]+3);
		} // i loop
		delay_ms(800);
    4c14:	80 e2       	ldi	r24, 0x20	; 32
    4c16:	93 e0       	ldi	r25, 0x03	; 3
    4c18:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		if(runstate==2)// If normal running
    4c1c:	f2 e0       	ldi	r31, 0x02	; 2
    4c1e:	7f 16       	cp	r7, r31
    4c20:	19 f0       	breq	.+6      	; 0x4c28 <effect_cubix+0x252>
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	1e c0       	rjmp	.+60     	; 0x4c64 <effect_cubix+0x28e>
		{
			if(!(--ii))// decrement iteration and check for zero
    4c28:	08 94       	sec
    4c2a:	41 08       	sbc	r4, r1
    4c2c:	51 08       	sbc	r5, r1
    4c2e:	41 14       	cp	r4, r1
    4c30:	51 04       	cpc	r5, r1
    4c32:	21 f5       	brne	.+72     	; 0x4c7c <effect_cubix+0x2a6>
    4c34:	77 24       	eor	r7, r7
    4c36:	73 94       	inc	r7
    4c38:	21 c0       	rjmp	.+66     	; 0x4c7c <effect_cubix+0x2a6>
		}
		else//runstate at 1
		{
			diridx=0;
			for(j=0;j<cubies;j++)
				if (qubes[j][0]+1>cubies) diridx=1;// Any cube not at home
    4c3a:	82 2f       	mov	r24, r18
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	fc 01       	movw	r30, r24
    4c40:	43 e0       	ldi	r20, 0x03	; 3
    4c42:	ee 0f       	add	r30, r30
    4c44:	ff 1f       	adc	r31, r31
    4c46:	4a 95       	dec	r20
    4c48:	e1 f7       	brne	.-8      	; 0x4c42 <effect_cubix+0x26c>
    4c4a:	e8 1b       	sub	r30, r24
    4c4c:	f9 0b       	sbc	r31, r25
    4c4e:	e8 0d       	add	r30, r8
    4c50:	f9 1d       	adc	r31, r9
    4c52:	80 81       	ld	r24, Z
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	4b 81       	ldd	r20, Y+3	; 0x03
    4c58:	5c 81       	ldd	r21, Y+4	; 0x04
    4c5a:	84 17       	cp	r24, r20
    4c5c:	95 07       	cpc	r25, r21
    4c5e:	0c f0       	brlt	.+2      	; 0x4c62 <effect_cubix+0x28c>
    4c60:	31 e0       	ldi	r19, 0x01	; 1
				runstate=1;// If zero go to homing
		}
		else//runstate at 1
		{
			diridx=0;
			for(j=0;j<cubies;j++)
    4c62:	2f 5f       	subi	r18, 0xFF	; 255
    4c64:	23 15       	cp	r18, r3
    4c66:	48 f3       	brcs	.-46     	; 0x4c3a <effect_cubix+0x264>
				if (qubes[j][0]+1>cubies) diridx=1;// Any cube not at home
			if (!diridx)
				runstate=0;
if (xit == 1) {break;}
    4c68:	80 91 b3 01 	lds	r24, 0x01B3
    4c6c:	90 91 b4 01 	lds	r25, 0x01B4
    4c70:	01 97       	sbiw	r24, 0x01	; 1
    4c72:	99 f0       	breq	.+38     	; 0x4c9a <effect_cubix+0x2c4>
    4c74:	83 2f       	mov	r24, r19
    4c76:	31 11       	cpse	r19, r1
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	78 2e       	mov	r7, r24
		}
if (xit == 1) {break;}
    4c7c:	80 91 b3 01 	lds	r24, 0x01B3
    4c80:	90 91 b4 01 	lds	r25, 0x01B4
    4c84:	01 97       	sbiw	r24, 0x01	; 1
    4c86:	49 f0       	breq	.+18     	; 0x4c9a <effect_cubix+0x2c4>
		qubes[i][5]=2*(i&0x02);
		qubes[i][6]=(i&0x04);
	}
	// Main loop
	ii=iterations;
	while((runstate) && (xit == 0))
    4c88:	77 20       	and	r7, r7
    4c8a:	39 f0       	breq	.+14     	; 0x4c9a <effect_cubix+0x2c4>
    4c8c:	80 91 b3 01 	lds	r24, 0x01B3
    4c90:	90 91 b4 01 	lds	r25, 0x01B4
    4c94:	89 2b       	or	r24, r25
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <effect_cubix+0x2c4>
    4c98:	09 cf       	rjmp	.-494    	; 0x4aac <effect_cubix+0xd6>
				runstate=0;
if (xit == 1) {break;}
		}
if (xit == 1) {break;}
	} // Main loop
}
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9e:	0f b6       	in	r0, 0x3f	; 63
    4ca0:	f8 94       	cli
    4ca2:	9e bf       	out	0x3e, r25	; 62
    4ca4:	0f be       	out	0x3f, r0	; 63
    4ca6:	8d bf       	out	0x3d, r24	; 61
    4ca8:	0f 90       	pop	r0
    4caa:	0f 90       	pop	r0
    4cac:	0f 90       	pop	r0
    4cae:	0f 90       	pop	r0
    4cb0:	cf 91       	pop	r28
    4cb2:	df 91       	pop	r29
    4cb4:	1f 91       	pop	r17
    4cb6:	0f 91       	pop	r16
    4cb8:	ff 90       	pop	r15
    4cba:	ef 90       	pop	r14
    4cbc:	df 90       	pop	r13
    4cbe:	cf 90       	pop	r12
    4cc0:	bf 90       	pop	r11
    4cc2:	af 90       	pop	r10
    4cc4:	9f 90       	pop	r9
    4cc6:	8f 90       	pop	r8
    4cc8:	7f 90       	pop	r7
    4cca:	6f 90       	pop	r6
    4ccc:	5f 90       	pop	r5
    4cce:	4f 90       	pop	r4
    4cd0:	3f 90       	pop	r3
    4cd2:	2f 90       	pop	r2
    4cd4:	08 95       	ret

00004cd6 <effect_plane_flip>:
		delay_ms(delay);
	}
}

void effect_plane_flip(unsigned char LUT[],unsigned char start,unsigned char end,int delay)
{
    4cd6:	2f 92       	push	r2
    4cd8:	3f 92       	push	r3
    4cda:	4f 92       	push	r4
    4cdc:	5f 92       	push	r5
    4cde:	6f 92       	push	r6
    4ce0:	7f 92       	push	r7
    4ce2:	8f 92       	push	r8
    4ce4:	9f 92       	push	r9
    4ce6:	af 92       	push	r10
    4ce8:	bf 92       	push	r11
    4cea:	cf 92       	push	r12
    4cec:	df 92       	push	r13
    4cee:	ef 92       	push	r14
    4cf0:	ff 92       	push	r15
    4cf2:	0f 93       	push	r16
    4cf4:	1f 93       	push	r17
    4cf6:	df 93       	push	r29
    4cf8:	cf 93       	push	r28
    4cfa:	00 d0       	rcall	.+0      	; 0x4cfc <effect_plane_flip+0x26>
    4cfc:	00 d0       	rcall	.+0      	; 0x4cfe <effect_plane_flip+0x28>
    4cfe:	00 d0       	rcall	.+0      	; 0x4d00 <effect_plane_flip+0x2a>
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
    4d04:	4c 01       	movw	r8, r24
    4d06:	3a 83       	std	Y+2, r19	; 0x02
    4d08:	29 83       	std	Y+1, r18	; 0x01
	unsigned char inv=0;//bit 0=Y bit 1=Z
	// Sort out dir, rev and inv for each start/end combo.
	//  There are 24, but with some neat combinations of
	// tests we can simplify so that only a max of 3 tests
	// are required for each type!
	if (start<2)// 0 or 1.  buh
    4d0a:	62 30       	cpi	r22, 0x02	; 2
    4d0c:	b0 f4       	brcc	.+44     	; 0x4d3a <effect_plane_flip+0x64>
	{
		if (end<4)
    4d0e:	44 30       	cpi	r20, 0x04	; 4
    4d10:	30 f4       	brcc	.+12     	; 0x4d1e <effect_plane_flip+0x48>
		{
			dir=0;
			if (end==3) inv=0x01;
    4d12:	43 30       	cpi	r20, 0x03	; 3
    4d14:	11 f4       	brne	.+4      	; 0x4d1a <effect_plane_flip+0x44>
    4d16:	ee 24       	eor	r14, r14
    4d18:	06 c0       	rjmp	.+12     	; 0x4d26 <effect_plane_flip+0x50>
    4d1a:	ee 24       	eor	r14, r14
    4d1c:	08 c0       	rjmp	.+16     	; 0x4d2e <effect_plane_flip+0x58>
		}
		else
		{
			dir=2;
			if (end==5) inv=0x01;
    4d1e:	45 30       	cpi	r20, 0x05	; 5
    4d20:	21 f4       	brne	.+8      	; 0x4d2a <effect_plane_flip+0x54>
    4d22:	e2 e0       	ldi	r30, 0x02	; 2
    4d24:	ee 2e       	mov	r14, r30
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	03 c0       	rjmp	.+6      	; 0x4d30 <effect_plane_flip+0x5a>
    4d2a:	72 e0       	ldi	r23, 0x02	; 2
    4d2c:	e7 2e       	mov	r14, r23
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
		}
		if (start==1) inv|=0x02;
    4d30:	61 30       	cpi	r22, 0x01	; 1
    4d32:	09 f4       	brne	.+2      	; 0x4d36 <effect_plane_flip+0x60>
    4d34:	82 60       	ori	r24, 0x02	; 2
    4d36:	ff 24       	eor	r15, r15
    4d38:	62 c0       	rjmp	.+196    	; 0x4dfe <effect_plane_flip+0x128>
	} else if (start<4)//2 or 3. Buh
    4d3a:	64 30       	cpi	r22, 0x04	; 4
    4d3c:	38 f5       	brcc	.+78     	; 0x4d8c <effect_plane_flip+0xb6>
	{
		if (end<2)// going to 0 or 1
    4d3e:	42 30       	cpi	r20, 0x02	; 2
    4d40:	58 f4       	brcc	.+22     	; 0x4d58 <effect_plane_flip+0x82>
    4d42:	80 e0       	ldi	r24, 0x00	; 0
    4d44:	63 30       	cpi	r22, 0x03	; 3
    4d46:	09 f4       	brne	.+2      	; 0x4d4a <effect_plane_flip+0x74>
    4d48:	81 e0       	ldi	r24, 0x01	; 1
		{
			rev=1;
			dir=0;
			if (start==3) inv=0x01;
			if (end==1) inv|=0x02;
    4d4a:	41 30       	cpi	r20, 0x01	; 1
    4d4c:	09 f4       	brne	.+2      	; 0x4d50 <effect_plane_flip+0x7a>
    4d4e:	82 60       	ori	r24, 0x02	; 2
    4d50:	ee 24       	eor	r14, r14
    4d52:	ff 24       	eor	r15, r15
    4d54:	f3 94       	inc	r15
    4d56:	53 c0       	rjmp	.+166    	; 0x4dfe <effect_plane_flip+0x128>
		}
		else // going to 4 or 5
		{
			dir=1;// door moves
			if(start+end==7)//3 to 4 or 2 to 5
    4d58:	86 2f       	mov	r24, r22
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	84 0f       	add	r24, r20
    4d5e:	91 1d       	adc	r25, r1
    4d60:	07 97       	sbiw	r24, 0x07	; 7
    4d62:	51 f4       	brne	.+20     	; 0x4d78 <effect_plane_flip+0xa2>
			{
				if (start==3)
    4d64:	63 30       	cpi	r22, 0x03	; 3
    4d66:	21 f0       	breq	.+8      	; 0x4d70 <effect_plane_flip+0x9a>
    4d68:	ee 24       	eor	r14, r14
    4d6a:	e3 94       	inc	r14
    4d6c:	ff 24       	eor	r15, r15
    4d6e:	32 c0       	rjmp	.+100    	; 0x4dd4 <effect_plane_flip+0xfe>
    4d70:	ee 24       	eor	r14, r14
    4d72:	e3 94       	inc	r14
    4d74:	ff 24       	eor	r15, r15
    4d76:	34 c0       	rjmp	.+104    	; 0x4de0 <effect_plane_flip+0x10a>
				else
					inv=0x01;
			}
			else//2 to 4 or 3 to 5
			{
				if (start==3)
    4d78:	63 30       	cpi	r22, 0x03	; 3
    4d7a:	21 f4       	brne	.+8      	; 0x4d84 <effect_plane_flip+0xae>
    4d7c:	ee 24       	eor	r14, r14
    4d7e:	e3 94       	inc	r14
    4d80:	ff 24       	eor	r15, r15
    4d82:	36 c0       	rjmp	.+108    	; 0x4df0 <effect_plane_flip+0x11a>
    4d84:	ee 24       	eor	r14, r14
    4d86:	e3 94       	inc	r14
    4d88:	ff 24       	eor	r15, r15
    4d8a:	38 c0       	rjmp	.+112    	; 0x4dfc <effect_plane_flip+0x126>
    4d8c:	84 2f       	mov	r24, r20
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	26 2f       	mov	r18, r22
    4d92:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}
	else //start is 4 or 5
	{
		if (end<2)// 0 or 1
    4d94:	42 30       	cpi	r20, 0x02	; 2
    4d96:	a0 f4       	brcc	.+40     	; 0x4dc0 <effect_plane_flip+0xea>
		{
			dir=2;
			rev=1;// reverse trapdoor.  Yeah!
			if (start+end==5)//4 to 1 or 5 to 0
    4d98:	82 0f       	add	r24, r18
    4d9a:	93 1f       	adc	r25, r19
    4d9c:	05 97       	sbiw	r24, 0x05	; 5
    4d9e:	41 f4       	brne	.+16     	; 0x4db0 <effect_plane_flip+0xda>
			{
				if (start==4)//4 to 1
    4da0:	64 30       	cpi	r22, 0x04	; 4
    4da2:	19 f0       	breq	.+6      	; 0x4daa <effect_plane_flip+0xd4>
    4da4:	62 e0       	ldi	r22, 0x02	; 2
    4da6:	e6 2e       	mov	r14, r22
    4da8:	13 c0       	rjmp	.+38     	; 0x4dd0 <effect_plane_flip+0xfa>
    4daa:	52 e0       	ldi	r21, 0x02	; 2
    4dac:	e5 2e       	mov	r14, r21
    4dae:	16 c0       	rjmp	.+44     	; 0x4ddc <effect_plane_flip+0x106>
					inv=0x02;
				else
					inv=0x01;
			}
			else // 4 to 0 or 5 to 1
				if (start==5)
    4db0:	65 30       	cpi	r22, 0x05	; 5
    4db2:	19 f4       	brne	.+6      	; 0x4dba <effect_plane_flip+0xe4>
    4db4:	42 e0       	ldi	r20, 0x02	; 2
    4db6:	e4 2e       	mov	r14, r20
    4db8:	19 c0       	rjmp	.+50     	; 0x4dec <effect_plane_flip+0x116>
    4dba:	32 e0       	ldi	r19, 0x02	; 2
    4dbc:	e3 2e       	mov	r14, r19
    4dbe:	1c c0       	rjmp	.+56     	; 0x4df8 <effect_plane_flip+0x122>
		}
		else//end is 2 or 3
		{
			rev=1;// all reverse
			dir=1;// all door
			if (start+end==7)//4 to 3 or 5 to 2
    4dc0:	82 0f       	add	r24, r18
    4dc2:	93 1f       	adc	r25, r19
    4dc4:	07 97       	sbiw	r24, 0x07	; 7
    4dc6:	71 f4       	brne	.+28     	; 0x4de4 <effect_plane_flip+0x10e>
			{
				if (start==4) // 4 to 3
    4dc8:	64 30       	cpi	r22, 0x04	; 4
    4dca:	31 f0       	breq	.+12     	; 0x4dd8 <effect_plane_flip+0x102>
    4dcc:	ee 24       	eor	r14, r14
    4dce:	e3 94       	inc	r14
    4dd0:	ff 24       	eor	r15, r15
    4dd2:	f3 94       	inc	r15
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	13 c0       	rjmp	.+38     	; 0x4dfe <effect_plane_flip+0x128>
    4dd8:	ee 24       	eor	r14, r14
    4dda:	e3 94       	inc	r14
    4ddc:	ff 24       	eor	r15, r15
    4dde:	f3 94       	inc	r15
    4de0:	82 e0       	ldi	r24, 0x02	; 2
    4de2:	0d c0       	rjmp	.+26     	; 0x4dfe <effect_plane_flip+0x128>
				else
					inv=0x01;
			}
			else
			{
				if (start==5)//5 to 3
    4de4:	65 30       	cpi	r22, 0x05	; 5
    4de6:	31 f4       	brne	.+12     	; 0x4df4 <effect_plane_flip+0x11e>
    4de8:	ee 24       	eor	r14, r14
    4dea:	e3 94       	inc	r14
    4dec:	ff 24       	eor	r15, r15
    4dee:	f3 94       	inc	r15
    4df0:	83 e0       	ldi	r24, 0x03	; 3
    4df2:	05 c0       	rjmp	.+10     	; 0x4dfe <effect_plane_flip+0x128>
    4df4:	ee 24       	eor	r14, r14
    4df6:	e3 94       	inc	r14
    4df8:	ff 24       	eor	r15, r15
    4dfa:	f3 94       	inc	r15
    4dfc:	80 e0       	ldi	r24, 0x00	; 0
    4dfe:	04 e0       	ldi	r16, 0x04	; 4
    4e00:	10 e0       	ldi	r17, 0x00	; 0
		}
		fill(0x00);
		for (i1=0;i1<8;i1++)
		{
			z=p1*i1/168;
			if (inv&0x02) z=7-z;// invert in Z axis
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	9c 01       	movw	r18, r24
    4e06:	22 70       	andi	r18, 0x02	; 2
    4e08:	30 70       	andi	r19, 0x00	; 0
    4e0a:	3c 83       	std	Y+4, r19	; 0x04
    4e0c:	2b 83       	std	Y+3, r18	; 0x03
			y=p2*i1/168;
			if (inv&0x01) y=7-y;// invert in Y axis
    4e0e:	21 e0       	ldi	r18, 0x01	; 1
    4e10:	22 2e       	mov	r2, r18
    4e12:	31 2c       	mov	r3, r1
    4e14:	28 22       	and	r2, r24
    4e16:	39 22       	and	r3, r25
		}
	}
	// Do the actual plane drawing
	for(i=1;i<9;i++) // changed from the original 0 to 7 to make sure it ends on a flat plane
	{
		if (rev)// Reverse movement goes cos-sin
    4e18:	ff 20       	and	r15, r15
    4e1a:	59 f0       	breq	.+22     	; 0x4e32 <effect_plane_flip+0x15c>
		{
			p2=totty_sin(LUT,i*4);// angle 0-45 degrees
    4e1c:	c4 01       	movw	r24, r8
    4e1e:	b8 01       	movw	r22, r16
    4e20:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <totty_sin>
    4e24:	c8 2e       	mov	r12, r24
			p1=totty_cos(LUT,i*4);
    4e26:	c4 01       	movw	r24, r8
    4e28:	b8 01       	movw	r22, r16
    4e2a:	0e 94 7f 38 	call	0x70fe	; 0x70fe <totty_cos>
    4e2e:	d8 2e       	mov	r13, r24
    4e30:	0a c0       	rjmp	.+20     	; 0x4e46 <effect_plane_flip+0x170>
		}
		else
		{
			p1=totty_sin(LUT,i*4);// angle 0-45 degrees
    4e32:	c4 01       	movw	r24, r8
    4e34:	b8 01       	movw	r22, r16
    4e36:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <totty_sin>
    4e3a:	d8 2e       	mov	r13, r24
			p2=totty_cos(LUT,i*4);
    4e3c:	c4 01       	movw	r24, r8
    4e3e:	b8 01       	movw	r22, r16
    4e40:	0e 94 7f 38 	call	0x70fe	; 0x70fe <totty_cos>
    4e44:	c8 2e       	mov	r12, r24
		}
		fill(0x00);
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    4e4c:	aa 24       	eor	r10, r10
    4e4e:	88 e0       	ldi	r24, 0x08	; 8
    4e50:	b8 2e       	mov	r11, r24
		for (i1=0;i1<8;i1++)
		{
			z=p1*i1/168;
    4e52:	4d 2c       	mov	r4, r13
    4e54:	55 24       	eor	r5, r5
			if (inv&0x02) z=7-z;// invert in Z axis
			y=p2*i1/168;
    4e56:	6c 2c       	mov	r6, r12
    4e58:	77 24       	eor	r7, r7
			p2=totty_cos(LUT,i*4);
		}
		fill(0x00);
		for (i1=0;i1<8;i1++)
		{
			z=p1*i1/168;
    4e5a:	2a 2d       	mov	r18, r10
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	24 9d       	mul	r18, r4
    4e60:	c0 01       	movw	r24, r0
    4e62:	25 9d       	mul	r18, r5
    4e64:	90 0d       	add	r25, r0
    4e66:	34 9d       	mul	r19, r4
    4e68:	90 0d       	add	r25, r0
    4e6a:	11 24       	eor	r1, r1
    4e6c:	68 ea       	ldi	r22, 0xA8	; 168
    4e6e:	70 e0       	ldi	r23, 0x00	; 0
    4e70:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    4e74:	c6 2e       	mov	r12, r22
			if (inv&0x02) z=7-z;// invert in Z axis
    4e76:	8b 81       	ldd	r24, Y+3	; 0x03
    4e78:	9c 81       	ldd	r25, Y+4	; 0x04
    4e7a:	89 2b       	or	r24, r25
    4e7c:	19 f0       	breq	.+6      	; 0x4e84 <effect_plane_flip+0x1ae>
    4e7e:	97 e0       	ldi	r25, 0x07	; 7
    4e80:	96 1b       	sub	r25, r22
    4e82:	c9 2e       	mov	r12, r25
			y=p2*i1/168;
    4e84:	26 9d       	mul	r18, r6
    4e86:	c0 01       	movw	r24, r0
    4e88:	27 9d       	mul	r18, r7
    4e8a:	90 0d       	add	r25, r0
    4e8c:	36 9d       	mul	r19, r6
    4e8e:	90 0d       	add	r25, r0
    4e90:	11 24       	eor	r1, r1
    4e92:	68 ea       	ldi	r22, 0xA8	; 168
    4e94:	70 e0       	ldi	r23, 0x00	; 0
    4e96:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    4e9a:	d6 2e       	mov	r13, r22
			if (inv&0x01) y=7-y;// invert in Y axis
    4e9c:	21 14       	cp	r2, r1
    4e9e:	31 04       	cpc	r3, r1
    4ea0:	19 f0       	breq	.+6      	; 0x4ea8 <effect_plane_flip+0x1d2>
    4ea2:	e7 e0       	ldi	r30, 0x07	; 7
    4ea4:	e6 1b       	sub	r30, r22
    4ea6:	de 2e       	mov	r13, r30
    4ea8:	1e 82       	std	Y+6, r1	; 0x06
    4eaa:	1d 82       	std	Y+5, r1	; 0x05
			for(x=0;x<8;x++)
			{
				if(!dir)//dir=0
    4eac:	ee 20       	and	r14, r14
    4eae:	29 f4       	brne	.+10     	; 0x4eba <effect_plane_flip+0x1e4>
				{
					setvoxel(x,y,z);
    4eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb4:	6d 2d       	mov	r22, r13
    4eb6:	70 e0       	ldi	r23, 0x00	; 0
    4eb8:	0e c0       	rjmp	.+28     	; 0x4ed6 <effect_plane_flip+0x200>
				}
				else if(dir==1)
    4eba:	f1 e0       	ldi	r31, 0x01	; 1
    4ebc:	ef 16       	cp	r14, r31
    4ebe:	39 f4       	brne	.+14     	; 0x4ece <effect_plane_flip+0x1f8>
				{
					setvoxel(y,z,x);
    4ec0:	8d 2d       	mov	r24, r13
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	6c 2d       	mov	r22, r12
    4ec6:	70 e0       	ldi	r23, 0x00	; 0
    4ec8:	4d 81       	ldd	r20, Y+5	; 0x05
    4eca:	5e 81       	ldd	r21, Y+6	; 0x06
    4ecc:	06 c0       	rjmp	.+12     	; 0x4eda <effect_plane_flip+0x204>
				}
				else//dir=2
				{
					setvoxel(y,x,z);
    4ece:	8d 2d       	mov	r24, r13
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	6d 81       	ldd	r22, Y+5	; 0x05
    4ed4:	7e 81       	ldd	r23, Y+6	; 0x06
    4ed6:	4c 2d       	mov	r20, r12
    4ed8:	50 e0       	ldi	r21, 0x00	; 0
    4eda:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
				}
if (xit == 1) {break;}
    4ede:	80 91 b3 01 	lds	r24, 0x01B3
    4ee2:	90 91 b4 01 	lds	r25, 0x01B4
    4ee6:	01 97       	sbiw	r24, 0x01	; 1
    4ee8:	49 f0       	breq	.+18     	; 0x4efc <effect_plane_flip+0x226>
    4eea:	2d 81       	ldd	r18, Y+5	; 0x05
    4eec:	3e 81       	ldd	r19, Y+6	; 0x06
    4eee:	2f 5f       	subi	r18, 0xFF	; 255
    4ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ef2:	3e 83       	std	Y+6, r19	; 0x06
    4ef4:	2d 83       	std	Y+5, r18	; 0x05
		{
			z=p1*i1/168;
			if (inv&0x02) z=7-z;// invert in Z axis
			y=p2*i1/168;
			if (inv&0x01) y=7-y;// invert in Y axis
			for(x=0;x<8;x++)
    4ef6:	28 30       	cpi	r18, 0x08	; 8
    4ef8:	31 05       	cpc	r19, r1
    4efa:	c1 f6       	brne	.-80     	; 0x4eac <effect_plane_flip+0x1d6>
				{
					setvoxel(y,x,z);
				}
if (xit == 1) {break;}
			}
if (xit == 1) {break;}
    4efc:	80 91 b3 01 	lds	r24, 0x01B3
    4f00:	90 91 b4 01 	lds	r25, 0x01B4
    4f04:	01 97       	sbiw	r24, 0x01	; 1
    4f06:	21 f0       	breq	.+8      	; 0x4f10 <effect_plane_flip+0x23a>
		{
			p1=totty_sin(LUT,i*4);// angle 0-45 degrees
			p2=totty_cos(LUT,i*4);
		}
		fill(0x00);
		for (i1=0;i1<8;i1++)
    4f08:	a3 94       	inc	r10
    4f0a:	ba 94       	dec	r11
    4f0c:	09 f0       	breq	.+2      	; 0x4f10 <effect_plane_flip+0x23a>
    4f0e:	a5 cf       	rjmp	.-182    	; 0x4e5a <effect_plane_flip+0x184>
				}
if (xit == 1) {break;}
			}
if (xit == 1) {break;}
		}
if (xit == 1) {break;}
    4f10:	80 91 b3 01 	lds	r24, 0x01B3
    4f14:	90 91 b4 01 	lds	r25, 0x01B4
    4f18:	01 97       	sbiw	r24, 0x01	; 1
    4f1a:	51 f0       	breq	.+20     	; 0x4f30 <effect_plane_flip+0x25a>
		delay_ms(delay);
    4f1c:	89 81       	ldd	r24, Y+1	; 0x01
    4f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f20:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    4f24:	0c 5f       	subi	r16, 0xFC	; 252
    4f26:	1f 4f       	sbci	r17, 0xFF	; 255
					inv=0x03;
			}
		}
	}
	// Do the actual plane drawing
	for(i=1;i<9;i++) // changed from the original 0 to 7 to make sure it ends on a flat plane
    4f28:	04 32       	cpi	r16, 0x24	; 36
    4f2a:	11 05       	cpc	r17, r1
    4f2c:	09 f0       	breq	.+2      	; 0x4f30 <effect_plane_flip+0x25a>
    4f2e:	74 cf       	rjmp	.-280    	; 0x4e18 <effect_plane_flip+0x142>
if (xit == 1) {break;}
		}
if (xit == 1) {break;}
		delay_ms(delay);
	}
}
    4f30:	26 96       	adiw	r28, 0x06	; 6
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	f8 94       	cli
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	cf 91       	pop	r28
    4f3e:	df 91       	pop	r29
    4f40:	1f 91       	pop	r17
    4f42:	0f 91       	pop	r16
    4f44:	ff 90       	pop	r15
    4f46:	ef 90       	pop	r14
    4f48:	df 90       	pop	r13
    4f4a:	cf 90       	pop	r12
    4f4c:	bf 90       	pop	r11
    4f4e:	af 90       	pop	r10
    4f50:	9f 90       	pop	r9
    4f52:	8f 90       	pop	r8
    4f54:	7f 90       	pop	r7
    4f56:	6f 90       	pop	r6
    4f58:	5f 90       	pop	r5
    4f5a:	4f 90       	pop	r4
    4f5c:	3f 90       	pop	r3
    4f5e:	2f 90       	pop	r2
    4f60:	08 95       	ret

00004f62 <effect_filip_filop>:

void effect_filip_filop(int iterations)
{
    4f62:	bf 92       	push	r11
    4f64:	cf 92       	push	r12
    4f66:	df 92       	push	r13
    4f68:	ef 92       	push	r14
    4f6a:	ff 92       	push	r15
    4f6c:	0f 93       	push	r16
    4f6e:	1f 93       	push	r17
    4f70:	df 93       	push	r29
    4f72:	cf 93       	push	r28
    4f74:	cd b7       	in	r28, 0x3d	; 61
    4f76:	de b7       	in	r29, 0x3e	; 62
    4f78:	c1 54       	subi	r28, 0x41	; 65
    4f7a:	d0 40       	sbci	r29, 0x00	; 0
    4f7c:	0f b6       	in	r0, 0x3f	; 63
    4f7e:	f8 94       	cli
    4f80:	de bf       	out	0x3e, r29	; 62
    4f82:	0f be       	out	0x3f, r0	; 63
    4f84:	cd bf       	out	0x3d, r28	; 61
    4f86:	f8 2e       	mov	r15, r24
    4f88:	e9 2e       	mov	r14, r25
	LUT_START // Macro
    4f8a:	8e 01       	movw	r16, r28
    4f8c:	0f 5f       	subi	r16, 0xFF	; 255
    4f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f90:	c8 01       	movw	r24, r16
    4f92:	0e 94 97 38 	call	0x712e	; 0x712e <init_LUT>
    4f96:	2f 2d       	mov	r18, r15
    4f98:	3e 2d       	mov	r19, r14
    4f9a:	c9 01       	movw	r24, r18
    4f9c:	6c 01       	movw	r12, r24
    4f9e:	ee 24       	eor	r14, r14
		next_plane=rand()%6; //0-5
		// Check that not the same, and that:
		// 0/1 2/3 4/5 pairs do not exist.
		if ((next_plane&0x06)==(now_plane&0x06))
			next_plane=(next_plane+3)%6;
		effect_plane_flip(LUT,now_plane,next_plane,delay);
    4fa0:	b0 2e       	mov	r11, r16
    4fa2:	01 2f       	mov	r16, r17
    4fa4:	30 c0       	rjmp	.+96     	; 0x5006 <effect_filip_filop+0xa4>
	unsigned char next_plane;
	int delay=FF_DELAY;
	int i;//iteration counter
	for (i=iterations;i;i--)
	{
if (xit == 1) {i=iterations;break;}
    4fa6:	80 91 b3 01 	lds	r24, 0x01B3
    4faa:	90 91 b4 01 	lds	r25, 0x01B4
    4fae:	01 97       	sbiw	r24, 0x01	; 1
    4fb0:	69 f1       	breq	.+90     	; 0x500c <effect_filip_filop+0xaa>
		next_plane=rand()%6; //0-5
    4fb2:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    4fb6:	66 e0       	ldi	r22, 0x06	; 6
    4fb8:	70 e0       	ldi	r23, 0x00	; 0
    4fba:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    4fbe:	f8 2e       	mov	r15, r24
		// Check that not the same, and that:
		// 0/1 2/3 4/5 pairs do not exist.
		if ((next_plane&0x06)==(now_plane&0x06))
    4fc0:	28 2f       	mov	r18, r24
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	8e 2d       	mov	r24, r14
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	82 27       	eor	r24, r18
    4fca:	93 27       	eor	r25, r19
    4fcc:	86 70       	andi	r24, 0x06	; 6
    4fce:	90 70       	andi	r25, 0x00	; 0
    4fd0:	89 2b       	or	r24, r25
    4fd2:	39 f4       	brne	.+14     	; 0x4fe2 <effect_filip_filop+0x80>
			next_plane=(next_plane+3)%6;
    4fd4:	c9 01       	movw	r24, r18
    4fd6:	03 96       	adiw	r24, 0x03	; 3
    4fd8:	66 e0       	ldi	r22, 0x06	; 6
    4fda:	70 e0       	ldi	r23, 0x00	; 0
    4fdc:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    4fe0:	f8 2e       	mov	r15, r24
		effect_plane_flip(LUT,now_plane,next_plane,delay);
    4fe2:	8b 2d       	mov	r24, r11
    4fe4:	90 2f       	mov	r25, r16
    4fe6:	6e 2d       	mov	r22, r14
    4fe8:	4f 2d       	mov	r20, r15
    4fea:	24 ef       	ldi	r18, 0xF4	; 244
    4fec:	31 e0       	ldi	r19, 0x01	; 1
    4fee:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <effect_plane_flip>
		now_plane=next_plane;
if (xit == 1) {break;}
    4ff2:	80 91 b3 01 	lds	r24, 0x01B3
    4ff6:	90 91 b4 01 	lds	r25, 0x01B4
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	39 f0       	breq	.+14     	; 0x500c <effect_filip_filop+0xaa>
	LUT_START // Macro
	unsigned char now_plane=0;//start at top
	unsigned char next_plane;
	int delay=FF_DELAY;
	int i;//iteration counter
	for (i=iterations;i;i--)
    4ffe:	08 94       	sec
    5000:	c1 08       	sbc	r12, r1
    5002:	d1 08       	sbc	r13, r1
    5004:	ef 2c       	mov	r14, r15
    5006:	c1 14       	cp	r12, r1
    5008:	d1 04       	cpc	r13, r1
    500a:	69 f6       	brne	.-102    	; 0x4fa6 <effect_filip_filop+0x44>
			next_plane=(next_plane+3)%6;
		effect_plane_flip(LUT,now_plane,next_plane,delay);
		now_plane=next_plane;
if (xit == 1) {break;}
	}
}
    500c:	cf 5b       	subi	r28, 0xBF	; 191
    500e:	df 4f       	sbci	r29, 0xFF	; 255
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	de bf       	out	0x3e, r29	; 62
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	cd bf       	out	0x3d, r28	; 61
    501a:	cf 91       	pop	r28
    501c:	df 91       	pop	r29
    501e:	1f 91       	pop	r17
    5020:	0f 91       	pop	r16
    5022:	ff 90       	pop	r15
    5024:	ef 90       	pop	r14
    5026:	df 90       	pop	r13
    5028:	cf 90       	pop	r12
    502a:	bf 90       	pop	r11
    502c:	08 95       	ret

0000502e <int_sidewaves>:
if (xit == 1) {break;}
	}
}

void int_sidewaves(int iterations, int delay)
{
    502e:	2f 92       	push	r2
    5030:	3f 92       	push	r3
    5032:	4f 92       	push	r4
    5034:	5f 92       	push	r5
    5036:	6f 92       	push	r6
    5038:	7f 92       	push	r7
    503a:	8f 92       	push	r8
    503c:	9f 92       	push	r9
    503e:	af 92       	push	r10
    5040:	bf 92       	push	r11
    5042:	cf 92       	push	r12
    5044:	df 92       	push	r13
    5046:	ef 92       	push	r14
    5048:	ff 92       	push	r15
    504a:	0f 93       	push	r16
    504c:	1f 93       	push	r17
    504e:	df 93       	push	r29
    5050:	cf 93       	push	r28
    5052:	cd b7       	in	r28, 0x3d	; 61
    5054:	de b7       	in	r29, 0x3e	; 62
    5056:	c9 54       	subi	r28, 0x49	; 73
    5058:	d0 40       	sbci	r29, 0x00	; 0
    505a:	0f b6       	in	r0, 0x3f	; 63
    505c:	f8 94       	cli
    505e:	de bf       	out	0x3e, r29	; 62
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	cd bf       	out	0x3d, r28	; 61
    5064:	24 96       	adiw	r28, 0x04	; 4
    5066:	9f af       	std	Y+63, r25	; 0x3f
    5068:	8e af       	std	Y+62, r24	; 0x3e
    506a:	24 97       	sbiw	r28, 0x04	; 4
    506c:	26 96       	adiw	r28, 0x06	; 6
    506e:	7f af       	std	Y+63, r23	; 0x3f
    5070:	6e af       	std	Y+62, r22	; 0x3e
    5072:	26 97       	sbiw	r28, 0x06	; 6
	//START_LUT // Macro
	unsigned char LUT[65];
	init_LUT(LUT);
    5074:	2e 01       	movw	r4, r28
    5076:	08 94       	sec
    5078:	41 1c       	adc	r4, r1
    507a:	51 1c       	adc	r5, r1
    507c:	c2 01       	movw	r24, r4
    507e:	0e 94 97 38 	call	0x712e	; 0x712e <init_LUT>
    5082:	66 24       	eor	r6, r6
    5084:	77 24       	eor	r7, r7
    5086:	ca c0       	rjmp	.+404    	; 0x521c <int_sidewaves+0x1ee>
	int origin_x, origin_y, distance, height;
	int x_dist,x_dist2,y_dist;
	int x,y,x_vox;
	for (i=0;i<iterations;i++)
	{
if (xit == 1) {i=iterations;break;}
    5088:	80 91 b3 01 	lds	r24, 0x01B3
    508c:	90 91 b4 01 	lds	r25, 0x01B4
    5090:	01 97       	sbiw	r24, 0x01	; 1
    5092:	09 f4       	brne	.+2      	; 0x5096 <int_sidewaves+0x68>
    5094:	cb c0       	rjmp	.+406    	; 0x522c <int_sidewaves+0x1fe>
		// x=8,y=8, origin_x=102, origin_y=102
		// = approximate sum of 17400.
		//
		// It is probably safer to work at a scale of 15 to allow simple changes
		// to the maths to be made without risking an overflow.
		origin_x=(totty_sin(LUT,i/2)+180)/3; // Approximately 0 to 120
    5096:	83 01       	movw	r16, r6
    5098:	15 95       	asr	r17
    509a:	07 95       	ror	r16
    509c:	c2 01       	movw	r24, r4
    509e:	b8 01       	movw	r22, r16
    50a0:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <totty_sin>
    50a4:	7c 01       	movw	r14, r24
		origin_y=(totty_cos(LUT,i/2)+180)/3;
    50a6:	c2 01       	movw	r24, r4
    50a8:	b8 01       	movw	r22, r16
    50aa:	0e 94 7f 38 	call	0x70fe	; 0x70fe <totty_cos>
    50ae:	8c 54       	subi	r24, 0x4C	; 76
    50b0:	9f 4f       	sbci	r25, 0xFF	; 255
    50b2:	63 e0       	ldi	r22, 0x03	; 3
    50b4:	70 e0       	ldi	r23, 0x00	; 0
    50b6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    50ba:	8b 01       	movw	r16, r22
		fill(0x00);
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    50c2:	c7 01       	movw	r24, r14
    50c4:	8c 54       	subi	r24, 0x4C	; 76
    50c6:	9f 4f       	sbci	r25, 0xFF	; 255
    50c8:	63 e0       	ldi	r22, 0x03	; 3
    50ca:	70 e0       	ldi	r23, 0x00	; 0
    50cc:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    50d0:	88 e0       	ldi	r24, 0x08	; 8
    50d2:	a8 2e       	mov	r10, r24
    50d4:	b1 2c       	mov	r11, r1
    50d6:	a6 1a       	sub	r10, r22
    50d8:	b7 0a       	sbc	r11, r23
    50da:	b8 e0       	ldi	r27, 0x08	; 8
    50dc:	8b 2e       	mov	r8, r27
    50de:	91 2c       	mov	r9, r1
		for (x=8;x<120;x+=15)// 8 steps from 8 to 113
		{
			// Everything in here happens 8 times per cycle
			x_dist=abs(x-origin_x);
			x_dist2=x_dist*x_dist; // square of difference
			x_vox=x/15;//  Unscale x
    50e0:	88 e0       	ldi	r24, 0x08	; 8
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	80 1b       	sub	r24, r16
    50e6:	91 0b       	sbc	r25, r17
    50e8:	2a 96       	adiw	r28, 0x0a	; 10
    50ea:	9f af       	std	Y+63, r25	; 0x3f
    50ec:	8e af       	std	Y+62, r24	; 0x3e
    50ee:	2a 97       	sbiw	r28, 0x0a	; 10
		origin_y=(totty_cos(LUT,i/2)+180)/3;
		fill(0x00);
		for (x=8;x<120;x+=15)// 8 steps from 8 to 113
		{
			// Everything in here happens 8 times per cycle
			x_dist=abs(x-origin_x);
    50f0:	75 01       	movw	r14, r10
    50f2:	b7 fe       	sbrs	r11, 7
    50f4:	04 c0       	rjmp	.+8      	; 0x50fe <int_sidewaves+0xd0>
    50f6:	ee 24       	eor	r14, r14
    50f8:	ff 24       	eor	r15, r15
    50fa:	ea 18       	sub	r14, r10
    50fc:	fb 08       	sbc	r15, r11
			x_dist2=x_dist*x_dist; // square of difference
    50fe:	ee 9c       	mul	r14, r14
    5100:	10 01       	movw	r2, r0
    5102:	ef 9c       	mul	r14, r15
    5104:	30 0c       	add	r3, r0
    5106:	fe 9c       	mul	r15, r14
    5108:	30 0c       	add	r3, r0
    510a:	11 24       	eor	r1, r1
			x_vox=x/15;//  Unscale x
    510c:	c4 01       	movw	r24, r8
    510e:	6f e0       	ldi	r22, 0x0F	; 15
    5110:	70 e0       	ldi	r23, 0x00	; 0
    5112:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    5116:	27 96       	adiw	r28, 0x07	; 7
    5118:	6f af       	std	Y+63, r22	; 0x3f
    511a:	27 97       	sbiw	r28, 0x07	; 7
    511c:	28 96       	adiw	r28, 0x08	; 8
    511e:	7f af       	std	Y+63, r23	; 0x3f
    5120:	28 97       	sbiw	r28, 0x08	; 8
    5122:	2a 96       	adiw	r28, 0x0a	; 10
    5124:	0e ad       	ldd	r16, Y+62	; 0x3e
    5126:	1f ad       	ldd	r17, Y+63	; 0x3f
    5128:	2a 97       	sbiw	r28, 0x0a	; 10
    512a:	a8 e0       	ldi	r26, 0x08	; 8
    512c:	ca 2e       	mov	r12, r26
    512e:	d1 2c       	mov	r13, r1
			for (y=8;y<120;y+=15)
			{
				// Everything in here happens 64 times per cycle
				y_dist=abs(y-origin_y);
    5130:	a8 01       	movw	r20, r16
    5132:	17 ff       	sbrs	r17, 7
    5134:	04 c0       	rjmp	.+8      	; 0x513e <int_sidewaves+0x110>
    5136:	44 27       	eor	r20, r20
    5138:	55 27       	eor	r21, r21
    513a:	40 1b       	sub	r20, r16
    513c:	51 0b       	sbc	r21, r17
				if (x_dist||y_dist)//Either x OR y non-zero
    513e:	e1 14       	cp	r14, r1
    5140:	f1 04       	cpc	r15, r1
    5142:	31 f4       	brne	.+12     	; 0x5150 <int_sidewaves+0x122>
    5144:	41 15       	cp	r20, r1
    5146:	51 05       	cpc	r21, r1
    5148:	19 f4       	brne	.+6      	; 0x5150 <int_sidewaves+0x122>
    514a:	60 e0       	ldi	r22, 0x00	; 0
    514c:	70 e0       	ldi	r23, 0x00	; 0
    514e:	18 c0       	rjmp	.+48     	; 0x5180 <int_sidewaves+0x152>
				{
					// Calculate sum of squares of linear distances
					// We use a 1st order Newton approximation:
					// sqrt=(N/guess+guess)/2
					distance=(x_dist2+y_dist*y_dist);
					height=(x_dist+y_dist)/2; // Approximate quotient
    5150:	9a 01       	movw	r18, r20
    5152:	2e 0d       	add	r18, r14
    5154:	3f 1d       	adc	r19, r15
    5156:	35 95       	asr	r19
    5158:	27 95       	ror	r18
					// We divide by 30.  1st approx would be /2
					// but we have a factor of 15 included in our scale calcs
					distance=(distance/height+height)/3; //1st approx at sqrt
    515a:	44 9f       	mul	r20, r20
    515c:	c0 01       	movw	r24, r0
    515e:	45 9f       	mul	r20, r21
    5160:	90 0d       	add	r25, r0
    5162:	54 9f       	mul	r21, r20
    5164:	90 0d       	add	r25, r0
    5166:	11 24       	eor	r1, r1
    5168:	82 0d       	add	r24, r2
    516a:	93 1d       	adc	r25, r3
    516c:	b9 01       	movw	r22, r18
    516e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    5172:	cb 01       	movw	r24, r22
    5174:	82 0f       	add	r24, r18
    5176:	93 1f       	adc	r25, r19
    5178:	63 e0       	ldi	r22, 0x03	; 3
    517a:	70 e0       	ldi	r23, 0x00	; 0
    517c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
				}
				else
					distance=0;//x and y = origin_x and origin_y
				height=(totty_sin(LUT,distance+i)+180)/52;
    5180:	66 0d       	add	r22, r6
    5182:	77 1d       	adc	r23, r7
    5184:	c2 01       	movw	r24, r4
    5186:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <totty_sin>
    518a:	9c 01       	movw	r18, r24
				setvoxel(x_vox,y/15,height);
    518c:	c6 01       	movw	r24, r12
    518e:	6f e0       	ldi	r22, 0x0F	; 15
    5190:	70 e0       	ldi	r23, 0x00	; 0
    5192:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    5196:	fb 01       	movw	r30, r22
    5198:	c9 01       	movw	r24, r18
    519a:	8c 54       	subi	r24, 0x4C	; 76
    519c:	9f 4f       	sbci	r25, 0xFF	; 255
    519e:	64 e3       	ldi	r22, 0x34	; 52
    51a0:	70 e0       	ldi	r23, 0x00	; 0
    51a2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    51a6:	ab 01       	movw	r20, r22
    51a8:	27 96       	adiw	r28, 0x07	; 7
    51aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    51ac:	27 97       	sbiw	r28, 0x07	; 7
    51ae:	28 96       	adiw	r28, 0x08	; 8
    51b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    51b2:	28 97       	sbiw	r28, 0x08	; 8
    51b4:	bf 01       	movw	r22, r30
    51b6:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
if (xit == 1) {break;}
    51ba:	80 91 b3 01 	lds	r24, 0x01B3
    51be:	90 91 b4 01 	lds	r25, 0x01B4
    51c2:	01 97       	sbiw	r24, 0x01	; 1
    51c4:	59 f0       	breq	.+22     	; 0x51dc <int_sidewaves+0x1ae>
		{
			// Everything in here happens 8 times per cycle
			x_dist=abs(x-origin_x);
			x_dist2=x_dist*x_dist; // square of difference
			x_vox=x/15;//  Unscale x
			for (y=8;y<120;y+=15)
    51c6:	8f e0       	ldi	r24, 0x0F	; 15
    51c8:	90 e0       	ldi	r25, 0x00	; 0
    51ca:	c8 0e       	add	r12, r24
    51cc:	d9 1e       	adc	r13, r25
    51ce:	01 5f       	subi	r16, 0xF1	; 241
    51d0:	1f 4f       	sbci	r17, 0xFF	; 255
    51d2:	90 e8       	ldi	r25, 0x80	; 128
    51d4:	c9 16       	cp	r12, r25
    51d6:	d1 04       	cpc	r13, r1
    51d8:	09 f0       	breq	.+2      	; 0x51dc <int_sidewaves+0x1ae>
    51da:	aa cf       	rjmp	.-172    	; 0x5130 <int_sidewaves+0x102>
					distance=0;//x and y = origin_x and origin_y
				height=(totty_sin(LUT,distance+i)+180)/52;
				setvoxel(x_vox,y/15,height);
if (xit == 1) {break;}
			}
if (xit == 1) {break;}
    51dc:	80 91 b3 01 	lds	r24, 0x01B3
    51e0:	90 91 b4 01 	lds	r25, 0x01B4
    51e4:	01 97       	sbiw	r24, 0x01	; 1
    51e6:	59 f0       	breq	.+22     	; 0x51fe <int_sidewaves+0x1d0>
		// It is probably safer to work at a scale of 15 to allow simple changes
		// to the maths to be made without risking an overflow.
		origin_x=(totty_sin(LUT,i/2)+180)/3; // Approximately 0 to 120
		origin_y=(totty_cos(LUT,i/2)+180)/3;
		fill(0x00);
		for (x=8;x<120;x+=15)// 8 steps from 8 to 113
    51e8:	8f e0       	ldi	r24, 0x0F	; 15
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	88 0e       	add	r8, r24
    51ee:	99 1e       	adc	r9, r25
    51f0:	a8 0e       	add	r10, r24
    51f2:	b9 1e       	adc	r11, r25
    51f4:	90 e8       	ldi	r25, 0x80	; 128
    51f6:	89 16       	cp	r8, r25
    51f8:	91 04       	cpc	r9, r1
    51fa:	09 f0       	breq	.+2      	; 0x51fe <int_sidewaves+0x1d0>
    51fc:	79 cf       	rjmp	.-270    	; 0x50f0 <int_sidewaves+0xc2>
				setvoxel(x_vox,y/15,height);
if (xit == 1) {break;}
			}
if (xit == 1) {break;}
		}
if (xit == 1) {break;}
    51fe:	80 91 b3 01 	lds	r24, 0x01B3
    5202:	90 91 b4 01 	lds	r25, 0x01B4
    5206:	01 97       	sbiw	r24, 0x01	; 1
    5208:	89 f0       	breq	.+34     	; 0x522c <int_sidewaves+0x1fe>
		delay_ms(delay);
    520a:	26 96       	adiw	r28, 0x06	; 6
    520c:	8e ad       	ldd	r24, Y+62	; 0x3e
    520e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5210:	26 97       	sbiw	r28, 0x06	; 6
    5212:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
	init_LUT(LUT);
	int i;
	int origin_x, origin_y, distance, height;
	int x_dist,x_dist2,y_dist;
	int x,y,x_vox;
	for (i=0;i<iterations;i++)
    5216:	08 94       	sec
    5218:	61 1c       	adc	r6, r1
    521a:	71 1c       	adc	r7, r1
    521c:	24 96       	adiw	r28, 0x04	; 4
    521e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5220:	9f ad       	ldd	r25, Y+63	; 0x3f
    5222:	24 97       	sbiw	r28, 0x04	; 4
    5224:	68 16       	cp	r6, r24
    5226:	79 06       	cpc	r7, r25
    5228:	0c f4       	brge	.+2      	; 0x522c <int_sidewaves+0x1fe>
    522a:	2e cf       	rjmp	.-420    	; 0x5088 <int_sidewaves+0x5a>
if (xit == 1) {break;}
		}
if (xit == 1) {break;}
		delay_ms(delay);
	}
}
    522c:	c7 5b       	subi	r28, 0xB7	; 183
    522e:	df 4f       	sbci	r29, 0xFF	; 255
    5230:	0f b6       	in	r0, 0x3f	; 63
    5232:	f8 94       	cli
    5234:	de bf       	out	0x3e, r29	; 62
    5236:	0f be       	out	0x3f, r0	; 63
    5238:	cd bf       	out	0x3d, r28	; 61
    523a:	cf 91       	pop	r28
    523c:	df 91       	pop	r29
    523e:	1f 91       	pop	r17
    5240:	0f 91       	pop	r16
    5242:	ff 90       	pop	r15
    5244:	ef 90       	pop	r14
    5246:	df 90       	pop	r13
    5248:	cf 90       	pop	r12
    524a:	bf 90       	pop	r11
    524c:	af 90       	pop	r10
    524e:	9f 90       	pop	r9
    5250:	8f 90       	pop	r8
    5252:	7f 90       	pop	r7
    5254:	6f 90       	pop	r6
    5256:	5f 90       	pop	r5
    5258:	4f 90       	pop	r4
    525a:	3f 90       	pop	r3
    525c:	2f 90       	pop	r2
    525e:	08 95       	ret

00005260 <fireworks>:
		}
	}
}

void fireworks (int iterations, int n)
{
    5260:	2f 92       	push	r2
    5262:	3f 92       	push	r3
    5264:	4f 92       	push	r4
    5266:	5f 92       	push	r5
    5268:	6f 92       	push	r6
    526a:	7f 92       	push	r7
    526c:	8f 92       	push	r8
    526e:	9f 92       	push	r9
    5270:	af 92       	push	r10
    5272:	bf 92       	push	r11
    5274:	cf 92       	push	r12
    5276:	df 92       	push	r13
    5278:	ef 92       	push	r14
    527a:	ff 92       	push	r15
    527c:	0f 93       	push	r16
    527e:	1f 93       	push	r17
    5280:	df 93       	push	r29
    5282:	cf 93       	push	r28
    5284:	cd b7       	in	r28, 0x3d	; 61
    5286:	de b7       	in	r29, 0x3e	; 62
    5288:	6c 97       	sbiw	r28, 0x1c	; 28
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	f8 94       	cli
    528e:	de bf       	out	0x3e, r29	; 62
    5290:	0f be       	out	0x3f, r0	; 63
    5292:	cd bf       	out	0x3d, r28	; 61
    5294:	9e 8b       	std	Y+22, r25	; 0x16
    5296:	8d 8b       	std	Y+21, r24	; 0x15
    5298:	78 8f       	std	Y+24, r23	; 0x18
    529a:	6f 8b       	std	Y+23, r22	; 0x17
			delay_ms(1000);
			fill(0x00);
		}
if (xit == 1) {break;}
	}
}
    529c:	2d b7       	in	r18, 0x3d	; 61
    529e:	3e b7       	in	r19, 0x3e	; 62
    52a0:	3a 8f       	std	Y+26, r19	; 0x1a
    52a2:	29 8f       	std	Y+25, r18	; 0x19
	}
}

void fireworks (int iterations, int n)
{
	fill(0x00);
    52a4:	80 e0       	ldi	r24, 0x00	; 0
    52a6:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
	int rand_y, rand_x, rand_z;

	float slowrate, gravity;

	// Particles and their position, x,y,z and their movement, dx, dy, dz
	float particles[n][6];
    52aa:	8f 89       	ldd	r24, Y+23	; 0x17
    52ac:	98 8d       	ldd	r25, Y+24	; 0x18
    52ae:	88 0f       	add	r24, r24
    52b0:	99 1f       	adc	r25, r25
    52b2:	af 89       	ldd	r26, Y+23	; 0x17
    52b4:	b8 8d       	ldd	r27, Y+24	; 0x18
    52b6:	8a 0f       	add	r24, r26
    52b8:	9b 1f       	adc	r25, r27
    52ba:	33 e0       	ldi	r19, 0x03	; 3
    52bc:	88 0f       	add	r24, r24
    52be:	99 1f       	adc	r25, r25
    52c0:	3a 95       	dec	r19
    52c2:	e1 f7       	brne	.-8      	; 0x52bc <fireworks+0x5c>
    52c4:	ed b7       	in	r30, 0x3d	; 61
    52c6:	fe b7       	in	r31, 0x3e	; 62
    52c8:	e8 1b       	sub	r30, r24
    52ca:	f9 0b       	sbc	r31, r25
    52cc:	0f b6       	in	r0, 0x3f	; 63
    52ce:	f8 94       	cli
    52d0:	fe bf       	out	0x3e, r31	; 62
    52d2:	0f be       	out	0x3f, r0	; 63
    52d4:	ed bf       	out	0x3d, r30	; 61
    52d6:	8d b7       	in	r24, 0x3d	; 61
    52d8:	9e b7       	in	r25, 0x3e	; 62
    52da:	01 96       	adiw	r24, 0x01	; 1
    52dc:	8b 8f       	std	Y+27, r24	; 0x1b
    52de:	9c 8f       	std	Y+28, r25	; 0x1c
    52e0:	1c 8a       	std	Y+20, r1	; 0x14
    52e2:	1b 8a       	std	Y+19, r1	; 0x13
    52e4:	0c c2       	rjmp	.+1048   	; 0x56fe <fireworks+0x49e>

	for (i=0; i<iterations; i++)
	{
if (xit == 1) {i=iterations;break;}
    52e6:	80 91 b3 01 	lds	r24, 0x01B3
    52ea:	90 91 b4 01 	lds	r25, 0x01B4
    52ee:	01 97       	sbiw	r24, 0x01	; 1
    52f0:	09 f4       	brne	.+2      	; 0x52f4 <fireworks+0x94>
    52f2:	0d c2       	rjmp	.+1050   	; 0x570e <fireworks+0x4ae>

		origin_x = rand()%4;
    52f4:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    52f8:	64 e0       	ldi	r22, 0x04	; 4
    52fa:	70 e0       	ldi	r23, 0x00	; 0
    52fc:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    5300:	aa 27       	eor	r26, r26
    5302:	97 fd       	sbrc	r25, 7
    5304:	a0 95       	com	r26
    5306:	ba 2f       	mov	r27, r26
    5308:	bc 01       	movw	r22, r24
    530a:	cd 01       	movw	r24, r26
    530c:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5310:	5b 01       	movw	r10, r22
    5312:	6c 01       	movw	r12, r24
		origin_y = rand()%4;
    5314:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    5318:	64 e0       	ldi	r22, 0x04	; 4
    531a:	70 e0       	ldi	r23, 0x00	; 0
    531c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    5320:	aa 27       	eor	r26, r26
    5322:	97 fd       	sbrc	r25, 7
    5324:	a0 95       	com	r26
    5326:	ba 2f       	mov	r27, r26
    5328:	bc 01       	movw	r22, r24
    532a:	cd 01       	movw	r24, r26
    532c:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5330:	7b 01       	movw	r14, r22
    5332:	8c 01       	movw	r16, r24
		origin_z = rand()%2;
    5334:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    5338:	62 e0       	ldi	r22, 0x02	; 2
    533a:	70 e0       	ldi	r23, 0x00	; 0
    533c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    5340:	aa 27       	eor	r26, r26
    5342:	97 fd       	sbrc	r25, 7
    5344:	a0 95       	com	r26
    5346:	ba 2f       	mov	r27, r26
    5348:	bc 01       	movw	r22, r24
    534a:	cd 01       	movw	r24, r26
    534c:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
		origin_z +=5;
    5350:	20 e0       	ldi	r18, 0x00	; 0
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	40 ea       	ldi	r20, 0xA0	; 160
    5356:	50 e4       	ldi	r21, 0x40	; 64
    5358:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    535c:	6f 83       	std	Y+7, r22	; 0x07
    535e:	78 87       	std	Y+8, r23	; 0x08
    5360:	89 87       	std	Y+9, r24	; 0x09
    5362:	9a 87       	std	Y+10, r25	; 0x0a
        origin_x +=2;
    5364:	c6 01       	movw	r24, r12
    5366:	b5 01       	movw	r22, r10
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	40 e0       	ldi	r20, 0x00	; 0
    536e:	50 e4       	ldi	r21, 0x40	; 64
    5370:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5374:	6b 83       	std	Y+3, r22	; 0x03
    5376:	7c 83       	std	Y+4, r23	; 0x04
    5378:	8d 83       	std	Y+5, r24	; 0x05
    537a:	9e 83       	std	Y+6, r25	; 0x06
        origin_y +=2;
    537c:	c8 01       	movw	r24, r16
    537e:	b7 01       	movw	r22, r14
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	40 e0       	ldi	r20, 0x00	; 0
    5386:	50 e4       	ldi	r21, 0x40	; 64
    5388:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    538c:	4b 01       	movw	r8, r22
    538e:	5c 01       	movw	r10, r24
    5390:	44 24       	eor	r4, r4
    5392:	55 24       	eor	r5, r5
    5394:	24 ef       	ldi	r18, 0xF4	; 244
    5396:	c2 2e       	mov	r12, r18
    5398:	21 e0       	ldi	r18, 0x01	; 1
    539a:	d2 2e       	mov	r13, r18
    539c:	2d c0       	rjmp	.+90     	; 0x53f8 <fireworks+0x198>

		// shoot a particle up in the air value was 600+500
		for (e=0;e<origin_z;e++)
		{
			setvoxel(origin_x,origin_y,e);
    539e:	6b 81       	ldd	r22, Y+3	; 0x03
    53a0:	7c 81       	ldd	r23, Y+4	; 0x04
    53a2:	8d 81       	ldd	r24, Y+5	; 0x05
    53a4:	9e 81       	ldd	r25, Y+6	; 0x06
    53a6:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    53aa:	7b 01       	movw	r14, r22
    53ac:	8c 01       	movw	r16, r24
    53ae:	c5 01       	movw	r24, r10
    53b0:	b4 01       	movw	r22, r8
    53b2:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    53b6:	9b 01       	movw	r18, r22
    53b8:	ac 01       	movw	r20, r24
    53ba:	c7 01       	movw	r24, r14
    53bc:	b9 01       	movw	r22, r18
    53be:	a2 01       	movw	r20, r4
    53c0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
			delay_ms(500+500*e);
    53c4:	08 94       	sec
    53c6:	41 1c       	adc	r4, r1
    53c8:	51 1c       	adc	r5, r1
    53ca:	c6 01       	movw	r24, r12
    53cc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			fill(0x00);
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    53d6:	24 ef       	ldi	r18, 0xF4	; 244
    53d8:	31 e0       	ldi	r19, 0x01	; 1
    53da:	c2 0e       	add	r12, r18
    53dc:	d3 1e       	adc	r13, r19
if (xit == 1) {break;}
    53de:	80 91 b3 01 	lds	r24, 0x01B3
    53e2:	90 91 b4 01 	lds	r25, 0x01B4
    53e6:	01 97       	sbiw	r24, 0x01	; 1
    53e8:	39 f4       	brne	.+14     	; 0x53f8 <fireworks+0x198>
    53ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53ee:	9c 01       	movw	r18, r24
    53f0:	29 01       	movw	r4, r18
    53f2:	22 24       	eor	r2, r2
    53f4:	33 24       	eor	r3, r3
    53f6:	9d c0       	rjmp	.+314    	; 0x5532 <fireworks+0x2d2>
		origin_z +=5;
        origin_x +=2;
        origin_y +=2;

		// shoot a particle up in the air value was 600+500
		for (e=0;e<origin_z;e++)
    53f8:	b2 01       	movw	r22, r4
    53fa:	88 27       	eor	r24, r24
    53fc:	77 fd       	sbrc	r23, 7
    53fe:	80 95       	com	r24
    5400:	98 2f       	mov	r25, r24
    5402:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5406:	2f 81       	ldd	r18, Y+7	; 0x07
    5408:	38 85       	ldd	r19, Y+8	; 0x08
    540a:	49 85       	ldd	r20, Y+9	; 0x09
    540c:	5a 85       	ldd	r21, Y+10	; 0x0a
    540e:	0e 94 32 39 	call	0x7264	; 0x7264 <__cmpsf2>
    5412:	87 fd       	sbrc	r24, 7
    5414:	c4 cf       	rjmp	.-120    	; 0x539e <fireworks+0x13e>
    5416:	e9 cf       	rjmp	.-46     	; 0x53ea <fireworks+0x18a>
		}

		// Fill particle array
		for (f=0; f<n; f++)
		{
if (xit == 1) {break;}
    5418:	80 91 b3 01 	lds	r24, 0x01B3
    541c:	90 91 b4 01 	lds	r25, 0x01B4
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	09 f4       	brne	.+2      	; 0x5426 <fireworks+0x1c6>
    5424:	8c c0       	rjmp	.+280    	; 0x553e <fireworks+0x2de>
			// Position
			particles[f][0] = origin_x;
    5426:	8b 81       	ldd	r24, Y+3	; 0x03
    5428:	9c 81       	ldd	r25, Y+4	; 0x04
    542a:	ad 81       	ldd	r26, Y+5	; 0x05
    542c:	be 81       	ldd	r27, Y+6	; 0x06
    542e:	f2 01       	movw	r30, r4
    5430:	80 83       	st	Z, r24
    5432:	91 83       	std	Z+1, r25	; 0x01
    5434:	a2 83       	std	Z+2, r26	; 0x02
    5436:	b3 83       	std	Z+3, r27	; 0x03
			particles[f][1] = origin_y;
    5438:	d2 01       	movw	r26, r4
    543a:	14 96       	adiw	r26, 0x04	; 4
    543c:	8d 92       	st	X+, r8
    543e:	9d 92       	st	X+, r9
    5440:	ad 92       	st	X+, r10
    5442:	bc 92       	st	X, r11
    5444:	17 97       	sbiw	r26, 0x07	; 7
			particles[f][2] = origin_z;
    5446:	8f 81       	ldd	r24, Y+7	; 0x07
    5448:	98 85       	ldd	r25, Y+8	; 0x08
    544a:	a9 85       	ldd	r26, Y+9	; 0x09
    544c:	ba 85       	ldd	r27, Y+10	; 0x0a
    544e:	80 87       	std	Z+8, r24	; 0x08
    5450:	91 87       	std	Z+9, r25	; 0x09
    5452:	a2 87       	std	Z+10, r26	; 0x0a
    5454:	b3 87       	std	Z+11, r27	; 0x0b
			
			rand_x = rand()%200;
    5456:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    545a:	8c 01       	movw	r16, r24
			rand_y = rand()%200;
    545c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    5460:	7c 01       	movw	r14, r24
			rand_z = rand()%200;
    5462:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    5466:	6c 01       	movw	r12, r24

			// Movement
			particles[f][3] = 1-(float)rand_x/100; // dx
    5468:	c8 01       	movw	r24, r16
    546a:	68 ec       	ldi	r22, 0xC8	; 200
    546c:	70 e0       	ldi	r23, 0x00	; 0
    546e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    5472:	aa 27       	eor	r26, r26
    5474:	97 fd       	sbrc	r25, 7
    5476:	a0 95       	com	r26
    5478:	ba 2f       	mov	r27, r26
    547a:	bc 01       	movw	r22, r24
    547c:	cd 01       	movw	r24, r26
    547e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5482:	20 e0       	ldi	r18, 0x00	; 0
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	48 ec       	ldi	r20, 0xC8	; 200
    5488:	52 ec       	ldi	r21, 0xC2	; 194
    548a:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    548e:	20 e0       	ldi	r18, 0x00	; 0
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	40 e8       	ldi	r20, 0x80	; 128
    5494:	5f e3       	ldi	r21, 0x3F	; 63
    5496:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    549a:	d2 01       	movw	r26, r4
    549c:	1c 96       	adiw	r26, 0x0c	; 12
    549e:	6d 93       	st	X+, r22
    54a0:	7d 93       	st	X+, r23
    54a2:	8d 93       	st	X+, r24
    54a4:	9c 93       	st	X, r25
    54a6:	1f 97       	sbiw	r26, 0x0f	; 15
			particles[f][4] = 1-(float)rand_y/100; // dy
    54a8:	c7 01       	movw	r24, r14
    54aa:	68 ec       	ldi	r22, 0xC8	; 200
    54ac:	70 e0       	ldi	r23, 0x00	; 0
    54ae:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    54b2:	aa 27       	eor	r26, r26
    54b4:	97 fd       	sbrc	r25, 7
    54b6:	a0 95       	com	r26
    54b8:	ba 2f       	mov	r27, r26
    54ba:	bc 01       	movw	r22, r24
    54bc:	cd 01       	movw	r24, r26
    54be:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	48 ec       	ldi	r20, 0xC8	; 200
    54c8:	52 ec       	ldi	r21, 0xC2	; 194
    54ca:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	40 e8       	ldi	r20, 0x80	; 128
    54d4:	5f e3       	ldi	r21, 0x3F	; 63
    54d6:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    54da:	f2 01       	movw	r30, r4
    54dc:	60 8b       	std	Z+16, r22	; 0x10
    54de:	71 8b       	std	Z+17, r23	; 0x11
    54e0:	82 8b       	std	Z+18, r24	; 0x12
    54e2:	93 8b       	std	Z+19, r25	; 0x13
			particles[f][5] = 1-(float)rand_z/100; // dz
    54e4:	c6 01       	movw	r24, r12
    54e6:	68 ec       	ldi	r22, 0xC8	; 200
    54e8:	70 e0       	ldi	r23, 0x00	; 0
    54ea:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    54ee:	aa 27       	eor	r26, r26
    54f0:	97 fd       	sbrc	r25, 7
    54f2:	a0 95       	com	r26
    54f4:	ba 2f       	mov	r27, r26
    54f6:	bc 01       	movw	r22, r24
    54f8:	cd 01       	movw	r24, r26
    54fa:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    54fe:	20 e0       	ldi	r18, 0x00	; 0
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	48 ec       	ldi	r20, 0xC8	; 200
    5504:	52 ec       	ldi	r21, 0xC2	; 194
    5506:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    550a:	20 e0       	ldi	r18, 0x00	; 0
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	40 e8       	ldi	r20, 0x80	; 128
    5510:	5f e3       	ldi	r21, 0x3F	; 63
    5512:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5516:	d2 01       	movw	r26, r4
    5518:	54 96       	adiw	r26, 0x14	; 20
    551a:	6d 93       	st	X+, r22
    551c:	7d 93       	st	X+, r23
    551e:	8d 93       	st	X+, r24
    5520:	9c 93       	st	X, r25
    5522:	57 97       	sbiw	r26, 0x17	; 23
			fill(0x00);
if (xit == 1) {break;}
		}

		// Fill particle array
		for (f=0; f<n; f++)
    5524:	08 94       	sec
    5526:	21 1c       	adc	r2, r1
    5528:	31 1c       	adc	r3, r1
    552a:	e8 e1       	ldi	r30, 0x18	; 24
    552c:	f0 e0       	ldi	r31, 0x00	; 0
    552e:	4e 0e       	add	r4, r30
    5530:	5f 1e       	adc	r5, r31
    5532:	2f 89       	ldd	r18, Y+23	; 0x17
    5534:	38 8d       	ldd	r19, Y+24	; 0x18
    5536:	22 16       	cp	r2, r18
    5538:	33 06       	cpc	r3, r19
    553a:	0c f4       	brge	.+2      	; 0x553e <fireworks+0x2de>
    553c:	6d cf       	rjmp	.-294    	; 0x5418 <fireworks+0x1b8>
    553e:	1a 82       	std	Y+2, r1	; 0x02
    5540:	19 82       	std	Y+1, r1	; 0x01
		}

		// explode
		for (e=0; e<25; e++)
		{
if (xit == 1) {break;}
    5542:	80 91 b3 01 	lds	r24, 0x01B3
    5546:	90 91 b4 01 	lds	r25, 0x01B4
    554a:	01 97       	sbiw	r24, 0x01	; 1
    554c:	09 f4       	brne	.+2      	; 0x5550 <fireworks+0x2f0>
    554e:	cc c0       	rjmp	.+408    	; 0x56e8 <fireworks+0x488>
			slowrate = 1+tan((e+0.1)/20)*10;
    5550:	a9 81       	ldd	r26, Y+1	; 0x01
    5552:	ba 81       	ldd	r27, Y+2	; 0x02
    5554:	bd 01       	movw	r22, r26
    5556:	88 27       	eor	r24, r24
    5558:	77 fd       	sbrc	r23, 7
    555a:	80 95       	com	r24
    555c:	98 2f       	mov	r25, r24
    555e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5562:	2d ec       	ldi	r18, 0xCD	; 205
    5564:	3c ec       	ldi	r19, 0xCC	; 204
    5566:	4c ec       	ldi	r20, 0xCC	; 204
    5568:	5d e3       	ldi	r21, 0x3D	; 61
    556a:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    556e:	20 e0       	ldi	r18, 0x00	; 0
    5570:	30 e0       	ldi	r19, 0x00	; 0
    5572:	40 ea       	ldi	r20, 0xA0	; 160
    5574:	51 e4       	ldi	r21, 0x41	; 65
    5576:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    557a:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <tan>
    557e:	7b 01       	movw	r14, r22
    5580:	8c 01       	movw	r16, r24
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	40 e2       	ldi	r20, 0x20	; 32
    5588:	51 e4       	ldi	r21, 0x41	; 65
    558a:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e8       	ldi	r20, 0x80	; 128
    5594:	5f e3       	ldi	r21, 0x3F	; 63
    5596:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    559a:	6f 87       	std	Y+15, r22	; 0x0f
    559c:	78 8b       	std	Y+16, r23	; 0x10
    559e:	89 8b       	std	Y+17, r24	; 0x11
    55a0:	9a 8b       	std	Y+18, r25	; 0x12
			
			gravity = tan((e+0.1)/20)/2;
    55a2:	c8 01       	movw	r24, r16
    55a4:	b7 01       	movw	r22, r14
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	40 e0       	ldi	r20, 0x00	; 0
    55ac:	5f e3       	ldi	r21, 0x3F	; 63
    55ae:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    55b2:	6b 87       	std	Y+11, r22	; 0x0b
    55b4:	7c 87       	std	Y+12, r23	; 0x0c
    55b6:	8d 87       	std	Y+13, r24	; 0x0d
    55b8:	9e 87       	std	Y+14, r25	; 0x0e
    55ba:	2b 8d       	ldd	r18, Y+27	; 0x1b
    55bc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    55be:	c9 01       	movw	r24, r18
    55c0:	2c 01       	movw	r4, r24
    55c2:	22 24       	eor	r2, r2
    55c4:	33 24       	eor	r3, r3
    55c6:	75 c0       	rjmp	.+234    	; 0x56b2 <fireworks+0x452>

			for (f=0; f<n; f++)
			{
				particles[f][0] += particles[f][3]/slowrate;
    55c8:	f2 01       	movw	r30, r4
    55ca:	64 85       	ldd	r22, Z+12	; 0x0c
    55cc:	75 85       	ldd	r23, Z+13	; 0x0d
    55ce:	86 85       	ldd	r24, Z+14	; 0x0e
    55d0:	97 85       	ldd	r25, Z+15	; 0x0f
    55d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    55d4:	38 89       	ldd	r19, Y+16	; 0x10
    55d6:	49 89       	ldd	r20, Y+17	; 0x11
    55d8:	5a 89       	ldd	r21, Y+18	; 0x12
    55da:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    55de:	9b 01       	movw	r18, r22
    55e0:	ac 01       	movw	r20, r24
    55e2:	d2 01       	movw	r26, r4
    55e4:	6d 91       	ld	r22, X+
    55e6:	7d 91       	ld	r23, X+
    55e8:	8d 91       	ld	r24, X+
    55ea:	9c 91       	ld	r25, X
    55ec:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    55f0:	3b 01       	movw	r6, r22
    55f2:	4c 01       	movw	r8, r24
    55f4:	f2 01       	movw	r30, r4
    55f6:	60 83       	st	Z, r22
    55f8:	71 83       	std	Z+1, r23	; 0x01
    55fa:	82 83       	std	Z+2, r24	; 0x02
    55fc:	93 83       	std	Z+3, r25	; 0x03
				particles[f][1] += particles[f][4]/slowrate;
    55fe:	60 89       	ldd	r22, Z+16	; 0x10
    5600:	71 89       	ldd	r23, Z+17	; 0x11
    5602:	82 89       	ldd	r24, Z+18	; 0x12
    5604:	93 89       	ldd	r25, Z+19	; 0x13
    5606:	2f 85       	ldd	r18, Y+15	; 0x0f
    5608:	38 89       	ldd	r19, Y+16	; 0x10
    560a:	49 89       	ldd	r20, Y+17	; 0x11
    560c:	5a 89       	ldd	r21, Y+18	; 0x12
    560e:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5612:	9b 01       	movw	r18, r22
    5614:	ac 01       	movw	r20, r24
    5616:	d2 01       	movw	r26, r4
    5618:	14 96       	adiw	r26, 0x04	; 4
    561a:	6d 91       	ld	r22, X+
    561c:	7d 91       	ld	r23, X+
    561e:	8d 91       	ld	r24, X+
    5620:	9c 91       	ld	r25, X
    5622:	17 97       	sbiw	r26, 0x07	; 7
    5624:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5628:	7b 01       	movw	r14, r22
    562a:	8c 01       	movw	r16, r24
    562c:	f2 01       	movw	r30, r4
    562e:	64 83       	std	Z+4, r22	; 0x04
    5630:	75 83       	std	Z+5, r23	; 0x05
    5632:	86 83       	std	Z+6, r24	; 0x06
    5634:	97 83       	std	Z+7, r25	; 0x07
				particles[f][2] += particles[f][5]/slowrate;
				particles[f][2] -= gravity;
    5636:	64 89       	ldd	r22, Z+20	; 0x14
    5638:	75 89       	ldd	r23, Z+21	; 0x15
    563a:	86 89       	ldd	r24, Z+22	; 0x16
    563c:	97 89       	ldd	r25, Z+23	; 0x17
    563e:	2f 85       	ldd	r18, Y+15	; 0x0f
    5640:	38 89       	ldd	r19, Y+16	; 0x10
    5642:	49 89       	ldd	r20, Y+17	; 0x11
    5644:	5a 89       	ldd	r21, Y+18	; 0x12
    5646:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    564a:	d2 01       	movw	r26, r4
    564c:	18 96       	adiw	r26, 0x08	; 8
    564e:	2d 91       	ld	r18, X+
    5650:	3d 91       	ld	r19, X+
    5652:	4d 91       	ld	r20, X+
    5654:	5c 91       	ld	r21, X
    5656:	1b 97       	sbiw	r26, 0x0b	; 11
    5658:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    565c:	2b 85       	ldd	r18, Y+11	; 0x0b
    565e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5660:	4d 85       	ldd	r20, Y+13	; 0x0d
    5662:	5e 85       	ldd	r21, Y+14	; 0x0e
    5664:	0e 94 cd 38 	call	0x719a	; 0x719a <__subsf3>
    5668:	5b 01       	movw	r10, r22
    566a:	6c 01       	movw	r12, r24
    566c:	f2 01       	movw	r30, r4
    566e:	60 87       	std	Z+8, r22	; 0x08
    5670:	71 87       	std	Z+9, r23	; 0x09
    5672:	82 87       	std	Z+10, r24	; 0x0a
    5674:	93 87       	std	Z+11, r25	; 0x0b

				setvoxel(particles[f][0],particles[f][1],particles[f][2]);
    5676:	c4 01       	movw	r24, r8
    5678:	b3 01       	movw	r22, r6
    567a:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    567e:	3b 01       	movw	r6, r22
    5680:	4c 01       	movw	r8, r24
    5682:	c8 01       	movw	r24, r16
    5684:	b7 01       	movw	r22, r14
    5686:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    568a:	7b 01       	movw	r14, r22
    568c:	8c 01       	movw	r16, r24
    568e:	c6 01       	movw	r24, r12
    5690:	b5 01       	movw	r22, r10
    5692:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    5696:	9b 01       	movw	r18, r22
    5698:	ac 01       	movw	r20, r24
    569a:	c3 01       	movw	r24, r6
    569c:	b7 01       	movw	r22, r14
    569e:	a9 01       	movw	r20, r18
    56a0:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
if (xit == 1) {break;}
			slowrate = 1+tan((e+0.1)/20)*10;
			
			gravity = tan((e+0.1)/20)/2;

			for (f=0; f<n; f++)
    56a4:	08 94       	sec
    56a6:	21 1c       	adc	r2, r1
    56a8:	31 1c       	adc	r3, r1
    56aa:	28 e1       	ldi	r18, 0x18	; 24
    56ac:	30 e0       	ldi	r19, 0x00	; 0
    56ae:	42 0e       	add	r4, r18
    56b0:	53 1e       	adc	r5, r19
    56b2:	8f 89       	ldd	r24, Y+23	; 0x17
    56b4:	98 8d       	ldd	r25, Y+24	; 0x18
    56b6:	28 16       	cp	r2, r24
    56b8:	39 06       	cpc	r3, r25
    56ba:	0c f4       	brge	.+2      	; 0x56be <fireworks+0x45e>
    56bc:	85 cf       	rjmp	.-246    	; 0x55c8 <fireworks+0x368>

				setvoxel(particles[f][0],particles[f][1],particles[f][2]);


			}
if (xit == 1) {break;}
    56be:	80 91 b3 01 	lds	r24, 0x01B3
    56c2:	90 91 b4 01 	lds	r25, 0x01B4
    56c6:	01 97       	sbiw	r24, 0x01	; 1
    56c8:	79 f0       	breq	.+30     	; 0x56e8 <fireworks+0x488>
			delay_ms(1000);
    56ca:	88 ee       	ldi	r24, 0xE8	; 232
    56cc:	93 e0       	ldi	r25, 0x03	; 3
    56ce:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			fill(0x00);
    56d2:	80 e0       	ldi	r24, 0x00	; 0
    56d4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
			particles[f][4] = 1-(float)rand_y/100; // dy
			particles[f][5] = 1-(float)rand_z/100; // dz
		}

		// explode
		for (e=0; e<25; e++)
    56d8:	a9 81       	ldd	r26, Y+1	; 0x01
    56da:	ba 81       	ldd	r27, Y+2	; 0x02
    56dc:	11 96       	adiw	r26, 0x01	; 1
    56de:	ba 83       	std	Y+2, r27	; 0x02
    56e0:	a9 83       	std	Y+1, r26	; 0x01
    56e2:	59 97       	sbiw	r26, 0x19	; 25
    56e4:	09 f0       	breq	.+2      	; 0x56e8 <fireworks+0x488>
    56e6:	2d cf       	rjmp	.-422    	; 0x5542 <fireworks+0x2e2>
			}
if (xit == 1) {break;}
			delay_ms(1000);
			fill(0x00);
		}
if (xit == 1) {break;}
    56e8:	80 91 b3 01 	lds	r24, 0x01B3
    56ec:	90 91 b4 01 	lds	r25, 0x01B4
    56f0:	01 97       	sbiw	r24, 0x01	; 1
    56f2:	69 f0       	breq	.+26     	; 0x570e <fireworks+0x4ae>
	float slowrate, gravity;

	// Particles and their position, x,y,z and their movement, dx, dy, dz
	float particles[n][6];

	for (i=0; i<iterations; i++)
    56f4:	eb 89       	ldd	r30, Y+19	; 0x13
    56f6:	fc 89       	ldd	r31, Y+20	; 0x14
    56f8:	31 96       	adiw	r30, 0x01	; 1
    56fa:	fc 8b       	std	Y+20, r31	; 0x14
    56fc:	eb 8b       	std	Y+19, r30	; 0x13
    56fe:	2b 89       	ldd	r18, Y+19	; 0x13
    5700:	3c 89       	ldd	r19, Y+20	; 0x14
    5702:	8d 89       	ldd	r24, Y+21	; 0x15
    5704:	9e 89       	ldd	r25, Y+22	; 0x16
    5706:	28 17       	cp	r18, r24
    5708:	39 07       	cpc	r19, r25
    570a:	0c f4       	brge	.+2      	; 0x570e <fireworks+0x4ae>
    570c:	ec cd       	rjmp	.-1064   	; 0x52e6 <fireworks+0x86>
			delay_ms(1000);
			fill(0x00);
		}
if (xit == 1) {break;}
	}
}
    570e:	a9 8d       	ldd	r26, Y+25	; 0x19
    5710:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5712:	0f b6       	in	r0, 0x3f	; 63
    5714:	f8 94       	cli
    5716:	be bf       	out	0x3e, r27	; 62
    5718:	0f be       	out	0x3f, r0	; 63
    571a:	ad bf       	out	0x3d, r26	; 61
    571c:	6c 96       	adiw	r28, 0x1c	; 28
    571e:	0f b6       	in	r0, 0x3f	; 63
    5720:	f8 94       	cli
    5722:	de bf       	out	0x3e, r29	; 62
    5724:	0f be       	out	0x3f, r0	; 63
    5726:	cd bf       	out	0x3d, r28	; 61
    5728:	cf 91       	pop	r28
    572a:	df 91       	pop	r29
    572c:	1f 91       	pop	r17
    572e:	0f 91       	pop	r16
    5730:	ff 90       	pop	r15
    5732:	ef 90       	pop	r14
    5734:	df 90       	pop	r13
    5736:	cf 90       	pop	r12
    5738:	bf 90       	pop	r11
    573a:	af 90       	pop	r10
    573c:	9f 90       	pop	r9
    573e:	8f 90       	pop	r8
    5740:	7f 90       	pop	r7
    5742:	6f 90       	pop	r6
    5744:	5f 90       	pop	r5
    5746:	4f 90       	pop	r4
    5748:	3f 90       	pop	r3
    574a:	2f 90       	pop	r2
    574c:	08 95       	ret

0000574e <twister>:
loc = 0;
}
}

void twister (int iterations, int Delay)
{
    574e:	4f 92       	push	r4
    5750:	5f 92       	push	r5
    5752:	6f 92       	push	r6
    5754:	7f 92       	push	r7
    5756:	8f 92       	push	r8
    5758:	9f 92       	push	r9
    575a:	af 92       	push	r10
    575c:	bf 92       	push	r11
    575e:	cf 92       	push	r12
    5760:	df 92       	push	r13
    5762:	ef 92       	push	r14
    5764:	ff 92       	push	r15
    5766:	0f 93       	push	r16
    5768:	1f 93       	push	r17
    576a:	cf 93       	push	r28
    576c:	df 93       	push	r29
    576e:	3c 01       	movw	r6, r24
    5770:	4b 01       	movw	r8, r22
    5772:	aa 24       	eor	r10, r10
    5774:	bb 24       	eor	r11, r11
	for (iter = 0;iter < iterations;iter++)
	{
if (xit == 1) {iter = iterations;break;}
		for (twist=0;twist<8;twist++)
		{
if (xit == 1) {break;}
    5776:	57 e0       	ldi	r21, 0x07	; 7
    5778:	45 2e       	mov	r4, r21
    577a:	51 2c       	mov	r5, r1
    577c:	43 c0       	rjmp	.+134    	; 0x5804 <twister+0xb6>
void twister (int iterations, int Delay)
{
	int iter,twist;
	for (iter = 0;iter < iterations;iter++)
	{
if (xit == 1) {iter = iterations;break;}
    577e:	80 91 b3 01 	lds	r24, 0x01B3
    5782:	90 91 b4 01 	lds	r25, 0x01B4
    5786:	01 97       	sbiw	r24, 0x01	; 1
    5788:	09 f4       	brne	.+2      	; 0x578c <twister+0x3e>
    578a:	40 c0       	rjmp	.+128    	; 0x580c <twister+0xbe>
    578c:	c0 e0       	ldi	r28, 0x00	; 0
    578e:	d0 e0       	ldi	r29, 0x00	; 0
		for (twist=0;twist<8;twist++)
		{
if (xit == 1) {break;}
    5790:	80 91 b3 01 	lds	r24, 0x01B3
    5794:	90 91 b4 01 	lds	r25, 0x01B4
    5798:	01 97       	sbiw	r24, 0x01	; 1
    579a:	89 f1       	breq	.+98     	; 0x57fe <twister+0xb0>
    579c:	62 01       	movw	r12, r4
    579e:	cc 1a       	sub	r12, r28
    57a0:	dd 0a       	sbc	r13, r29
			line (0,0,twist,7,0,7-twist);
    57a2:	80 e0       	ldi	r24, 0x00	; 0
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	60 e0       	ldi	r22, 0x00	; 0
    57a8:	70 e0       	ldi	r23, 0x00	; 0
    57aa:	ae 01       	movw	r20, r28
    57ac:	27 e0       	ldi	r18, 0x07	; 7
    57ae:	30 e0       	ldi	r19, 0x00	; 0
    57b0:	00 e0       	ldi	r16, 0x00	; 0
    57b2:	10 e0       	ldi	r17, 0x00	; 0
    57b4:	76 01       	movw	r14, r12
    57b6:	0e 94 09 0c 	call	0x1812	; 0x1812 <line>
			line (0,twist,0,7,7-twist,0);
    57ba:	80 e0       	ldi	r24, 0x00	; 0
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	be 01       	movw	r22, r28
    57c0:	40 e0       	ldi	r20, 0x00	; 0
    57c2:	50 e0       	ldi	r21, 0x00	; 0
    57c4:	27 e0       	ldi	r18, 0x07	; 7
    57c6:	30 e0       	ldi	r19, 0x00	; 0
    57c8:	86 01       	movw	r16, r12
    57ca:	ee 24       	eor	r14, r14
    57cc:	ff 24       	eor	r15, r15
    57ce:	0e 94 09 0c 	call	0x1812	; 0x1812 <line>
			delay_ms (Delay);
    57d2:	c4 01       	movw	r24, r8
    57d4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			shift (AXIS_Y, 1);
    57d8:	89 e7       	ldi	r24, 0x79	; 121
    57da:	61 e0       	ldi	r22, 0x01	; 1
    57dc:	70 e0       	ldi	r23, 0x00	; 0
    57de:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
			shift (AXIS_Z, -1);
    57e2:	8a e7       	ldi	r24, 0x7A	; 122
    57e4:	6f ef       	ldi	r22, 0xFF	; 255
    57e6:	7f ef       	ldi	r23, 0xFF	; 255
    57e8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
			shift (AXIS_X, -1);
    57ec:	88 e7       	ldi	r24, 0x78	; 120
    57ee:	6f ef       	ldi	r22, 0xFF	; 255
    57f0:	7f ef       	ldi	r23, 0xFF	; 255
    57f2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <shift>
{
	int iter,twist;
	for (iter = 0;iter < iterations;iter++)
	{
if (xit == 1) {iter = iterations;break;}
		for (twist=0;twist<8;twist++)
    57f6:	21 96       	adiw	r28, 0x01	; 1
    57f8:	c8 30       	cpi	r28, 0x08	; 8
    57fa:	d1 05       	cpc	r29, r1
    57fc:	49 f6       	brne	.-110    	; 0x5790 <twister+0x42>
}

void twister (int iterations, int Delay)
{
	int iter,twist;
	for (iter = 0;iter < iterations;iter++)
    57fe:	08 94       	sec
    5800:	a1 1c       	adc	r10, r1
    5802:	b1 1c       	adc	r11, r1
    5804:	a6 14       	cp	r10, r6
    5806:	b7 04       	cpc	r11, r7
    5808:	0c f4       	brge	.+2      	; 0x580c <twister+0xbe>
    580a:	b9 cf       	rjmp	.-142    	; 0x577e <twister+0x30>
			shift (AXIS_Y, 1);
			shift (AXIS_Z, -1);
			shift (AXIS_X, -1);
		}
	}
}
    580c:	df 91       	pop	r29
    580e:	cf 91       	pop	r28
    5810:	1f 91       	pop	r17
    5812:	0f 91       	pop	r16
    5814:	ff 90       	pop	r15
    5816:	ef 90       	pop	r14
    5818:	df 90       	pop	r13
    581a:	cf 90       	pop	r12
    581c:	bf 90       	pop	r11
    581e:	af 90       	pop	r10
    5820:	9f 90       	pop	r9
    5822:	8f 90       	pop	r8
    5824:	7f 90       	pop	r7
    5826:	6f 90       	pop	r6
    5828:	5f 90       	pop	r5
    582a:	4f 90       	pop	r4
    582c:	08 95       	ret

0000582e <distance3d>:

	return dist;
}

float distance3d (float x1, float y1, float z1, float x2, float y2, float z2)
{	
    582e:	2f 92       	push	r2
    5830:	3f 92       	push	r3
    5832:	4f 92       	push	r4
    5834:	5f 92       	push	r5
    5836:	6f 92       	push	r6
    5838:	7f 92       	push	r7
    583a:	8f 92       	push	r8
    583c:	9f 92       	push	r9
    583e:	af 92       	push	r10
    5840:	bf 92       	push	r11
    5842:	cf 92       	push	r12
    5844:	df 92       	push	r13
    5846:	ef 92       	push	r14
    5848:	ff 92       	push	r15
    584a:	0f 93       	push	r16
    584c:	1f 93       	push	r17
    584e:	df 93       	push	r29
    5850:	cf 93       	push	r28
    5852:	cd b7       	in	r28, 0x3d	; 61
    5854:	de b7       	in	r29, 0x3e	; 62
    5856:	39 01       	movw	r6, r18
    5858:	4a 01       	movw	r8, r20
    585a:	a6 01       	movw	r20, r12
    585c:	95 01       	movw	r18, r10
	float dist;
	dist = sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2));
    585e:	0e 94 cd 38 	call	0x719a	; 0x719a <__subsf3>
    5862:	5b 01       	movw	r10, r22
    5864:	6c 01       	movw	r12, r24
    5866:	c4 01       	movw	r24, r8
    5868:	b3 01       	movw	r22, r6
    586a:	2d 89       	ldd	r18, Y+21	; 0x15
    586c:	3e 89       	ldd	r19, Y+22	; 0x16
    586e:	4f 89       	ldd	r20, Y+23	; 0x17
    5870:	58 8d       	ldd	r21, Y+24	; 0x18
    5872:	0e 94 cd 38 	call	0x719a	; 0x719a <__subsf3>
    5876:	3b 01       	movw	r6, r22
    5878:	4c 01       	movw	r8, r24
    587a:	c8 01       	movw	r24, r16
    587c:	b7 01       	movw	r22, r14
    587e:	29 8d       	ldd	r18, Y+25	; 0x19
    5880:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5882:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5884:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5886:	0e 94 cd 38 	call	0x719a	; 0x719a <__subsf3>
    588a:	1b 01       	movw	r2, r22
    588c:	2c 01       	movw	r4, r24
    588e:	c6 01       	movw	r24, r12
    5890:	b5 01       	movw	r22, r10
    5892:	a6 01       	movw	r20, r12
    5894:	95 01       	movw	r18, r10
    5896:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    589a:	7b 01       	movw	r14, r22
    589c:	8c 01       	movw	r16, r24
    589e:	c4 01       	movw	r24, r8
    58a0:	b3 01       	movw	r22, r6
    58a2:	a4 01       	movw	r20, r8
    58a4:	93 01       	movw	r18, r6
    58a6:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    58aa:	9b 01       	movw	r18, r22
    58ac:	ac 01       	movw	r20, r24
    58ae:	c8 01       	movw	r24, r16
    58b0:	b7 01       	movw	r22, r14
    58b2:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    58b6:	7b 01       	movw	r14, r22
    58b8:	8c 01       	movw	r16, r24
    58ba:	c2 01       	movw	r24, r4
    58bc:	b1 01       	movw	r22, r2
    58be:	a2 01       	movw	r20, r4
    58c0:	91 01       	movw	r18, r2
    58c2:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    58c6:	9b 01       	movw	r18, r22
    58c8:	ac 01       	movw	r20, r24
    58ca:	c8 01       	movw	r24, r16
    58cc:	b7 01       	movw	r22, r14
    58ce:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    58d2:	0e 94 2e 3b 	call	0x765c	; 0x765c <sqrt>

	return dist;
}
    58d6:	cf 91       	pop	r28
    58d8:	df 91       	pop	r29
    58da:	1f 91       	pop	r17
    58dc:	0f 91       	pop	r16
    58de:	ff 90       	pop	r15
    58e0:	ef 90       	pop	r14
    58e2:	df 90       	pop	r13
    58e4:	cf 90       	pop	r12
    58e6:	bf 90       	pop	r11
    58e8:	af 90       	pop	r10
    58ea:	9f 90       	pop	r9
    58ec:	8f 90       	pop	r8
    58ee:	7f 90       	pop	r7
    58f0:	6f 90       	pop	r6
    58f2:	5f 90       	pop	r5
    58f4:	4f 90       	pop	r4
    58f6:	3f 90       	pop	r3
    58f8:	2f 90       	pop	r2
    58fa:	08 95       	ret

000058fc <spheremove>:
	}
}
*/
// ******************************************
void spheremove (int iterations, int delay)
{
    58fc:	2f 92       	push	r2
    58fe:	3f 92       	push	r3
    5900:	4f 92       	push	r4
    5902:	5f 92       	push	r5
    5904:	6f 92       	push	r6
    5906:	7f 92       	push	r7
    5908:	8f 92       	push	r8
    590a:	9f 92       	push	r9
    590c:	af 92       	push	r10
    590e:	bf 92       	push	r11
    5910:	cf 92       	push	r12
    5912:	df 92       	push	r13
    5914:	ef 92       	push	r14
    5916:	ff 92       	push	r15
    5918:	0f 93       	push	r16
    591a:	1f 93       	push	r17
    591c:	df 93       	push	r29
    591e:	cf 93       	push	r28
    5920:	cd b7       	in	r28, 0x3d	; 61
    5922:	de b7       	in	r29, 0x3e	; 62
    5924:	a0 97       	sbiw	r28, 0x20	; 32
    5926:	0f b6       	in	r0, 0x3f	; 63
    5928:	f8 94       	cli
    592a:	de bf       	out	0x3e, r29	; 62
    592c:	0f be       	out	0x3f, r0	; 63
    592e:	cd bf       	out	0x3d, r28	; 61
    5930:	9a 87       	std	Y+10, r25	; 0x0a
    5932:	89 87       	std	Y+9, r24	; 0x09
	
	fill(0x00);
    5934:	80 e0       	ldi	r24, 0x00	; 0
    5936:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    593a:	1a 82       	std	Y+2, r1	; 0x02
    593c:	19 82       	std	Y+1, r1	; 0x01
    593e:	16 c1       	rjmp	.+556    	; 0x5b6c <spheremove+0x270>

	int x, y, z, i;

	for (i=0; i<iterations; i++)
	{
		origin_x = 3.5+sin((float)i/50)*2.5;
    5940:	29 81       	ldd	r18, Y+1	; 0x01
    5942:	3a 81       	ldd	r19, Y+2	; 0x02
    5944:	b9 01       	movw	r22, r18
    5946:	88 27       	eor	r24, r24
    5948:	77 fd       	sbrc	r23, 7
    594a:	80 95       	com	r24
    594c:	98 2f       	mov	r25, r24
    594e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5952:	5b 01       	movw	r10, r22
    5954:	6c 01       	movw	r12, r24
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	30 e0       	ldi	r19, 0x00	; 0
    595a:	48 e4       	ldi	r20, 0x48	; 72
    595c:	52 e4       	ldi	r21, 0x42	; 66
    595e:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5962:	7b 01       	movw	r14, r22
    5964:	8c 01       	movw	r16, r24
    5966:	c8 01       	movw	r24, r16
    5968:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	40 e2       	ldi	r20, 0x20	; 32
    5972:	50 e4       	ldi	r21, 0x40	; 64
    5974:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    5978:	20 e0       	ldi	r18, 0x00	; 0
    597a:	30 e0       	ldi	r19, 0x00	; 0
    597c:	40 e6       	ldi	r20, 0x60	; 96
    597e:	50 e4       	ldi	r21, 0x40	; 64
    5980:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5984:	6b 8b       	std	Y+19, r22	; 0x13
    5986:	7c 8b       	std	Y+20, r23	; 0x14
    5988:	8d 8b       	std	Y+21, r24	; 0x15
    598a:	9e 8b       	std	Y+22, r25	; 0x16
		origin_y = 3.5+cos((float)i/50)*2.5;
    598c:	b7 01       	movw	r22, r14
    598e:	c8 01       	movw	r24, r16
    5990:	0e 94 36 39 	call	0x726c	; 0x726c <cos>
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	40 e2       	ldi	r20, 0x20	; 32
    599a:	50 e4       	ldi	r21, 0x40	; 64
    599c:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    59a0:	20 e0       	ldi	r18, 0x00	; 0
    59a2:	30 e0       	ldi	r19, 0x00	; 0
    59a4:	40 e6       	ldi	r20, 0x60	; 96
    59a6:	50 e4       	ldi	r21, 0x40	; 64
    59a8:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    59ac:	6f 87       	std	Y+15, r22	; 0x0f
    59ae:	78 8b       	std	Y+16, r23	; 0x10
    59b0:	89 8b       	std	Y+17, r24	; 0x11
    59b2:	9a 8b       	std	Y+18, r25	; 0x12
		origin_z = 3.5+cos((float)i/30)*2;
    59b4:	c6 01       	movw	r24, r12
    59b6:	b5 01       	movw	r22, r10
    59b8:	20 e0       	ldi	r18, 0x00	; 0
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    59bc:	40 ef       	ldi	r20, 0xF0	; 240
    59be:	51 e4       	ldi	r21, 0x41	; 65
    59c0:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    59c4:	0e 94 36 39 	call	0x726c	; 0x726c <cos>
    59c8:	9b 01       	movw	r18, r22
    59ca:	ac 01       	movw	r20, r24
    59cc:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    59d0:	20 e0       	ldi	r18, 0x00	; 0
    59d2:	30 e0       	ldi	r19, 0x00	; 0
    59d4:	40 e6       	ldi	r20, 0x60	; 96
    59d6:	50 e4       	ldi	r21, 0x40	; 64
    59d8:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    59dc:	6b 87       	std	Y+11, r22	; 0x0b
    59de:	7c 87       	std	Y+12, r23	; 0x0c
    59e0:	8d 87       	std	Y+13, r24	; 0x0d
    59e2:	9e 87       	std	Y+14, r25	; 0x0e

		diameter = 2+sin((float)i/150);
    59e4:	c6 01       	movw	r24, r12
    59e6:	b5 01       	movw	r22, r10
    59e8:	20 e0       	ldi	r18, 0x00	; 0
    59ea:	30 e0       	ldi	r19, 0x00	; 0
    59ec:	46 e1       	ldi	r20, 0x16	; 22
    59ee:	53 e4       	ldi	r21, 0x43	; 67
    59f0:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    59f4:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    59f8:	20 e0       	ldi	r18, 0x00	; 0
    59fa:	30 e0       	ldi	r19, 0x00	; 0
    59fc:	40 e0       	ldi	r20, 0x00	; 0
    59fe:	50 e4       	ldi	r21, 0x40	; 64
    5a00:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5a04:	6d 83       	std	Y+5, r22	; 0x05
    5a06:	7e 83       	std	Y+6, r23	; 0x06
    5a08:	8f 83       	std	Y+7, r24	; 0x07
    5a0a:	98 87       	std	Y+8, r25	; 0x08

		fill (0X00);
    5a0c:	80 e0       	ldi	r24, 0x00	; 0
    5a0e:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    5a12:	1c 82       	std	Y+4, r1	; 0x04
    5a14:	1b 82       	std	Y+3, r1	; 0x03
    5a16:	98 c0       	rjmp	.+304    	; 0x5b48 <spheremove+0x24c>
		{
			for (y=0; y<8; y++)
			{
				for (z=0; z<8; z++)
				{
					distance = distance3d(x,y,z, origin_x, origin_y, origin_z);
    5a18:	8d b7       	in	r24, 0x3d	; 61
    5a1a:	9e b7       	in	r25, 0x3e	; 62
    5a1c:	08 97       	sbiw	r24, 0x08	; 8
    5a1e:	0f b6       	in	r0, 0x3f	; 63
    5a20:	f8 94       	cli
    5a22:	9e bf       	out	0x3e, r25	; 62
    5a24:	0f be       	out	0x3f, r0	; 63
    5a26:	8d bf       	out	0x3d, r24	; 61
    5a28:	4d b6       	in	r4, 0x3d	; 61
    5a2a:	5e b6       	in	r5, 0x3e	; 62
    5a2c:	08 94       	sec
    5a2e:	41 1c       	adc	r4, r1
    5a30:	51 1c       	adc	r5, r1
    5a32:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5a34:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5a36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a3a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5a3e:	3b 01       	movw	r6, r22
    5a40:	4c 01       	movw	r8, r24
    5a42:	6f 89       	ldd	r22, Y+23	; 0x17
    5a44:	78 8d       	ldd	r23, Y+24	; 0x18
    5a46:	89 8d       	ldd	r24, Y+25	; 0x19
    5a48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5a4a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5a4e:	5b 01       	movw	r10, r22
    5a50:	6c 01       	movw	r12, r24
    5a52:	af 8d       	ldd	r26, Y+31	; 0x1f
    5a54:	b8 a1       	ldd	r27, Y+32	; 0x20
    5a56:	bd 01       	movw	r22, r26
    5a58:	88 27       	eor	r24, r24
    5a5a:	77 fd       	sbrc	r23, 7
    5a5c:	80 95       	com	r24
    5a5e:	98 2f       	mov	r25, r24
    5a60:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5a64:	7b 01       	movw	r14, r22
    5a66:	8c 01       	movw	r16, r24
    5a68:	2f 85       	ldd	r18, Y+15	; 0x0f
    5a6a:	38 89       	ldd	r19, Y+16	; 0x10
    5a6c:	49 89       	ldd	r20, Y+17	; 0x11
    5a6e:	5a 89       	ldd	r21, Y+18	; 0x12
    5a70:	c9 01       	movw	r24, r18
    5a72:	da 01       	movw	r26, r20
    5a74:	f2 01       	movw	r30, r4
    5a76:	80 83       	st	Z, r24
    5a78:	91 83       	std	Z+1, r25	; 0x01
    5a7a:	a2 83       	std	Z+2, r26	; 0x02
    5a7c:	b3 83       	std	Z+3, r27	; 0x03
    5a7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a80:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a82:	4d 85       	ldd	r20, Y+13	; 0x0d
    5a84:	5e 85       	ldd	r21, Y+14	; 0x0e
    5a86:	c9 01       	movw	r24, r18
    5a88:	da 01       	movw	r26, r20
    5a8a:	84 83       	std	Z+4, r24	; 0x04
    5a8c:	95 83       	std	Z+5, r25	; 0x05
    5a8e:	a6 83       	std	Z+6, r26	; 0x06
    5a90:	b7 83       	std	Z+7, r27	; 0x07
    5a92:	c4 01       	movw	r24, r8
    5a94:	b3 01       	movw	r22, r6
    5a96:	a6 01       	movw	r20, r12
    5a98:	95 01       	movw	r18, r10
    5a9a:	eb 89       	ldd	r30, Y+19	; 0x13
    5a9c:	fc 89       	ldd	r31, Y+20	; 0x14
    5a9e:	6d 88       	ldd	r6, Y+21	; 0x15
    5aa0:	4e 88       	ldd	r4, Y+22	; 0x16
    5aa2:	5f 01       	movw	r10, r30
    5aa4:	c6 2c       	mov	r12, r6
    5aa6:	d4 2c       	mov	r13, r4
    5aa8:	0e 94 17 2c 	call	0x582e	; 0x582e <distance3d>
    5aac:	7b 01       	movw	r14, r22
    5aae:	8c 01       	movw	r16, r24
					//printf("Distance: %f \n", distance);

					if (distance>diameter && distance<diameter+1)
    5ab0:	2d b7       	in	r18, 0x3d	; 61
    5ab2:	3e b7       	in	r19, 0x3e	; 62
    5ab4:	28 5f       	subi	r18, 0xF8	; 248
    5ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab8:	0f b6       	in	r0, 0x3f	; 63
    5aba:	f8 94       	cli
    5abc:	3e bf       	out	0x3e, r19	; 62
    5abe:	0f be       	out	0x3f, r0	; 63
    5ac0:	2d bf       	out	0x3d, r18	; 61
    5ac2:	2d 81       	ldd	r18, Y+5	; 0x05
    5ac4:	3e 81       	ldd	r19, Y+6	; 0x06
    5ac6:	4f 81       	ldd	r20, Y+7	; 0x07
    5ac8:	58 85       	ldd	r21, Y+8	; 0x08
    5aca:	0e 94 bd 3a 	call	0x757a	; 0x757a <__gesf2>
    5ace:	18 16       	cp	r1, r24
    5ad0:	cc f4       	brge	.+50     	; 0x5b04 <spheremove+0x208>
    5ad2:	6d 81       	ldd	r22, Y+5	; 0x05
    5ad4:	7e 81       	ldd	r23, Y+6	; 0x06
    5ad6:	8f 81       	ldd	r24, Y+7	; 0x07
    5ad8:	98 85       	ldd	r25, Y+8	; 0x08
    5ada:	20 e0       	ldi	r18, 0x00	; 0
    5adc:	30 e0       	ldi	r19, 0x00	; 0
    5ade:	40 e8       	ldi	r20, 0x80	; 128
    5ae0:	5f e3       	ldi	r21, 0x3F	; 63
    5ae2:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5ae6:	9b 01       	movw	r18, r22
    5ae8:	ac 01       	movw	r20, r24
    5aea:	c8 01       	movw	r24, r16
    5aec:	b7 01       	movw	r22, r14
    5aee:	0e 94 32 39 	call	0x7264	; 0x7264 <__cmpsf2>
    5af2:	88 23       	and	r24, r24
    5af4:	3c f4       	brge	.+14     	; 0x5b04 <spheremove+0x208>
					{
						setvoxel(x,y,z);
    5af6:	8b 81       	ldd	r24, Y+3	; 0x03
    5af8:	9c 81       	ldd	r25, Y+4	; 0x04
    5afa:	b1 01       	movw	r22, r2
    5afc:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5afe:	58 a1       	ldd	r21, Y+32	; 0x20
    5b00:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
		fill (0X00);
		for (x=0; x<8; x++)
		{
			for (y=0; y<8; y++)
			{
				for (z=0; z<8; z++)
    5b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b06:	98 a1       	ldd	r25, Y+32	; 0x20
    5b08:	01 96       	adiw	r24, 0x01	; 1
    5b0a:	98 a3       	std	Y+32, r25	; 0x20
    5b0c:	8f 8f       	std	Y+31, r24	; 0x1f
    5b0e:	08 97       	sbiw	r24, 0x08	; 8
    5b10:	09 f0       	breq	.+2      	; 0x5b14 <spheremove+0x218>
    5b12:	82 cf       	rjmp	.-252    	; 0x5a18 <spheremove+0x11c>
		diameter = 2+sin((float)i/150);

		fill (0X00);
		for (x=0; x<8; x++)
		{
			for (y=0; y<8; y++)
    5b14:	08 94       	sec
    5b16:	21 1c       	adc	r2, r1
    5b18:	31 1c       	adc	r3, r1
    5b1a:	98 e0       	ldi	r25, 0x08	; 8
    5b1c:	29 16       	cp	r2, r25
    5b1e:	31 04       	cpc	r3, r1
    5b20:	61 f0       	breq	.+24     	; 0x5b3a <spheremove+0x23e>
    5b22:	18 a2       	std	Y+32, r1	; 0x20
    5b24:	1f 8e       	std	Y+31, r1	; 0x1f
			{
				for (z=0; z<8; z++)
				{
					distance = distance3d(x,y,z, origin_x, origin_y, origin_z);
    5b26:	c1 01       	movw	r24, r2
    5b28:	aa 27       	eor	r26, r26
    5b2a:	97 fd       	sbrc	r25, 7
    5b2c:	a0 95       	com	r26
    5b2e:	ba 2f       	mov	r27, r26
    5b30:	8f 8b       	std	Y+23, r24	; 0x17
    5b32:	98 8f       	std	Y+24, r25	; 0x18
    5b34:	a9 8f       	std	Y+25, r26	; 0x19
    5b36:	ba 8f       	std	Y+26, r27	; 0x1a
    5b38:	6f cf       	rjmp	.-290    	; 0x5a18 <spheremove+0x11c>
		origin_z = 3.5+cos((float)i/30)*2;

		diameter = 2+sin((float)i/150);

		fill (0X00);
		for (x=0; x<8; x++)
    5b3a:	ab 81       	ldd	r26, Y+3	; 0x03
    5b3c:	bc 81       	ldd	r27, Y+4	; 0x04
    5b3e:	11 96       	adiw	r26, 0x01	; 1
    5b40:	bc 83       	std	Y+4, r27	; 0x04
    5b42:	ab 83       	std	Y+3, r26	; 0x03
    5b44:	18 97       	sbiw	r26, 0x08	; 8
    5b46:	69 f0       	breq	.+26     	; 0x5b62 <spheremove+0x266>
    5b48:	22 24       	eor	r2, r2
    5b4a:	33 24       	eor	r3, r3
		{
			for (y=0; y<8; y++)
			{
				for (z=0; z<8; z++)
				{
					distance = distance3d(x,y,z, origin_x, origin_y, origin_z);
    5b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    5b50:	aa 27       	eor	r26, r26
    5b52:	97 fd       	sbrc	r25, 7
    5b54:	a0 95       	com	r26
    5b56:	ba 2f       	mov	r27, r26
    5b58:	8b 8f       	std	Y+27, r24	; 0x1b
    5b5a:	9c 8f       	std	Y+28, r25	; 0x1c
    5b5c:	ad 8f       	std	Y+29, r26	; 0x1d
    5b5e:	be 8f       	std	Y+30, r27	; 0x1e
    5b60:	e0 cf       	rjmp	.-64     	; 0x5b22 <spheremove+0x226>

	diameter = 3;

	int x, y, z, i;

	for (i=0; i<iterations; i++)
    5b62:	a9 81       	ldd	r26, Y+1	; 0x01
    5b64:	ba 81       	ldd	r27, Y+2	; 0x02
    5b66:	11 96       	adiw	r26, 0x01	; 1
    5b68:	ba 83       	std	Y+2, r27	; 0x02
    5b6a:	a9 83       	std	Y+1, r26	; 0x01
    5b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    5b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    5b70:	29 85       	ldd	r18, Y+9	; 0x09
    5b72:	3a 85       	ldd	r19, Y+10	; 0x0a
    5b74:	e2 17       	cp	r30, r18
    5b76:	f3 07       	cpc	r31, r19
    5b78:	0c f4       	brge	.+2      	; 0x5b7c <spheremove+0x280>
    5b7a:	e2 ce       	rjmp	.-572    	; 0x5940 <spheremove+0x44>

		// delay_ms(delay);
		// fill(0x00);
	}

}
    5b7c:	a0 96       	adiw	r28, 0x20	; 32
    5b7e:	0f b6       	in	r0, 0x3f	; 63
    5b80:	f8 94       	cli
    5b82:	de bf       	out	0x3e, r29	; 62
    5b84:	0f be       	out	0x3f, r0	; 63
    5b86:	cd bf       	out	0x3d, r28	; 61
    5b88:	cf 91       	pop	r28
    5b8a:	df 91       	pop	r29
    5b8c:	1f 91       	pop	r17
    5b8e:	0f 91       	pop	r16
    5b90:	ff 90       	pop	r15
    5b92:	ef 90       	pop	r14
    5b94:	df 90       	pop	r13
    5b96:	cf 90       	pop	r12
    5b98:	bf 90       	pop	r11
    5b9a:	af 90       	pop	r10
    5b9c:	9f 90       	pop	r9
    5b9e:	8f 90       	pop	r8
    5ba0:	7f 90       	pop	r7
    5ba2:	6f 90       	pop	r6
    5ba4:	5f 90       	pop	r5
    5ba6:	4f 90       	pop	r4
    5ba8:	3f 90       	pop	r3
    5baa:	2f 90       	pop	r2
    5bac:	08 95       	ret

00005bae <distance2d>:
}


*/
float distance2d (float x1, float y1, float x2, float y2)
{	
    5bae:	6f 92       	push	r6
    5bb0:	7f 92       	push	r7
    5bb2:	8f 92       	push	r8
    5bb4:	9f 92       	push	r9
    5bb6:	af 92       	push	r10
    5bb8:	bf 92       	push	r11
    5bba:	cf 92       	push	r12
    5bbc:	df 92       	push	r13
    5bbe:	ef 92       	push	r14
    5bc0:	ff 92       	push	r15
    5bc2:	0f 93       	push	r16
    5bc4:	1f 93       	push	r17
    5bc6:	39 01       	movw	r6, r18
    5bc8:	4a 01       	movw	r8, r20
    5bca:	a8 01       	movw	r20, r16
    5bcc:	97 01       	movw	r18, r14
	float dist;
	dist = sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
    5bce:	0e 94 cd 38 	call	0x719a	; 0x719a <__subsf3>
    5bd2:	7b 01       	movw	r14, r22
    5bd4:	8c 01       	movw	r16, r24
    5bd6:	c4 01       	movw	r24, r8
    5bd8:	b3 01       	movw	r22, r6
    5bda:	a6 01       	movw	r20, r12
    5bdc:	95 01       	movw	r18, r10
    5bde:	0e 94 cd 38 	call	0x719a	; 0x719a <__subsf3>
    5be2:	5b 01       	movw	r10, r22
    5be4:	6c 01       	movw	r12, r24
    5be6:	c8 01       	movw	r24, r16
    5be8:	b7 01       	movw	r22, r14
    5bea:	a8 01       	movw	r20, r16
    5bec:	97 01       	movw	r18, r14
    5bee:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    5bf2:	7b 01       	movw	r14, r22
    5bf4:	8c 01       	movw	r16, r24
    5bf6:	c6 01       	movw	r24, r12
    5bf8:	b5 01       	movw	r22, r10
    5bfa:	a6 01       	movw	r20, r12
    5bfc:	95 01       	movw	r18, r10
    5bfe:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    5c02:	9b 01       	movw	r18, r22
    5c04:	ac 01       	movw	r20, r24
    5c06:	c8 01       	movw	r24, r16
    5c08:	b7 01       	movw	r22, r14
    5c0a:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5c0e:	0e 94 2e 3b 	call	0x765c	; 0x765c <sqrt>

	return dist;
}
    5c12:	1f 91       	pop	r17
    5c14:	0f 91       	pop	r16
    5c16:	ff 90       	pop	r15
    5c18:	ef 90       	pop	r14
    5c1a:	df 90       	pop	r13
    5c1c:	cf 90       	pop	r12
    5c1e:	bf 90       	pop	r11
    5c20:	af 90       	pop	r10
    5c22:	9f 90       	pop	r9
    5c24:	8f 90       	pop	r8
    5c26:	7f 90       	pop	r7
    5c28:	6f 90       	pop	r6
    5c2a:	08 95       	ret

00005c2c <ripples>:
	}
}

// Display a sine wave running out from the center of the cube.
void ripples (int iterations, int delay)
{
    5c2c:	2f 92       	push	r2
    5c2e:	3f 92       	push	r3
    5c30:	4f 92       	push	r4
    5c32:	5f 92       	push	r5
    5c34:	6f 92       	push	r6
    5c36:	7f 92       	push	r7
    5c38:	8f 92       	push	r8
    5c3a:	9f 92       	push	r9
    5c3c:	af 92       	push	r10
    5c3e:	bf 92       	push	r11
    5c40:	cf 92       	push	r12
    5c42:	df 92       	push	r13
    5c44:	ef 92       	push	r14
    5c46:	ff 92       	push	r15
    5c48:	0f 93       	push	r16
    5c4a:	1f 93       	push	r17
    5c4c:	df 93       	push	r29
    5c4e:	cf 93       	push	r28
    5c50:	cd b7       	in	r28, 0x3d	; 61
    5c52:	de b7       	in	r29, 0x3e	; 62
    5c54:	28 97       	sbiw	r28, 0x08	; 8
    5c56:	0f b6       	in	r0, 0x3f	; 63
    5c58:	f8 94       	cli
    5c5a:	de bf       	out	0x3e, r29	; 62
    5c5c:	0f be       	out	0x3f, r0	; 63
    5c5e:	cd bf       	out	0x3d, r28	; 61
    5c60:	9a 83       	std	Y+2, r25	; 0x02
    5c62:	89 83       	std	Y+1, r24	; 0x01
    5c64:	66 24       	eor	r6, r6
    5c66:	77 24       	eor	r7, r7
    5c68:	87 c0       	rjmp	.+270    	; 0x5d78 <ripples+0x14c>

	//fill(0x00);

	for (i=0;i<iterations;i++)
	{
if (xit == 1) {break;}		
    5c6a:	80 91 b3 01 	lds	r24, 0x01B3
    5c6e:	90 91 b4 01 	lds	r25, 0x01B4
    5c72:	01 97       	sbiw	r24, 0x01	; 1
    5c74:	09 f4       	brne	.+2      	; 0x5c78 <ripples+0x4c>
    5c76:	86 c0       	rjmp	.+268    	; 0x5d84 <ripples+0x158>
fill (0X00);
    5c78:	80 e0       	ldi	r24, 0x00	; 0
    5c7a:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    5c7e:	88 24       	eor	r8, r8
    5c80:	99 24       	eor	r9, r9
			for (y=0;y<8;y++)
			{
				distance = distance2d(3.5,3.5,x,y)/9.899495*8;
				//distance = distance2d(3.5,3.5,x,y);
				ripple_interval =1.3;
				height = 4+sin(distance/ripple_interval+(float) i/50)*4;
    5c82:	c3 01       	movw	r24, r6
    5c84:	aa 27       	eor	r26, r26
    5c86:	97 fd       	sbrc	r25, 7
    5c88:	a0 95       	com	r26
    5c8a:	ba 2f       	mov	r27, r26
    5c8c:	8b 83       	std	Y+3, r24	; 0x03
    5c8e:	9c 83       	std	Y+4, r25	; 0x04
    5c90:	ad 83       	std	Y+5, r26	; 0x05
    5c92:	be 83       	std	Y+6, r27	; 0x06
    5c94:	66 c0       	rjmp	.+204    	; 0x5d62 <ripples+0x136>
fill (0X00);
		for (x=0;x<8;x++)
		{
			for (y=0;y<8;y++)
			{
				distance = distance2d(3.5,3.5,x,y)/9.899495*8;
    5c96:	c2 01       	movw	r24, r4
    5c98:	b1 01       	movw	r22, r2
    5c9a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5c9e:	7b 01       	movw	r14, r22
    5ca0:	8c 01       	movw	r16, r24
    5ca2:	af 81       	ldd	r26, Y+7	; 0x07
    5ca4:	b8 85       	ldd	r27, Y+8	; 0x08
    5ca6:	bd 01       	movw	r22, r26
    5ca8:	88 27       	eor	r24, r24
    5caa:	77 fd       	sbrc	r23, 7
    5cac:	80 95       	com	r24
    5cae:	98 2f       	mov	r25, r24
    5cb0:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5cb4:	5b 01       	movw	r10, r22
    5cb6:	6c 01       	movw	r12, r24
    5cb8:	60 e0       	ldi	r22, 0x00	; 0
    5cba:	70 e0       	ldi	r23, 0x00	; 0
    5cbc:	80 e6       	ldi	r24, 0x60	; 96
    5cbe:	90 e4       	ldi	r25, 0x40	; 64
    5cc0:	9b 01       	movw	r18, r22
    5cc2:	ac 01       	movw	r20, r24
    5cc4:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <distance2d>
				//distance = distance2d(3.5,3.5,x,y);
				ripple_interval =1.3;
				height = 4+sin(distance/ripple_interval+(float) i/50)*4;
    5cc8:	25 e5       	ldi	r18, 0x55	; 85
    5cca:	34 e6       	ldi	r19, 0x64	; 100
    5ccc:	4e e1       	ldi	r20, 0x1E	; 30
    5cce:	51 e4       	ldi	r21, 0x41	; 65
    5cd0:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5cd4:	20 e0       	ldi	r18, 0x00	; 0
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	40 e0       	ldi	r20, 0x00	; 0
    5cda:	51 e4       	ldi	r21, 0x41	; 65
    5cdc:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    5ce0:	26 e6       	ldi	r18, 0x66	; 102
    5ce2:	36 e6       	ldi	r19, 0x66	; 102
    5ce4:	46 ea       	ldi	r20, 0xA6	; 166
    5ce6:	5f e3       	ldi	r21, 0x3F	; 63
    5ce8:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5cec:	7b 01       	movw	r14, r22
    5cee:	8c 01       	movw	r16, r24
    5cf0:	6b 81       	ldd	r22, Y+3	; 0x03
    5cf2:	7c 81       	ldd	r23, Y+4	; 0x04
    5cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    5cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    5cf8:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5cfc:	20 e0       	ldi	r18, 0x00	; 0
    5cfe:	30 e0       	ldi	r19, 0x00	; 0
    5d00:	48 e4       	ldi	r20, 0x48	; 72
    5d02:	52 e4       	ldi	r21, 0x42	; 66
    5d04:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5d08:	9b 01       	movw	r18, r22
    5d0a:	ac 01       	movw	r20, r24
    5d0c:	c8 01       	movw	r24, r16
    5d0e:	b7 01       	movw	r22, r14
    5d10:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5d14:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>

				setvoxel(x,y,(int) height);	
    5d18:	20 e0       	ldi	r18, 0x00	; 0
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	40 e8       	ldi	r20, 0x80	; 128
    5d1e:	50 e4       	ldi	r21, 0x40	; 64
    5d20:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    5d24:	20 e0       	ldi	r18, 0x00	; 0
    5d26:	30 e0       	ldi	r19, 0x00	; 0
    5d28:	40 e8       	ldi	r20, 0x80	; 128
    5d2a:	50 e4       	ldi	r21, 0x40	; 64
    5d2c:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5d30:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    5d34:	9b 01       	movw	r18, r22
    5d36:	ac 01       	movw	r20, r24
    5d38:	c4 01       	movw	r24, r8
    5d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    5d3c:	78 85       	ldd	r23, Y+8	; 0x08
    5d3e:	a9 01       	movw	r20, r18
    5d40:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	{
if (xit == 1) {break;}		
fill (0X00);
		for (x=0;x<8;x++)
		{
			for (y=0;y<8;y++)
    5d44:	ef 81       	ldd	r30, Y+7	; 0x07
    5d46:	f8 85       	ldd	r31, Y+8	; 0x08
    5d48:	31 96       	adiw	r30, 0x01	; 1
    5d4a:	f8 87       	std	Y+8, r31	; 0x08
    5d4c:	ef 83       	std	Y+7, r30	; 0x07
    5d4e:	38 97       	sbiw	r30, 0x08	; 8
    5d50:	09 f0       	breq	.+2      	; 0x5d54 <ripples+0x128>
    5d52:	a1 cf       	rjmp	.-190    	; 0x5c96 <ripples+0x6a>

	for (i=0;i<iterations;i++)
	{
if (xit == 1) {break;}		
fill (0X00);
		for (x=0;x<8;x++)
    5d54:	08 94       	sec
    5d56:	81 1c       	adc	r8, r1
    5d58:	91 1c       	adc	r9, r1
    5d5a:	f8 e0       	ldi	r31, 0x08	; 8
    5d5c:	8f 16       	cp	r8, r31
    5d5e:	91 04       	cpc	r9, r1
    5d60:	41 f0       	breq	.+16     	; 0x5d72 <ripples+0x146>
    5d62:	18 86       	std	Y+8, r1	; 0x08
    5d64:	1f 82       	std	Y+7, r1	; 0x07
		{
			for (y=0;y<8;y++)
			{
				distance = distance2d(3.5,3.5,x,y)/9.899495*8;
    5d66:	14 01       	movw	r2, r8
    5d68:	44 24       	eor	r4, r4
    5d6a:	37 fc       	sbrc	r3, 7
    5d6c:	40 94       	com	r4
    5d6e:	54 2c       	mov	r5, r4
    5d70:	92 cf       	rjmp	.-220    	; 0x5c96 <ripples+0x6a>
	float origin_x, origin_y, distance, height, ripple_interval;
	int x,y,i;

	//fill(0x00);

	for (i=0;i<iterations;i++)
    5d72:	08 94       	sec
    5d74:	61 1c       	adc	r6, r1
    5d76:	71 1c       	adc	r7, r1
    5d78:	29 81       	ldd	r18, Y+1	; 0x01
    5d7a:	3a 81       	ldd	r19, Y+2	; 0x02
    5d7c:	62 16       	cp	r6, r18
    5d7e:	73 06       	cpc	r7, r19
    5d80:	0c f4       	brge	.+2      	; 0x5d84 <ripples+0x158>
    5d82:	73 cf       	rjmp	.-282    	; 0x5c6a <ripples+0x3e>
			}
		}
		// delay_ms(delay);
		// fill(0x00);
	}
}
    5d84:	28 96       	adiw	r28, 0x08	; 8
    5d86:	0f b6       	in	r0, 0x3f	; 63
    5d88:	f8 94       	cli
    5d8a:	de bf       	out	0x3e, r29	; 62
    5d8c:	0f be       	out	0x3f, r0	; 63
    5d8e:	cd bf       	out	0x3d, r28	; 61
    5d90:	cf 91       	pop	r28
    5d92:	df 91       	pop	r29
    5d94:	1f 91       	pop	r17
    5d96:	0f 91       	pop	r16
    5d98:	ff 90       	pop	r15
    5d9a:	ef 90       	pop	r14
    5d9c:	df 90       	pop	r13
    5d9e:	cf 90       	pop	r12
    5da0:	bf 90       	pop	r11
    5da2:	af 90       	pop	r10
    5da4:	9f 90       	pop	r9
    5da6:	8f 90       	pop	r8
    5da8:	7f 90       	pop	r7
    5daa:	6f 90       	pop	r6
    5dac:	5f 90       	pop	r5
    5dae:	4f 90       	pop	r4
    5db0:	3f 90       	pop	r3
    5db2:	2f 90       	pop	r2
    5db4:	08 95       	ret

00005db6 <sinelines>:
	}

}

void sinelines (int iterations, int delay)
{
    5db6:	2f 92       	push	r2
    5db8:	3f 92       	push	r3
    5dba:	4f 92       	push	r4
    5dbc:	5f 92       	push	r5
    5dbe:	6f 92       	push	r6
    5dc0:	7f 92       	push	r7
    5dc2:	8f 92       	push	r8
    5dc4:	9f 92       	push	r9
    5dc6:	af 92       	push	r10
    5dc8:	bf 92       	push	r11
    5dca:	cf 92       	push	r12
    5dcc:	df 92       	push	r13
    5dce:	ef 92       	push	r14
    5dd0:	ff 92       	push	r15
    5dd2:	0f 93       	push	r16
    5dd4:	1f 93       	push	r17
    5dd6:	df 93       	push	r29
    5dd8:	cf 93       	push	r28
    5dda:	cd b7       	in	r28, 0x3d	; 61
    5ddc:	de b7       	in	r29, 0x3e	; 62
    5dde:	2c 97       	sbiw	r28, 0x0c	; 12
    5de0:	0f b6       	in	r0, 0x3f	; 63
    5de2:	f8 94       	cli
    5de4:	de bf       	out	0x3e, r29	; 62
    5de6:	0f be       	out	0x3f, r0	; 63
    5de8:	cd bf       	out	0x3d, r28	; 61
    5dea:	9a 87       	std	Y+10, r25	; 0x0a
    5dec:	89 87       	std	Y+9, r24	; 0x09
    5dee:	66 24       	eor	r6, r6
    5df0:	77 24       	eor	r7, r7
    5df2:	a2 c0       	rjmp	.+324    	; 0x5f38 <sinelines+0x182>
	float left, right, sine_base, x_dividor,ripple_height;

	for (i=0; i<iterations; i++)
// effect_stringfly2 (xit);
{
if (xit == 1) {break;}
    5df4:	80 91 b3 01 	lds	r24, 0x01B3
    5df8:	90 91 b4 01 	lds	r25, 0x01B4
    5dfc:	01 97       	sbiw	r24, 0x01	; 1
    5dfe:	09 f4       	brne	.+2      	; 0x5e02 <sinelines+0x4c>
    5e00:	a1 c0       	rjmp	.+322    	; 0x5f44 <sinelines+0x18e>
	for (x=0; x<8 ;x++)
		{
			x_dividor = 2 + sin((float)i/100)+1;
    5e02:	b3 01       	movw	r22, r6
    5e04:	88 27       	eor	r24, r24
    5e06:	77 fd       	sbrc	r23, 7
    5e08:	80 95       	com	r24
    5e0a:	98 2f       	mov	r25, r24
    5e0c:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5e10:	7b 01       	movw	r14, r22
    5e12:	8c 01       	movw	r16, r24
    5e14:	20 e0       	ldi	r18, 0x00	; 0
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	48 ec       	ldi	r20, 0xC8	; 200
    5e1a:	52 e4       	ldi	r21, 0x42	; 66
    5e1c:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5e20:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    5e24:	20 e0       	ldi	r18, 0x00	; 0
    5e26:	30 e0       	ldi	r19, 0x00	; 0
    5e28:	40 e0       	ldi	r20, 0x00	; 0
    5e2a:	50 e4       	ldi	r21, 0x40	; 64
    5e2c:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	30 e0       	ldi	r19, 0x00	; 0
    5e34:	40 e8       	ldi	r20, 0x80	; 128
    5e36:	5f e3       	ldi	r21, 0x3F	; 63
    5e38:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5e3c:	6d 83       	std	Y+5, r22	; 0x05
    5e3e:	7e 83       	std	Y+6, r23	; 0x06
    5e40:	8f 83       	std	Y+7, r24	; 0x07
    5e42:	98 87       	std	Y+8, r25	; 0x08
			ripple_height = 3 + (sin((float)i/200)+1)*6;
    5e44:	c8 01       	movw	r24, r16
    5e46:	b7 01       	movw	r22, r14
    5e48:	20 e0       	ldi	r18, 0x00	; 0
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	48 e4       	ldi	r20, 0x48	; 72
    5e4e:	53 e4       	ldi	r21, 0x43	; 67
    5e50:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5e54:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    5e58:	20 e0       	ldi	r18, 0x00	; 0
    5e5a:	30 e0       	ldi	r19, 0x00	; 0
    5e5c:	40 e8       	ldi	r20, 0x80	; 128
    5e5e:	5f e3       	ldi	r21, 0x3F	; 63
    5e60:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5e64:	20 e0       	ldi	r18, 0x00	; 0
    5e66:	30 e0       	ldi	r19, 0x00	; 0
    5e68:	40 ec       	ldi	r20, 0xC0	; 192
    5e6a:	50 e4       	ldi	r21, 0x40	; 64
    5e6c:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    5e70:	20 e0       	ldi	r18, 0x00	; 0
    5e72:	30 e0       	ldi	r19, 0x00	; 0
    5e74:	40 e4       	ldi	r20, 0x40	; 64
    5e76:	50 e4       	ldi	r21, 0x40	; 64
    5e78:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5e7c:	69 83       	std	Y+1, r22	; 0x01
    5e7e:	7a 83       	std	Y+2, r23	; 0x02
    5e80:	8b 83       	std	Y+3, r24	; 0x03
    5e82:	9c 83       	std	Y+4, r25	; 0x04

			sine_base = (float) i/40 + (float) x/x_dividor;
    5e84:	c8 01       	movw	r24, r16
    5e86:	b7 01       	movw	r22, r14
    5e88:	20 e0       	ldi	r18, 0x00	; 0
    5e8a:	30 e0       	ldi	r19, 0x00	; 0
    5e8c:	40 e2       	ldi	r20, 0x20	; 32
    5e8e:	52 e4       	ldi	r21, 0x42	; 66
    5e90:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5e94:	1b 01       	movw	r2, r22
    5e96:	2c 01       	movw	r4, r24
    5e98:	1c 86       	std	Y+12, r1	; 0x0c
    5e9a:	1b 86       	std	Y+11, r1	; 0x0b

			left = 4 + sin(sine_base)*ripple_height;
    5e9c:	2b 85       	ldd	r18, Y+11	; 0x0b
    5e9e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5ea0:	b9 01       	movw	r22, r18
    5ea2:	88 27       	eor	r24, r24
    5ea4:	77 fd       	sbrc	r23, 7
    5ea6:	80 95       	com	r24
    5ea8:	98 2f       	mov	r25, r24
    5eaa:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5eae:	2d 81       	ldd	r18, Y+5	; 0x05
    5eb0:	3e 81       	ldd	r19, Y+6	; 0x06
    5eb2:	4f 81       	ldd	r20, Y+7	; 0x07
    5eb4:	58 85       	ldd	r21, Y+8	; 0x08
    5eb6:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    5eba:	9b 01       	movw	r18, r22
    5ebc:	ac 01       	movw	r20, r24
    5ebe:	c2 01       	movw	r24, r4
    5ec0:	b1 01       	movw	r22, r2
    5ec2:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5ec6:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    5eca:	29 81       	ldd	r18, Y+1	; 0x01
    5ecc:	3a 81       	ldd	r19, Y+2	; 0x02
    5ece:	4b 81       	ldd	r20, Y+3	; 0x03
    5ed0:	5c 81       	ldd	r21, Y+4	; 0x04
    5ed2:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    5ed6:	20 e0       	ldi	r18, 0x00	; 0
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	40 e8       	ldi	r20, 0x80	; 128
    5edc:	50 e4       	ldi	r21, 0x40	; 64
    5ede:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    5ee2:	7b 01       	movw	r14, r22
    5ee4:	8c 01       	movw	r16, r24
			right = 4 + cos(sine_base)*ripple_height;
			right = 7-left;

			//printf("%i %i \n", (int) left, (int) right);

			line_3d(0-3, x, (int) left, 7+3, x, (int) right);
    5ee6:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    5eea:	4b 01       	movw	r8, r22
    5eec:	5c 01       	movw	r10, r24
    5eee:	60 e0       	ldi	r22, 0x00	; 0
    5ef0:	70 e0       	ldi	r23, 0x00	; 0
    5ef2:	80 ee       	ldi	r24, 0xE0	; 224
    5ef4:	90 e4       	ldi	r25, 0x40	; 64
    5ef6:	a8 01       	movw	r20, r16
    5ef8:	97 01       	movw	r18, r14
    5efa:	0e 94 cd 38 	call	0x719a	; 0x719a <__subsf3>
    5efe:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    5f02:	6b 01       	movw	r12, r22
    5f04:	7c 01       	movw	r14, r24
    5f06:	8d ef       	ldi	r24, 0xFD	; 253
    5f08:	9f ef       	ldi	r25, 0xFF	; 255
    5f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f0e:	a4 01       	movw	r20, r8
    5f10:	2a e0       	ldi	r18, 0x0A	; 10
    5f12:	30 e0       	ldi	r19, 0x00	; 0
    5f14:	8b 01       	movw	r16, r22
    5f16:	76 01       	movw	r14, r12
    5f18:	0e 94 52 07 	call	0xea4	; 0xea4 <line_3d>

	for (i=0; i<iterations; i++)
// effect_stringfly2 (xit);
{
if (xit == 1) {break;}
	for (x=0; x<8 ;x++)
    5f1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f20:	01 96       	adiw	r24, 0x01	; 1
    5f22:	9c 87       	std	Y+12, r25	; 0x0c
    5f24:	8b 87       	std	Y+11, r24	; 0x0b
    5f26:	08 97       	sbiw	r24, 0x08	; 8
    5f28:	09 f0       	breq	.+2      	; 0x5f2c <sinelines+0x176>
    5f2a:	b8 cf       	rjmp	.-144    	; 0x5e9c <sinelines+0xe6>
			line_3d(0-3, x, (int) left, 7+3, x, (int) right);
			//line_3d((int) right, 7, x);
		}
	
	// delay_ms(delay);
	fill(0x00);
    5f2c:	80 e0       	ldi	r24, 0x00	; 0
    5f2e:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
{
	int i,x;

	float left, right, sine_base, x_dividor,ripple_height;

	for (i=0; i<iterations; i++)
    5f32:	08 94       	sec
    5f34:	61 1c       	adc	r6, r1
    5f36:	71 1c       	adc	r7, r1
    5f38:	e9 85       	ldd	r30, Y+9	; 0x09
    5f3a:	fa 85       	ldd	r31, Y+10	; 0x0a
    5f3c:	6e 16       	cp	r6, r30
    5f3e:	7f 06       	cpc	r7, r31
    5f40:	0c f4       	brge	.+2      	; 0x5f44 <sinelines+0x18e>
    5f42:	58 cf       	rjmp	.-336    	; 0x5df4 <sinelines+0x3e>
		}
	
	// delay_ms(delay);
	fill(0x00);
	}
}
    5f44:	2c 96       	adiw	r28, 0x0c	; 12
    5f46:	0f b6       	in	r0, 0x3f	; 63
    5f48:	f8 94       	cli
    5f4a:	de bf       	out	0x3e, r29	; 62
    5f4c:	0f be       	out	0x3f, r0	; 63
    5f4e:	cd bf       	out	0x3d, r28	; 61
    5f50:	cf 91       	pop	r28
    5f52:	df 91       	pop	r29
    5f54:	1f 91       	pop	r17
    5f56:	0f 91       	pop	r16
    5f58:	ff 90       	pop	r15
    5f5a:	ef 90       	pop	r14
    5f5c:	df 90       	pop	r13
    5f5e:	cf 90       	pop	r12
    5f60:	bf 90       	pop	r11
    5f62:	af 90       	pop	r10
    5f64:	9f 90       	pop	r9
    5f66:	8f 90       	pop	r8
    5f68:	7f 90       	pop	r7
    5f6a:	6f 90       	pop	r6
    5f6c:	5f 90       	pop	r5
    5f6e:	4f 90       	pop	r4
    5f70:	3f 90       	pop	r3
    5f72:	2f 90       	pop	r2
    5f74:	08 95       	ret

00005f76 <linespin>:
		setvoxel (x,y,i);
		}
	}
	
void linespin (int iterations, int delay)
{
    5f76:	2f 92       	push	r2
    5f78:	3f 92       	push	r3
    5f7a:	4f 92       	push	r4
    5f7c:	5f 92       	push	r5
    5f7e:	6f 92       	push	r6
    5f80:	7f 92       	push	r7
    5f82:	8f 92       	push	r8
    5f84:	9f 92       	push	r9
    5f86:	af 92       	push	r10
    5f88:	bf 92       	push	r11
    5f8a:	cf 92       	push	r12
    5f8c:	df 92       	push	r13
    5f8e:	ef 92       	push	r14
    5f90:	ff 92       	push	r15
    5f92:	0f 93       	push	r16
    5f94:	1f 93       	push	r17
    5f96:	df 93       	push	r29
    5f98:	cf 93       	push	r28
    5f9a:	cd b7       	in	r28, 0x3d	; 61
    5f9c:	de b7       	in	r29, 0x3e	; 62
    5f9e:	66 97       	sbiw	r28, 0x16	; 22
    5fa0:	0f b6       	in	r0, 0x3f	; 63
    5fa2:	f8 94       	cli
    5fa4:	de bf       	out	0x3e, r29	; 62
    5fa6:	0f be       	out	0x3f, r0	; 63
    5fa8:	cd bf       	out	0x3d, r28	; 61
    5faa:	98 87       	std	Y+8, r25	; 0x08
    5fac:	8f 83       	std	Y+7, r24	; 0x07
    5fae:	1e 8a       	std	Y+22, r1	; 0x16
    5fb0:	1d 8a       	std	Y+21, r1	; 0x15
    5fb2:	03 c1       	rjmp	.+518    	; 0x61ba <linespin+0x244>

	int i, z;
	for (i=0;i<iterations;i++)

	{
if (xit == 1) {i = iterations;goto skipspin;}
    5fb4:	80 91 b3 01 	lds	r24, 0x01B3
    5fb8:	90 91 b4 01 	lds	r25, 0x01B4
    5fbc:	01 97       	sbiw	r24, 0x01	; 1
    5fbe:	09 f4       	brne	.+2      	; 0x5fc2 <linespin+0x4c>
    5fc0:	e6 c0       	rjmp	.+460    	; 0x618e <linespin+0x218>
    5fc2:	1a 82       	std	Y+2, r1	; 0x02
    5fc4:	19 82       	std	Y+1, r1	; 0x01

		for (z = 0; z < 8; z++)
		{
if (xit == 1) {i = iterations;goto skipspin;}

		sin_base = (float)i/50 + (float)z/(10+(7*sin((float)i/200)));
    5fc6:	8d 89       	ldd	r24, Y+21	; 0x15
    5fc8:	9e 89       	ldd	r25, Y+22	; 0x16
    5fca:	aa 27       	eor	r26, r26
    5fcc:	97 fd       	sbrc	r25, 7
    5fce:	a0 95       	com	r26
    5fd0:	ba 2f       	mov	r27, r26
    5fd2:	89 8b       	std	Y+17, r24	; 0x11
    5fd4:	9a 8b       	std	Y+18, r25	; 0x12
    5fd6:	ab 8b       	std	Y+19, r26	; 0x13
    5fd8:	bc 8b       	std	Y+20, r27	; 0x14
if (xit == 1) {i = iterations;goto skipspin;}
		//printf("Sin base %f \n",sin_base);

		for (z = 0; z < 8; z++)
		{
if (xit == 1) {i = iterations;goto skipspin;}
    5fda:	80 91 b3 01 	lds	r24, 0x01B3
    5fde:	90 91 b4 01 	lds	r25, 0x01B4
    5fe2:	01 97       	sbiw	r24, 0x01	; 1
    5fe4:	09 f4       	brne	.+2      	; 0x5fe8 <linespin+0x72>
    5fe6:	d3 c0       	rjmp	.+422    	; 0x618e <linespin+0x218>

		sin_base = (float)i/50 + (float)z/(10+(7*sin((float)i/200)));
    5fe8:	69 89       	ldd	r22, Y+17	; 0x11
    5fea:	7a 89       	ldd	r23, Y+18	; 0x12
    5fec:	8b 89       	ldd	r24, Y+19	; 0x13
    5fee:	9c 89       	ldd	r25, Y+20	; 0x14
    5ff0:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    5ff4:	5b 01       	movw	r10, r22
    5ff6:	6c 01       	movw	r12, r24
    5ff8:	a9 81       	ldd	r26, Y+1	; 0x01
    5ffa:	ba 81       	ldd	r27, Y+2	; 0x02
    5ffc:	bd 01       	movw	r22, r26
    5ffe:	88 27       	eor	r24, r24
    6000:	77 fd       	sbrc	r23, 7
    6002:	80 95       	com	r24
    6004:	98 2f       	mov	r25, r24
    6006:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    600a:	1b 01       	movw	r2, r22
    600c:	2c 01       	movw	r4, r24
    600e:	c6 01       	movw	r24, r12
    6010:	b5 01       	movw	r22, r10
    6012:	20 e0       	ldi	r18, 0x00	; 0
    6014:	30 e0       	ldi	r19, 0x00	; 0
    6016:	48 e4       	ldi	r20, 0x48	; 72
    6018:	53 e4       	ldi	r21, 0x43	; 67
    601a:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    601e:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    6022:	7b 01       	movw	r14, r22
    6024:	8c 01       	movw	r16, r24
    6026:	c6 01       	movw	r24, r12
    6028:	b5 01       	movw	r22, r10
    602a:	20 e0       	ldi	r18, 0x00	; 0
    602c:	30 e0       	ldi	r19, 0x00	; 0
    602e:	48 e4       	ldi	r20, 0x48	; 72
    6030:	52 e4       	ldi	r21, 0x42	; 66
    6032:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    6036:	5b 01       	movw	r10, r22
    6038:	6c 01       	movw	r12, r24
    603a:	c8 01       	movw	r24, r16
    603c:	b7 01       	movw	r22, r14
    603e:	20 e0       	ldi	r18, 0x00	; 0
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	40 ee       	ldi	r20, 0xE0	; 224
    6044:	50 e4       	ldi	r21, 0x40	; 64
    6046:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    604a:	20 e0       	ldi	r18, 0x00	; 0
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	40 e2       	ldi	r20, 0x20	; 32
    6050:	51 e4       	ldi	r21, 0x41	; 65
    6052:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    6056:	9b 01       	movw	r18, r22
    6058:	ac 01       	movw	r20, r24
    605a:	c2 01       	movw	r24, r4
    605c:	b1 01       	movw	r22, r2
    605e:	0e 94 39 39 	call	0x7272	; 0x7272 <__divsf3>
    6062:	9b 01       	movw	r18, r22
    6064:	ac 01       	movw	r20, r24
    6066:	c6 01       	movw	r24, r12
    6068:	b5 01       	movw	r22, r10
    606a:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    606e:	7b 01       	movw	r14, r22
    6070:	8c 01       	movw	r16, r24

		top_x = center_x + sin(sin_base)*5;
    6072:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    6076:	3b 01       	movw	r6, r22
    6078:	4c 01       	movw	r8, r24
		top_y = center_x + cos(sin_base)*5;
    607a:	c8 01       	movw	r24, r16
    607c:	b7 01       	movw	r22, r14
    607e:	0e 94 36 39 	call	0x726c	; 0x726c <cos>
    6082:	6b 83       	std	Y+3, r22	; 0x03
    6084:	7c 83       	std	Y+4, r23	; 0x04
    6086:	8d 83       	std	Y+5, r24	; 0x05
    6088:	9e 83       	std	Y+6, r25	; 0x06
		//top_z = center_x + cos(sin_base/100)*2.5;

		bot_x = center_x + sin(sin_base+3.14)*10;
    608a:	c8 01       	movw	r24, r16
    608c:	b7 01       	movw	r22, r14
    608e:	23 ec       	ldi	r18, 0xC3	; 195
    6090:	35 ef       	ldi	r19, 0xF5	; 245
    6092:	48 e4       	ldi	r20, 0x48	; 72
    6094:	50 e4       	ldi	r21, 0x40	; 64
    6096:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    609a:	7b 01       	movw	r14, r22
    609c:	8c 01       	movw	r16, r24
    609e:	c8 01       	movw	r24, r16
    60a0:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
    60a4:	5b 01       	movw	r10, r22
    60a6:	6c 01       	movw	r12, r24
		bot_y = center_x + cos(sin_base+3.14)*10;
    60a8:	b7 01       	movw	r22, r14
    60aa:	c8 01       	movw	r24, r16
    60ac:	0e 94 36 39 	call	0x726c	; 0x726c <cos>
    60b0:	7b 01       	movw	r14, r22
    60b2:	8c 01       	movw	r16, r24
		// setvoxel((int) bot_x, (int) bot_y, 0);

		//printf("P1: %i %i %i P2: %i %i %i \n", (int) top_x, (int) top_y, 7, (int) bot_x, (int) bot_y, 0);

		//line_3d((int) top_x, (int) top_y, (int) top_z, (int) bot_x, (int) bot_y, (int) bot_z);
		line_3d((int) top_z, (int) top_x, (int) top_y, (int) bot_z, (int) bot_x, (int) bot_y);
    60b4:	c2 01       	movw	r24, r4
    60b6:	b1 01       	movw	r22, r2
    60b8:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    60bc:	69 87       	std	Y+9, r22	; 0x09
    60be:	7a 87       	std	Y+10, r23	; 0x0a
    60c0:	8b 87       	std	Y+11, r24	; 0x0b
    60c2:	9c 87       	std	Y+12, r25	; 0x0c
    60c4:	c4 01       	movw	r24, r8
    60c6:	b3 01       	movw	r22, r6
    60c8:	20 e0       	ldi	r18, 0x00	; 0
    60ca:	30 e0       	ldi	r19, 0x00	; 0
    60cc:	40 ea       	ldi	r20, 0xA0	; 160
    60ce:	50 e4       	ldi	r21, 0x40	; 64
    60d0:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    60d4:	20 e0       	ldi	r18, 0x00	; 0
    60d6:	30 e0       	ldi	r19, 0x00	; 0
    60d8:	40 e8       	ldi	r20, 0x80	; 128
    60da:	50 e4       	ldi	r21, 0x40	; 64
    60dc:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    60e0:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    60e4:	6d 87       	std	Y+13, r22	; 0x0d
    60e6:	7e 87       	std	Y+14, r23	; 0x0e
    60e8:	8f 87       	std	Y+15, r24	; 0x0f
    60ea:	98 8b       	std	Y+16, r25	; 0x10
    60ec:	6b 81       	ldd	r22, Y+3	; 0x03
    60ee:	7c 81       	ldd	r23, Y+4	; 0x04
    60f0:	8d 81       	ldd	r24, Y+5	; 0x05
    60f2:	9e 81       	ldd	r25, Y+6	; 0x06
    60f4:	20 e0       	ldi	r18, 0x00	; 0
    60f6:	30 e0       	ldi	r19, 0x00	; 0
    60f8:	40 ea       	ldi	r20, 0xA0	; 160
    60fa:	50 e4       	ldi	r21, 0x40	; 64
    60fc:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    6100:	20 e0       	ldi	r18, 0x00	; 0
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	40 e8       	ldi	r20, 0x80	; 128
    6106:	50 e4       	ldi	r21, 0x40	; 64
    6108:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    610c:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    6110:	2b 01       	movw	r4, r22
    6112:	3c 01       	movw	r6, r24
    6114:	c6 01       	movw	r24, r12
    6116:	b5 01       	movw	r22, r10
    6118:	20 e0       	ldi	r18, 0x00	; 0
    611a:	30 e0       	ldi	r19, 0x00	; 0
    611c:	40 e2       	ldi	r20, 0x20	; 32
    611e:	51 e4       	ldi	r21, 0x41	; 65
    6120:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    6124:	20 e0       	ldi	r18, 0x00	; 0
    6126:	30 e0       	ldi	r19, 0x00	; 0
    6128:	40 e8       	ldi	r20, 0x80	; 128
    612a:	50 e4       	ldi	r21, 0x40	; 64
    612c:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    6130:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    6134:	4b 01       	movw	r8, r22
    6136:	5c 01       	movw	r10, r24
    6138:	c8 01       	movw	r24, r16
    613a:	b7 01       	movw	r22, r14
    613c:	20 e0       	ldi	r18, 0x00	; 0
    613e:	30 e0       	ldi	r19, 0x00	; 0
    6140:	40 e2       	ldi	r20, 0x20	; 32
    6142:	51 e4       	ldi	r21, 0x41	; 65
    6144:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    6148:	20 e0       	ldi	r18, 0x00	; 0
    614a:	30 e0       	ldi	r19, 0x00	; 0
    614c:	40 e8       	ldi	r20, 0x80	; 128
    614e:	50 e4       	ldi	r21, 0x40	; 64
    6150:	0e 94 ce 38 	call	0x719c	; 0x719c <__addsf3>
    6154:	0e 94 a1 39 	call	0x7342	; 0x7342 <__fixsfsi>
    6158:	6b 01       	movw	r12, r22
    615a:	7c 01       	movw	r14, r24
    615c:	89 85       	ldd	r24, Y+9	; 0x09
    615e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6160:	6d 85       	ldd	r22, Y+13	; 0x0d
    6162:	7e 85       	ldd	r23, Y+14	; 0x0e
    6164:	a2 01       	movw	r20, r4
    6166:	9c 01       	movw	r18, r24
    6168:	84 01       	movw	r16, r8
    616a:	76 01       	movw	r14, r12
    616c:	0e 94 52 07 	call	0xea4	; 0xea4 <line_3d>
if (xit == 1) {i = iterations;goto skipspin;}
    6170:	80 91 b3 01 	lds	r24, 0x01B3
    6174:	90 91 b4 01 	lds	r25, 0x01B4
    6178:	01 97       	sbiw	r24, 0x01	; 1
    617a:	49 f0       	breq	.+18     	; 0x618e <linespin+0x218>

	{
if (xit == 1) {i = iterations;goto skipspin;}
		//printf("Sin base %f \n",sin_base);

		for (z = 0; z < 8; z++)
    617c:	e9 81       	ldd	r30, Y+1	; 0x01
    617e:	fa 81       	ldd	r31, Y+2	; 0x02
    6180:	31 96       	adiw	r30, 0x01	; 1
    6182:	fa 83       	std	Y+2, r31	; 0x02
    6184:	e9 83       	std	Y+1, r30	; 0x01
    6186:	38 97       	sbiw	r30, 0x08	; 8
    6188:	09 f0       	breq	.+2      	; 0x618c <linespin+0x216>
    618a:	27 cf       	rjmp	.-434    	; 0x5fda <linespin+0x64>
    618c:	04 c0       	rjmp	.+8      	; 0x6196 <linespin+0x220>

		//line_3d((int) top_x, (int) top_y, (int) top_z, (int) bot_x, (int) bot_y, (int) bot_z);
		line_3d((int) top_z, (int) top_x, (int) top_y, (int) bot_z, (int) bot_x, (int) bot_y);
if (xit == 1) {i = iterations;goto skipspin;}
		}
skipspin:
    618e:	2f 81       	ldd	r18, Y+7	; 0x07
    6190:	38 85       	ldd	r19, Y+8	; 0x08
    6192:	3e 8b       	std	Y+22, r19	; 0x16
    6194:	2d 8b       	std	Y+21, r18	; 0x15
		delay_ms(1);
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
		fill(0x00);
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
if (xit == 1) {break;}
    61a4:	80 91 b3 01 	lds	r24, 0x01B3
    61a8:	90 91 b4 01 	lds	r25, 0x01B4
    61ac:	01 97       	sbiw	r24, 0x01	; 1
    61ae:	69 f0       	breq	.+26     	; 0x61ca <linespin+0x254>
	
	center_x = 4;
	center_y = 4;

	int i, z;
	for (i=0;i<iterations;i++)
    61b0:	8d 89       	ldd	r24, Y+21	; 0x15
    61b2:	9e 89       	ldd	r25, Y+22	; 0x16
    61b4:	01 96       	adiw	r24, 0x01	; 1
    61b6:	9e 8b       	std	Y+22, r25	; 0x16
    61b8:	8d 8b       	std	Y+21, r24	; 0x15
    61ba:	ad 89       	ldd	r26, Y+21	; 0x15
    61bc:	be 89       	ldd	r27, Y+22	; 0x16
    61be:	ef 81       	ldd	r30, Y+7	; 0x07
    61c0:	f8 85       	ldd	r31, Y+8	; 0x08
    61c2:	ae 17       	cp	r26, r30
    61c4:	bf 07       	cpc	r27, r31
    61c6:	0c f4       	brge	.+2      	; 0x61ca <linespin+0x254>
    61c8:	f5 ce       	rjmp	.-534    	; 0x5fb4 <linespin+0x3e>
		delay_ms(1);
		fill(0x00);
if (xit == 1) {break;}
	}

}
    61ca:	66 96       	adiw	r28, 0x16	; 22
    61cc:	0f b6       	in	r0, 0x3f	; 63
    61ce:	f8 94       	cli
    61d0:	de bf       	out	0x3e, r29	; 62
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	cd bf       	out	0x3d, r28	; 61
    61d6:	cf 91       	pop	r28
    61d8:	df 91       	pop	r29
    61da:	1f 91       	pop	r17
    61dc:	0f 91       	pop	r16
    61de:	ff 90       	pop	r15
    61e0:	ef 90       	pop	r14
    61e2:	df 90       	pop	r13
    61e4:	cf 90       	pop	r12
    61e6:	bf 90       	pop	r11
    61e8:	af 90       	pop	r10
    61ea:	9f 90       	pop	r9
    61ec:	8f 90       	pop	r8
    61ee:	7f 90       	pop	r7
    61f0:	6f 90       	pop	r6
    61f2:	5f 90       	pop	r5
    61f4:	4f 90       	pop	r4
    61f6:	3f 90       	pop	r3
    61f8:	2f 90       	pop	r2
    61fa:	08 95       	ret

000061fc <font_getpath>:
void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
	
	if (path == 1)
    61fc:	81 30       	cpi	r24, 0x01	; 1
    61fe:	19 f4       	brne	.+6      	; 0x6206 <font_getpath+0xa>
    6200:	8c e1       	ldi	r24, 0x1C	; 28
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	02 c0       	rjmp	.+4      	; 0x620a <font_getpath+0xe>
    6206:	80 e0       	ldi	r24, 0x00	; 0
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	dc 01       	movw	r26, r24
    620c:	a3 52       	subi	r26, 0x23	; 35
    620e:	bf 4f       	sbci	r27, 0xFF	; 255
    6210:	20 e0       	ldi	r18, 0x00	; 0
    6212:	30 e0       	ldi	r19, 0x00	; 0
    6214:	09 c0       	rjmp	.+18     	; 0x6228 <font_getpath+0x2c>
		offset=28;
	
	for (i = 0; i < length; i++)
		destination[i] = pgm_read_byte(&paths[i+offset]);
    6216:	fd 01       	movw	r30, r26
    6218:	84 91       	lpm	r24, Z+
    621a:	fb 01       	movw	r30, r22
    621c:	e2 0f       	add	r30, r18
    621e:	f3 1f       	adc	r31, r19
    6220:	80 83       	st	Z, r24
	int offset = 0;
	
	if (path == 1)
		offset=28;
	
	for (i = 0; i < length; i++)
    6222:	2f 5f       	subi	r18, 0xFF	; 255
    6224:	3f 4f       	sbci	r19, 0xFF	; 255
    6226:	11 96       	adiw	r26, 0x01	; 1
    6228:	24 17       	cp	r18, r20
    622a:	35 07       	cpc	r19, r21
    622c:	a4 f3       	brlt	.-24     	; 0x6216 <font_getpath+0x1a>
		destination[i] = pgm_read_byte(&paths[i+offset]);
}
    622e:	08 95       	ret

00006230 <font_getbitmappixel>:
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}

unsigned char font_getbitmappixel ( char bitmap, char x, char y)
{
    6230:	1f 93       	push	r17
    6232:	14 2f       	mov	r17, r20
	uint8_t tmp = eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)x]);
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	23 e0       	ldi	r18, 0x03	; 3
    6238:	88 0f       	add	r24, r24
    623a:	99 1f       	adc	r25, r25
    623c:	2a 95       	dec	r18
    623e:	e1 f7       	brne	.-8      	; 0x6238 <font_getbitmappixel+0x8>
    6240:	86 0f       	add	r24, r22
    6242:	91 1d       	adc	r25, r1
    6244:	89 53       	subi	r24, 0x39	; 57
    6246:	9e 4f       	sbci	r25, 0xFE	; 254
    6248:	0e 94 66 3c 	call	0x78cc	; 0x78cc <__eerd_byte_m32>
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	02 c0       	rjmp	.+4      	; 0x6254 <font_getbitmappixel+0x24>
    6250:	95 95       	asr	r25
    6252:	87 95       	ror	r24
    6254:	1a 95       	dec	r17
    6256:	e2 f7       	brpl	.-8      	; 0x6250 <font_getbitmappixel+0x20>
	return (tmp >> y) & 0x01;
}
    6258:	81 70       	andi	r24, 0x01	; 1
    625a:	1f 91       	pop	r17
    625c:	08 95       	ret

0000625e <font_getbitmap>:
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}

void font_getbitmap (char bitmap, unsigned char dst[8])
{
    625e:	ef 92       	push	r14
    6260:	ff 92       	push	r15
    6262:	0f 93       	push	r16
    6264:	1f 93       	push	r17
    6266:	cf 93       	push	r28
    6268:	df 93       	push	r29
    626a:	7b 01       	movw	r14, r22
    626c:	c8 2f       	mov	r28, r24
    626e:	d0 e0       	ldi	r29, 0x00	; 0
    6270:	33 e0       	ldi	r19, 0x03	; 3
    6272:	cc 0f       	add	r28, r28
    6274:	dd 1f       	adc	r29, r29
    6276:	3a 95       	dec	r19
    6278:	e1 f7       	brne	.-8      	; 0x6272 <font_getbitmap+0x14>
    627a:	c9 53       	subi	r28, 0x39	; 57
    627c:	de 4f       	sbci	r29, 0xFE	; 254
    627e:	00 e0       	ldi	r16, 0x00	; 0
    6280:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	
    for (i = 0; i < 8; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
    6282:	ce 01       	movw	r24, r28
    6284:	0e 94 66 3c 	call	0x78cc	; 0x78cc <__eerd_byte_m32>
    6288:	f7 01       	movw	r30, r14
    628a:	e0 0f       	add	r30, r16
    628c:	f1 1f       	adc	r31, r17
    628e:	80 83       	st	Z, r24

void font_getbitmap (char bitmap, unsigned char dst[8])
{
	int i;
	
    for (i = 0; i < 8; i++)
    6290:	0f 5f       	subi	r16, 0xFF	; 255
    6292:	1f 4f       	sbci	r17, 0xFF	; 255
    6294:	21 96       	adiw	r28, 0x01	; 1
    6296:	08 30       	cpi	r16, 0x08	; 8
    6298:	11 05       	cpc	r17, r1
    629a:	99 f7       	brne	.-26     	; 0x6282 <font_getbitmap+0x24>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}
    629c:	df 91       	pop	r29
    629e:	cf 91       	pop	r28
    62a0:	1f 91       	pop	r17
    62a2:	0f 91       	pop	r16
    62a4:	ff 90       	pop	r15
    62a6:	ef 90       	pop	r14
    62a8:	08 95       	ret

000062aa <font_getchar>:
	for (i = 0; i < length; i++)
		destination[i] = pgm_read_byte(&paths[i+offset]);
}

void font_getchar (char chr, unsigned char dst[5])
{
    62aa:	ef 92       	push	r14
    62ac:	ff 92       	push	r15
    62ae:	0f 93       	push	r16
    62b0:	1f 93       	push	r17
    62b2:	cf 93       	push	r28
    62b4:	df 93       	push	r29
    62b6:	7b 01       	movw	r14, r22
    62b8:	80 52       	subi	r24, 0x20	; 32
    62ba:	95 e0       	ldi	r25, 0x05	; 5
    62bc:	89 9f       	mul	r24, r25
    62be:	80 01       	movw	r16, r0
    62c0:	11 24       	eor	r1, r1
    62c2:	00 50       	subi	r16, 0x00	; 0
    62c4:	10 40       	sbci	r17, 0x00	; 0
    62c6:	c0 e0       	ldi	r28, 0x00	; 0
    62c8:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
    62ca:	c8 01       	movw	r24, r16
    62cc:	0e 94 66 3c 	call	0x78cc	; 0x78cc <__eerd_byte_m32>
    62d0:	f7 01       	movw	r30, r14
    62d2:	ec 0f       	add	r30, r28
    62d4:	fd 1f       	adc	r31, r29
    62d6:	80 83       	st	Z, r24
    62d8:	21 96       	adiw	r28, 0x01	; 1
    62da:	0f 5f       	subi	r16, 0xFF	; 255
    62dc:	1f 4f       	sbci	r17, 0xFF	; 255
void font_getchar (char chr, unsigned char dst[5])
{
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
    62de:	c5 30       	cpi	r28, 0x05	; 5
    62e0:	d1 05       	cpc	r29, r1
    62e2:	99 f7       	brne	.-26     	; 0x62ca <font_getchar+0x20>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}
    62e4:	df 91       	pop	r29
    62e6:	cf 91       	pop	r28
    62e8:	1f 91       	pop	r17
    62ea:	0f 91       	pop	r16
    62ec:	ff 90       	pop	r15
    62ee:	ef 90       	pop	r14
    62f0:	08 95       	ret

000062f2 <launch_effect>:
#include "effect.h"
#include "draw.h"
#include "gameoflife.h"
extern int xit;
void launch_effect (int effect)
{
    62f2:	ef 92       	push	r14
    62f4:	ff 92       	push	r15
    62f6:	0f 93       	push	r16
    62f8:	1f 93       	push	r17
    62fa:	cf 93       	push	r28
    62fc:	df 93       	push	r29
    62fe:	18 2f       	mov	r17, r24
    6300:	09 2f       	mov	r16, r25


int i;
    unsigned char ii;
	int x = 0;
	fill(0x00);
    6302:	80 e0       	ldi	r24, 0x00	; 0
    6304:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
	LED_PORT &= (0xE3); // turn off status and diag LED
    6308:	82 b3       	in	r24, 0x12	; 18
    630a:	83 7e       	andi	r24, 0xE3	; 227
    630c:	82 bb       	out	0x12, r24	; 18
	switch (effect)
    630e:	e1 2f       	mov	r30, r17
    6310:	f0 2f       	mov	r31, r16
    6312:	e4 32       	cpi	r30, 0x24	; 36
    6314:	f1 05       	cpc	r31, r1
    6316:	08 f0       	brcs	.+2      	; 0x631a <launch_effect+0x28>
    6318:	ce c5       	rjmp	.+2972   	; 0x6eb6 <launch_effect+0xbc4>
    631a:	e6 5d       	subi	r30, 0xD6	; 214
    631c:	ff 4f       	sbci	r31, 0xFF	; 255
    631e:	ee 0f       	add	r30, r30
    6320:	ff 1f       	adc	r31, r31
    6322:	05 90       	lpm	r0, Z+
    6324:	f4 91       	lpm	r31, Z+
    6326:	e0 2d       	mov	r30, r0
    6328:	09 94       	ijmp
    632a:	00 e0       	ldi	r16, 0x00	; 0
    632c:	10 e0       	ldi	r17, 0x00	; 0
    632e:	fd c1       	rjmp	.+1018   	; 0x672a <launch_effect+0x438>
	{
		case 0:
			fill(0x00);
    6330:	80 e0       	ldi	r24, 0x00	; 0
    6332:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    6336:	c0 e0       	ldi	r28, 0x00	; 0
    6338:	d0 e0       	ldi	r29, 0x00	; 0
            // Create a random starting point for the Game of Life effect.
			for (i = 0; i < 20;i++)
			{
				setvoxel(rand()%4,rand()%4,rand()%4);
    633a:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    633e:	8c 01       	movw	r16, r24
    6340:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    6344:	7c 01       	movw	r14, r24
    6346:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    634a:	fc 01       	movw	r30, r24
    634c:	c8 01       	movw	r24, r16
    634e:	64 e0       	ldi	r22, 0x04	; 4
    6350:	70 e0       	ldi	r23, 0x00	; 0
    6352:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    6356:	8c 01       	movw	r16, r24
    6358:	c7 01       	movw	r24, r14
    635a:	64 e0       	ldi	r22, 0x04	; 4
    635c:	70 e0       	ldi	r23, 0x00	; 0
    635e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    6362:	9c 01       	movw	r18, r24
    6364:	cf 01       	movw	r24, r30
    6366:	64 e0       	ldi	r22, 0x04	; 4
    6368:	70 e0       	ldi	r23, 0x00	; 0
    636a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    636e:	ac 01       	movw	r20, r24
    6370:	c8 01       	movw	r24, r16
    6372:	b9 01       	movw	r22, r18
    6374:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
	switch (effect)
	{
		case 0:
			fill(0x00);
            // Create a random starting point for the Game of Life effect.
			for (i = 0; i < 20;i++)
    6378:	21 96       	adiw	r28, 0x01	; 1
    637a:	c4 31       	cpi	r28, 0x14	; 20
    637c:	d1 05       	cpc	r29, r1
    637e:	e9 f6       	brne	.-70     	; 0x633a <launch_effect+0x48>
			{
				setvoxel(rand()%4,rand()%4,rand()%4);
			}
	
			gol_play(50, 600);
    6380:	82 e3       	ldi	r24, 0x32	; 50
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	68 e5       	ldi	r22, 0x58	; 88
    6386:	72 e0       	ldi	r23, 0x02	; 2
    6388:	0e 94 2e 38 	call	0x705c	; 0x705c <gol_play>
    638c:	98 c5       	rjmp	.+2864   	; 0x6ebe <launch_effect+0xbcc>
			break;
    638e:	16 e0       	ldi	r17, 0x06	; 6
		case 1:
		for (i=6;i<13;i++)
		{
	effect_smileyspin(3,1000,i);
    6390:	83 e0       	ldi	r24, 0x03	; 3
    6392:	90 e0       	ldi	r25, 0x00	; 0
    6394:	68 ee       	ldi	r22, 0xE8	; 232
    6396:	73 e0       	ldi	r23, 0x03	; 3
    6398:	41 2f       	mov	r20, r17
    639a:	0e 94 ab 12 	call	0x2556	; 0x2556 <effect_smileyspin>
    639e:	1f 5f       	subi	r17, 0xFF	; 255
			}
	
			gol_play(50, 600);
			break;
		case 1:
		for (i=6;i<13;i++)
    63a0:	1d 30       	cpi	r17, 0x0D	; 13
    63a2:	b1 f7       	brne	.-20     	; 0x6390 <launch_effect+0x9e>
    63a4:	04 c0       	rjmp	.+8      	; 0x63ae <launch_effect+0xbc>
		{
	effect_smileyspin(3,1000,i);
			}
while (xit == 1) {delay_ms (500);}
    63a6:	84 ef       	ldi	r24, 0xF4	; 244
    63a8:	91 e0       	ldi	r25, 0x01	; 1
    63aa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    63ae:	80 91 b3 01 	lds	r24, 0x01B3
    63b2:	90 91 b4 01 	lds	r25, 0x01B4
    63b6:	01 97       	sbiw	r24, 0x01	; 1
    63b8:	b1 f3       	breq	.-20     	; 0x63a6 <launch_effect+0xb4>

			effect_blinky2();
    63ba:	0e 94 a0 19 	call	0x3340	; 0x3340 <effect_blinky2>
    63be:	04 c0       	rjmp	.+8      	; 0x63c8 <launch_effect+0xd6>
while (xit == 1) {delay_ms (500);}
    63c0:	84 ef       	ldi	r24, 0xF4	; 244
    63c2:	91 e0       	ldi	r25, 0x01	; 1
    63c4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    63c8:	80 91 b3 01 	lds	r24, 0x01B3
    63cc:	90 91 b4 01 	lds	r25, 0x01B4
    63d0:	01 97       	sbiw	r24, 0x01	; 1
    63d2:	b1 f3       	breq	.-20     	; 0x63c0 <launch_effect+0xce>

			effect_rain(100);
    63d4:	84 e6       	ldi	r24, 0x64	; 100
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <effect_rain>
    63dc:	04 c0       	rjmp	.+8      	; 0x63e6 <launch_effect+0xf4>
while (xit == 1) {delay_ms (500);}
    63de:	84 ef       	ldi	r24, 0xF4	; 244
    63e0:	91 e0       	ldi	r25, 0x01	; 1
    63e2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    63e6:	80 91 b3 01 	lds	r24, 0x01B3
    63ea:	90 91 b4 01 	lds	r25, 0x01B4
    63ee:	01 97       	sbiw	r24, 0x01	; 1
    63f0:	b1 f3       	breq	.-20     	; 0x63de <launch_effect+0xec>
			fill(0x00);
    63f2:	80 e0       	ldi	r24, 0x00	; 0
    63f4:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    63f8:	02 ec       	ldi	r16, 0xC2	; 194
    63fa:	11 e0       	ldi	r17, 0x01	; 1
			for (i=15;i>1;i--){
int_ripples(64,30*i);
    63fc:	80 e4       	ldi	r24, 0x40	; 64
    63fe:	90 e0       	ldi	r25, 0x00	; 0
    6400:	b8 01       	movw	r22, r16
    6402:	0e 94 30 24 	call	0x4860	; 0x4860 <int_ripples>
    6406:	0e 51       	subi	r16, 0x1E	; 30
    6408:	10 40       	sbci	r17, 0x00	; 0
while (xit == 1) {delay_ms (500);}

			effect_rain(100);
while (xit == 1) {delay_ms (500);}
			fill(0x00);
			for (i=15;i>1;i--){
    640a:	0e 31       	cpi	r16, 0x1E	; 30
    640c:	11 05       	cpc	r17, r1
    640e:	b1 f7       	brne	.-20     	; 0x63fc <launch_effect+0x10a>
    6410:	04 c0       	rjmp	.+8      	; 0x641a <launch_effect+0x128>
int_ripples(64,30*i);
// if (xit == 1) {i=1;}
}
while (xit == 1) {delay_ms (500);}
    6412:	84 ef       	ldi	r24, 0xF4	; 244
    6414:	91 e0       	ldi	r25, 0x01	; 1
    6416:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    641a:	80 91 b3 01 	lds	r24, 0x01B3
    641e:	90 91 b4 01 	lds	r25, 0x01B4
    6422:	01 97       	sbiw	r24, 0x01	; 1
    6424:	b1 f3       	breq	.-20     	; 0x6412 <launch_effect+0x120>
    6426:	4b c5       	rjmp	.+2710   	; 0x6ebe <launch_effect+0xbcc>
			break;
		
		case 2:
			
			effect_path_text(1000,"8X8X8    3D   LED   CUBE");
    6428:	88 ee       	ldi	r24, 0xE8	; 232
    642a:	93 e0       	ldi	r25, 0x03	; 3
    642c:	63 ee       	ldi	r22, 0xE3	; 227
    642e:	70 e0       	ldi	r23, 0x00	; 0
    6430:	0e 94 46 11 	call	0x228c	; 0x228c <effect_path_text>
			effect_stringfly2("BY");
    6434:	8c ef       	ldi	r24, 0xFC	; 252
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
			effect_path_text(1000,"Yarin Levy");
    643c:	88 ee       	ldi	r24, 0xE8	; 232
    643e:	93 e0       	ldi	r25, 0x03	; 3
    6440:	6f ef       	ldi	r22, 0xFF	; 255
    6442:	70 e0       	ldi	r23, 0x00	; 0
    6444:	0e 94 46 11 	call	0x228c	; 0x228c <effect_path_text>
			effect_path_text(1000,"With Thanks to:");
    6448:	88 ee       	ldi	r24, 0xE8	; 232
    644a:	93 e0       	ldi	r25, 0x03	; 3
    644c:	6a e0       	ldi	r22, 0x0A	; 10
    644e:	71 e0       	ldi	r23, 0x01	; 1
    6450:	0e 94 46 11 	call	0x228c	; 0x228c <effect_path_text>
			effect_path_text(1000,"Ort Rehovot   &   Norman At SUPERTECH-IT DOT COM");
    6454:	88 ee       	ldi	r24, 0xE8	; 232
    6456:	93 e0       	ldi	r25, 0x03	; 3
    6458:	6a e1       	ldi	r22, 0x1A	; 26
    645a:	71 e0       	ldi	r23, 0x01	; 1
    645c:	0e 94 46 11 	call	0x228c	; 0x228c <effect_path_text>
			
			// sidewaves(2000,100);
			linespin(1500,20);
    6460:	8c ed       	ldi	r24, 0xDC	; 220
    6462:	95 e0       	ldi	r25, 0x05	; 5
    6464:	64 e1       	ldi	r22, 0x14	; 20
    6466:	70 e0       	ldi	r23, 0x00	; 0
    6468:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <linespin>
    646c:	04 c0       	rjmp	.+8      	; 0x6476 <launch_effect+0x184>
while (xit == 1) {delay_ms (500);}
    646e:	84 ef       	ldi	r24, 0xF4	; 244
    6470:	91 e0       	ldi	r25, 0x01	; 1
    6472:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6476:	80 91 b3 01 	lds	r24, 0x01B3
    647a:	90 91 b4 01 	lds	r25, 0x01B4
    647e:	01 97       	sbiw	r24, 0x01	; 1
    6480:	b1 f3       	breq	.-20     	; 0x646e <launch_effect+0x17c>
			sinelines(4000,10);
    6482:	80 ea       	ldi	r24, 0xA0	; 160
    6484:	9f e0       	ldi	r25, 0x0F	; 15
    6486:	6a e0       	ldi	r22, 0x0A	; 10
    6488:	70 e0       	ldi	r23, 0x00	; 0
    648a:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <sinelines>
    648e:	04 c0       	rjmp	.+8      	; 0x6498 <launch_effect+0x1a6>
while (xit == 1) {delay_ms (500);}
    6490:	84 ef       	ldi	r24, 0xF4	; 244
    6492:	91 e0       	ldi	r25, 0x01	; 1
    6494:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6498:	80 91 b3 01 	lds	r24, 0x01B3
    649c:	90 91 b4 01 	lds	r25, 0x01B4
    64a0:	01 97       	sbiw	r24, 0x01	; 1
    64a2:	b1 f3       	breq	.-20     	; 0x6490 <launch_effect+0x19e>
			// spheremove(3000,10);
			
			// twister (8,600);
			// effect_pathspiral (64,600);
			
fill (0x00);
    64a4:	80 e0       	ldi	r24, 0x00	; 0
    64a6:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
			effect_path_bitmap (1200,12,3);
    64aa:	80 eb       	ldi	r24, 0xB0	; 176
    64ac:	94 e0       	ldi	r25, 0x04	; 4
    64ae:	6c e0       	ldi	r22, 0x0C	; 12
    64b0:	43 e0       	ldi	r20, 0x03	; 3
    64b2:	50 e0       	ldi	r21, 0x00	; 0
    64b4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <effect_path_bitmap>
if (xit == 1) {goto skipfish;}
    64b8:	80 91 b3 01 	lds	r24, 0x01B3
    64bc:	90 91 b4 01 	lds	r25, 0x01B4
    64c0:	01 97       	sbiw	r24, 0x01	; 1
    64c2:	09 f4       	brne	.+2      	; 0x64c6 <launch_effect+0x1d4>
    64c4:	40 c0       	rjmp	.+128    	; 0x6546 <launch_effect+0x254>
			effect_path_bitmap (900,12,3);
    64c6:	84 e8       	ldi	r24, 0x84	; 132
    64c8:	93 e0       	ldi	r25, 0x03	; 3
    64ca:	6c e0       	ldi	r22, 0x0C	; 12
    64cc:	43 e0       	ldi	r20, 0x03	; 3
    64ce:	50 e0       	ldi	r21, 0x00	; 0
    64d0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <effect_path_bitmap>
if (xit == 1) {goto skipfish;}
    64d4:	80 91 b3 01 	lds	r24, 0x01B3
    64d8:	90 91 b4 01 	lds	r25, 0x01B4
    64dc:	01 97       	sbiw	r24, 0x01	; 1
    64de:	99 f1       	breq	.+102    	; 0x6546 <launch_effect+0x254>
			effect_path_bitmap (600,12,3);
    64e0:	88 e5       	ldi	r24, 0x58	; 88
    64e2:	92 e0       	ldi	r25, 0x02	; 2
    64e4:	6c e0       	ldi	r22, 0x0C	; 12
    64e6:	43 e0       	ldi	r20, 0x03	; 3
    64e8:	50 e0       	ldi	r21, 0x00	; 0
    64ea:	0e 94 71 10 	call	0x20e2	; 0x20e2 <effect_path_bitmap>
if (xit == 1) {goto skipfish;}
    64ee:	80 91 b3 01 	lds	r24, 0x01B3
    64f2:	90 91 b4 01 	lds	r25, 0x01B4
    64f6:	01 97       	sbiw	r24, 0x01	; 1
    64f8:	31 f1       	breq	.+76     	; 0x6546 <launch_effect+0x254>
			effect_path_bitmap (300,12,3);
    64fa:	8c e2       	ldi	r24, 0x2C	; 44
    64fc:	91 e0       	ldi	r25, 0x01	; 1
    64fe:	6c e0       	ldi	r22, 0x0C	; 12
    6500:	43 e0       	ldi	r20, 0x03	; 3
    6502:	50 e0       	ldi	r21, 0x00	; 0
    6504:	0e 94 71 10 	call	0x20e2	; 0x20e2 <effect_path_bitmap>
if (xit == 1) {goto skipfish;}
    6508:	80 91 b3 01 	lds	r24, 0x01B3
    650c:	90 91 b4 01 	lds	r25, 0x01B4
    6510:	01 97       	sbiw	r24, 0x01	; 1
    6512:	c9 f0       	breq	.+50     	; 0x6546 <launch_effect+0x254>
			effect_path_bitmap (100,12,3);
    6514:	84 e6       	ldi	r24, 0x64	; 100
    6516:	90 e0       	ldi	r25, 0x00	; 0
    6518:	6c e0       	ldi	r22, 0x0C	; 12
    651a:	43 e0       	ldi	r20, 0x03	; 3
    651c:	50 e0       	ldi	r21, 0x00	; 0
    651e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <effect_path_bitmap>
if (xit == 1) {goto skipfish;}
    6522:	80 91 b3 01 	lds	r24, 0x01B3
    6526:	90 91 b4 01 	lds	r25, 0x01B4
    652a:	01 97       	sbiw	r24, 0x01	; 1
    652c:	61 f0       	breq	.+24     	; 0x6546 <launch_effect+0x254>
			effect_path_bitmap (10,12,3);
    652e:	8a e0       	ldi	r24, 0x0A	; 10
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	6c e0       	ldi	r22, 0x0C	; 12
    6534:	43 e0       	ldi	r20, 0x03	; 3
    6536:	50 e0       	ldi	r21, 0x00	; 0
    6538:	0e 94 71 10 	call	0x20e2	; 0x20e2 <effect_path_bitmap>
    653c:	04 c0       	rjmp	.+8      	; 0x6546 <launch_effect+0x254>
skipfish:
while (xit == 1) {delay_ms (500);}
    653e:	84 ef       	ldi	r24, 0xF4	; 244
    6540:	91 e0       	ldi	r25, 0x01	; 1
    6542:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6546:	80 91 b3 01 	lds	r24, 0x01B3
    654a:	90 91 b4 01 	lds	r25, 0x01B4
    654e:	01 97       	sbiw	r24, 0x01	; 1
    6550:	b1 f3       	breq	.-20     	; 0x653e <launch_effect+0x24c>
			squarespiral (300, 500);
    6552:	8c e2       	ldi	r24, 0x2C	; 44
    6554:	91 e0       	ldi	r25, 0x01	; 1
    6556:	64 ef       	ldi	r22, 0xF4	; 244
    6558:	71 e0       	ldi	r23, 0x01	; 1
    655a:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <squarespiral>
    655e:	04 c0       	rjmp	.+8      	; 0x6568 <launch_effect+0x276>
while (xit == 1) {delay_ms (500);}
    6560:	84 ef       	ldi	r24, 0xF4	; 244
    6562:	91 e0       	ldi	r25, 0x01	; 1
    6564:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6568:	80 91 b3 01 	lds	r24, 0x01B3
    656c:	90 91 b4 01 	lds	r25, 0x01B4
    6570:	01 97       	sbiw	r24, 0x01	; 1
    6572:	b1 f3       	breq	.-20     	; 0x6560 <launch_effect+0x26e>
			squarespiral2 (200, 900);
    6574:	88 ec       	ldi	r24, 0xC8	; 200
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	64 e8       	ldi	r22, 0x84	; 132
    657a:	73 e0       	ldi	r23, 0x03	; 3
    657c:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <squarespiral2>
    6580:	04 c0       	rjmp	.+8      	; 0x658a <launch_effect+0x298>
while (xit == 1) {delay_ms (500);}
    6582:	84 ef       	ldi	r24, 0xF4	; 244
    6584:	91 e0       	ldi	r25, 0x01	; 1
    6586:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    658a:	80 91 b3 01 	lds	r24, 0x01B3
    658e:	90 91 b4 01 	lds	r25, 0x01B4
    6592:	01 97       	sbiw	r24, 0x01	; 1
    6594:	b1 f3       	breq	.-20     	; 0x6582 <launch_effect+0x290>
			side_ripples (300, 500);
    6596:	8c e2       	ldi	r24, 0x2C	; 44
    6598:	91 e0       	ldi	r25, 0x01	; 1
    659a:	64 ef       	ldi	r22, 0xF4	; 244
    659c:	71 e0       	ldi	r23, 0x01	; 1
    659e:	0e 94 4f 23 	call	0x469e	; 0x469e <side_ripples>
    65a2:	04 c0       	rjmp	.+8      	; 0x65ac <launch_effect+0x2ba>
while (xit == 1) {delay_ms (500);}
    65a4:	84 ef       	ldi	r24, 0xF4	; 244
    65a6:	91 e0       	ldi	r25, 0x01	; 1
    65a8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    65ac:	80 91 b3 01 	lds	r24, 0x01B3
    65b0:	90 91 b4 01 	lds	r25, 0x01B4
    65b4:	01 97       	sbiw	r24, 0x01	; 1
    65b6:	b1 f3       	breq	.-20     	; 0x65a4 <launch_effect+0x2b2>
			quad_ripples (600,300);
    65b8:	88 e5       	ldi	r24, 0x58	; 88
    65ba:	92 e0       	ldi	r25, 0x02	; 2
    65bc:	6c e2       	ldi	r22, 0x2C	; 44
    65be:	71 e0       	ldi	r23, 0x01	; 1
    65c0:	0e 94 63 21 	call	0x42c6	; 0x42c6 <quad_ripples>
    65c4:	04 c0       	rjmp	.+8      	; 0x65ce <launch_effect+0x2dc>
while (xit == 1) {delay_ms (500);}
    65c6:	84 ef       	ldi	r24, 0xF4	; 244
    65c8:	91 e0       	ldi	r25, 0x01	; 1
    65ca:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    65ce:	80 91 b3 01 	lds	r24, 0x01B3
    65d2:	90 91 b4 01 	lds	r25, 0x01B4
    65d6:	01 97       	sbiw	r24, 0x01	; 1
    65d8:	b1 f3       	breq	.-20     	; 0x65c6 <launch_effect+0x2d4>
    65da:	71 c4       	rjmp	.+2274   	; 0x6ebe <launch_effect+0xbcc>
			break;

		case 3:
			effect_path_bitmap (700,6,4);
    65dc:	8c eb       	ldi	r24, 0xBC	; 188
    65de:	92 e0       	ldi	r25, 0x02	; 2
    65e0:	66 e0       	ldi	r22, 0x06	; 6
    65e2:	44 e0       	ldi	r20, 0x04	; 4
    65e4:	50 e0       	ldi	r21, 0x00	; 0
    65e6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <effect_path_bitmap>
    65ea:	04 c0       	rjmp	.+8      	; 0x65f4 <launch_effect+0x302>
while (xit == 1) {delay_ms (500);}
    65ec:	84 ef       	ldi	r24, 0xF4	; 244
    65ee:	91 e0       	ldi	r25, 0x01	; 1
    65f0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    65f4:	80 91 b3 01 	lds	r24, 0x01B3
    65f8:	90 91 b4 01 	lds	r25, 0x01B4
    65fc:	01 97       	sbiw	r24, 0x01	; 1
    65fe:	b1 f3       	breq	.-20     	; 0x65ec <launch_effect+0x2fa>
    6600:	5e c4       	rjmp	.+2236   	; 0x6ebe <launch_effect+0xbcc>
// effect_stringfly2 ("THE END");
			break;

		case 4:
			sendvoxels_rand_z(20,220,2000);
    6602:	84 e1       	ldi	r24, 0x14	; 20
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	6c ed       	ldi	r22, 0xDC	; 220
    6608:	70 e0       	ldi	r23, 0x00	; 0
    660a:	40 ed       	ldi	r20, 0xD0	; 208
    660c:	57 e0       	ldi	r21, 0x07	; 7
    660e:	0e 94 28 19 	call	0x3250	; 0x3250 <sendvoxels_rand_z>
    6612:	04 c0       	rjmp	.+8      	; 0x661c <launch_effect+0x32a>
while (xit == 1) {delay_ms (500);}
    6614:	84 ef       	ldi	r24, 0xF4	; 244
    6616:	91 e0       	ldi	r25, 0x01	; 1
    6618:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    661c:	80 91 b3 01 	lds	r24, 0x01B3
    6620:	90 91 b4 01 	lds	r25, 0x01B4
    6624:	01 97       	sbiw	r24, 0x01	; 1
    6626:	b1 f3       	breq	.-20     	; 0x6614 <launch_effect+0x322>
    6628:	4a c4       	rjmp	.+2196   	; 0x6ebe <launch_effect+0xbcc>
			break;
				
		case 5:
			effect_random_filler(5,1);
    662a:	85 e0       	ldi	r24, 0x05	; 5
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	61 e0       	ldi	r22, 0x01	; 1
    6630:	70 e0       	ldi	r23, 0x00	; 0
    6632:	0e 94 be 18 	call	0x317c	; 0x317c <effect_random_filler>
if (xit == 1) {goto skipfiller;}
    6636:	80 91 b3 01 	lds	r24, 0x01B3
    663a:	90 91 b4 01 	lds	r25, 0x01B4
    663e:	01 97       	sbiw	r24, 0x01	; 1
    6640:	19 f1       	breq	.+70     	; 0x6688 <launch_effect+0x396>
			effect_random_filler(5,0);
    6642:	85 e0       	ldi	r24, 0x05	; 5
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	60 e0       	ldi	r22, 0x00	; 0
    6648:	70 e0       	ldi	r23, 0x00	; 0
    664a:	0e 94 be 18 	call	0x317c	; 0x317c <effect_random_filler>
if (xit == 1) {goto skipfiller;}
    664e:	80 91 b3 01 	lds	r24, 0x01B3
    6652:	90 91 b4 01 	lds	r25, 0x01B4
    6656:	01 97       	sbiw	r24, 0x01	; 1
    6658:	b9 f0       	breq	.+46     	; 0x6688 <launch_effect+0x396>
			effect_random_filler(5,1);
    665a:	85 e0       	ldi	r24, 0x05	; 5
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	61 e0       	ldi	r22, 0x01	; 1
    6660:	70 e0       	ldi	r23, 0x00	; 0
    6662:	0e 94 be 18 	call	0x317c	; 0x317c <effect_random_filler>
if (xit == 1) {goto skipfiller;}
    6666:	80 91 b3 01 	lds	r24, 0x01B3
    666a:	90 91 b4 01 	lds	r25, 0x01B4
    666e:	01 97       	sbiw	r24, 0x01	; 1
    6670:	59 f0       	breq	.+22     	; 0x6688 <launch_effect+0x396>
			effect_random_filler(5,0);
    6672:	85 e0       	ldi	r24, 0x05	; 5
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	60 e0       	ldi	r22, 0x00	; 0
    6678:	70 e0       	ldi	r23, 0x00	; 0
    667a:	0e 94 be 18 	call	0x317c	; 0x317c <effect_random_filler>
    667e:	04 c0       	rjmp	.+8      	; 0x6688 <launch_effect+0x396>
skipfiller:
while (xit == 1) {delay_ms (500);}
    6680:	84 ef       	ldi	r24, 0xF4	; 244
    6682:	91 e0       	ldi	r25, 0x01	; 1
    6684:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6688:	80 91 b3 01 	lds	r24, 0x01B3
    668c:	90 91 b4 01 	lds	r25, 0x01B4
    6690:	01 97       	sbiw	r24, 0x01	; 1
    6692:	b1 f3       	breq	.-20     	; 0x6680 <launch_effect+0x38e>
    6694:	14 c4       	rjmp	.+2088   	; 0x6ebe <launch_effect+0xbcc>
			break;
				
		case 6:
			effect_z_updown(20,1000);
    6696:	84 e1       	ldi	r24, 0x14	; 20
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	68 ee       	ldi	r22, 0xE8	; 232
    669c:	73 e0       	ldi	r23, 0x03	; 3
    669e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <effect_z_updown>
    66a2:	04 c0       	rjmp	.+8      	; 0x66ac <launch_effect+0x3ba>
while (xit == 1) {delay_ms (500);}
    66a4:	84 ef       	ldi	r24, 0xF4	; 244
    66a6:	91 e0       	ldi	r25, 0x01	; 1
    66a8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    66ac:	80 91 b3 01 	lds	r24, 0x01B3
    66b0:	90 91 b4 01 	lds	r25, 0x01B4
    66b4:	01 97       	sbiw	r24, 0x01	; 1
    66b6:	b1 f3       	breq	.-20     	; 0x66a4 <launch_effect+0x3b2>
    66b8:	02 c4       	rjmp	.+2052   	; 0x6ebe <launch_effect+0xbcc>
			break;
				
		case 7:
			effect_wormsqueeze (2, AXIS_Z, -1, 100, 1000);
    66ba:	82 e0       	ldi	r24, 0x02	; 2
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	6a e7       	ldi	r22, 0x7A	; 122
    66c0:	70 e0       	ldi	r23, 0x00	; 0
    66c2:	4f ef       	ldi	r20, 0xFF	; 255
    66c4:	5f ef       	ldi	r21, 0xFF	; 255
    66c6:	24 e6       	ldi	r18, 0x64	; 100
    66c8:	30 e0       	ldi	r19, 0x00	; 0
    66ca:	08 ee       	ldi	r16, 0xE8	; 232
    66cc:	13 e0       	ldi	r17, 0x03	; 3
    66ce:	0e 94 01 1a 	call	0x3402	; 0x3402 <effect_wormsqueeze>
    66d2:	04 c0       	rjmp	.+8      	; 0x66dc <launch_effect+0x3ea>
while (xit == 1) {delay_ms (500);}
    66d4:	84 ef       	ldi	r24, 0xF4	; 244
    66d6:	91 e0       	ldi	r25, 0x01	; 1
    66d8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    66dc:	80 91 b3 01 	lds	r24, 0x01B3
    66e0:	90 91 b4 01 	lds	r25, 0x01B4
    66e4:	01 97       	sbiw	r24, 0x01	; 1
    66e6:	b1 f3       	breq	.-20     	; 0x66d4 <launch_effect+0x3e2>
    66e8:	ea c3       	rjmp	.+2004   	; 0x6ebe <launch_effect+0xbcc>
			break;
				
		case 8:
			effect_blinky2();
    66ea:	0e 94 a0 19 	call	0x3340	; 0x3340 <effect_blinky2>
    66ee:	04 c0       	rjmp	.+8      	; 0x66f8 <launch_effect+0x406>
while (xit == 1) {delay_ms (500);}
    66f0:	84 ef       	ldi	r24, 0xF4	; 244
    66f2:	91 e0       	ldi	r25, 0x01	; 1
    66f4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    66f8:	80 91 b3 01 	lds	r24, 0x01B3
    66fc:	90 91 b4 01 	lds	r25, 0x01B4
    6700:	01 97       	sbiw	r24, 0x01	; 1
    6702:	b1 f3       	breq	.-20     	; 0x66f0 <launch_effect+0x3fe>
    6704:	dc c3       	rjmp	.+1976   	; 0x6ebe <launch_effect+0xbcc>
			break;
		case 9:
			mirror_ripples(600,400);
    6706:	88 e5       	ldi	r24, 0x58	; 88
    6708:	92 e0       	ldi	r25, 0x02	; 2
    670a:	60 e9       	ldi	r22, 0x90	; 144
    670c:	71 e0       	ldi	r23, 0x01	; 1
    670e:	0e 94 6e 22 	call	0x44dc	; 0x44dc <mirror_ripples>
    6712:	04 c0       	rjmp	.+8      	; 0x671c <launch_effect+0x42a>
while (xit == 1) {delay_ms (500);}				
    6714:	84 ef       	ldi	r24, 0xF4	; 244
    6716:	91 e0       	ldi	r25, 0x01	; 1
    6718:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    671c:	80 91 b3 01 	lds	r24, 0x01B3
    6720:	90 91 b4 01 	lds	r25, 0x01B4
    6724:	01 97       	sbiw	r24, 0x01	; 1
    6726:	b1 f3       	breq	.-20     	; 0x6714 <launch_effect+0x422>
    6728:	00 ce       	rjmp	.-1024   	; 0x632a <launch_effect+0x38>
		case 10: 
            for (ii=0;ii<8;ii++)
			{
				effect_box_shrink_grow (1, ii%4, ii & 0x04, 450);
    672a:	b8 01       	movw	r22, r16
    672c:	63 70       	andi	r22, 0x03	; 3
    672e:	70 70       	andi	r23, 0x00	; 0
    6730:	a8 01       	movw	r20, r16
    6732:	44 70       	andi	r20, 0x04	; 4
    6734:	50 70       	andi	r21, 0x00	; 0
    6736:	81 e0       	ldi	r24, 0x01	; 1
    6738:	90 e0       	ldi	r25, 0x00	; 0
    673a:	22 ec       	ldi	r18, 0xC2	; 194
    673c:	31 e0       	ldi	r19, 0x01	; 1
    673e:	0e 94 1c 20 	call	0x4038	; 0x4038 <effect_box_shrink_grow>
    6742:	0f 5f       	subi	r16, 0xFF	; 255
    6744:	1f 4f       	sbci	r17, 0xFF	; 255
			break;
		case 9:
			mirror_ripples(600,400);
while (xit == 1) {delay_ms (500);}				
		case 10: 
            for (ii=0;ii<8;ii++)
    6746:	08 30       	cpi	r16, 0x08	; 8
    6748:	11 05       	cpc	r17, r1
    674a:	79 f7       	brne	.-34     	; 0x672a <launch_effect+0x438>
			{
				effect_box_shrink_grow (1, ii%4, ii & 0x04, 450);
			}
if (xit == 1) {goto skipwoop;}
    674c:	80 91 b3 01 	lds	r24, 0x01B3
    6750:	90 91 b4 01 	lds	r25, 0x01B4
    6754:	01 97       	sbiw	r24, 0x01	; 1
    6756:	79 f1       	breq	.+94     	; 0x67b6 <launch_effect+0x4c4>
			effect_box_woopwoop(800,0);
    6758:	80 e2       	ldi	r24, 0x20	; 32
    675a:	93 e0       	ldi	r25, 0x03	; 3
    675c:	60 e0       	ldi	r22, 0x00	; 0
    675e:	70 e0       	ldi	r23, 0x00	; 0
    6760:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <effect_box_woopwoop>
			if (xit == 1) {goto skipwoop;}
    6764:	80 91 b3 01 	lds	r24, 0x01B3
    6768:	90 91 b4 01 	lds	r25, 0x01B4
    676c:	01 97       	sbiw	r24, 0x01	; 1
    676e:	19 f1       	breq	.+70     	; 0x67b6 <launch_effect+0x4c4>
			effect_box_woopwoop(800,1);
    6770:	80 e2       	ldi	r24, 0x20	; 32
    6772:	93 e0       	ldi	r25, 0x03	; 3
    6774:	61 e0       	ldi	r22, 0x01	; 1
    6776:	70 e0       	ldi	r23, 0x00	; 0
    6778:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <effect_box_woopwoop>
			if (xit == 1) {goto skipwoop;}
    677c:	80 91 b3 01 	lds	r24, 0x01B3
    6780:	90 91 b4 01 	lds	r25, 0x01B4
    6784:	01 97       	sbiw	r24, 0x01	; 1
    6786:	b9 f0       	breq	.+46     	; 0x67b6 <launch_effect+0x4c4>
			effect_box_woopwoop(800,0);
    6788:	80 e2       	ldi	r24, 0x20	; 32
    678a:	93 e0       	ldi	r25, 0x03	; 3
    678c:	60 e0       	ldi	r22, 0x00	; 0
    678e:	70 e0       	ldi	r23, 0x00	; 0
    6790:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <effect_box_woopwoop>
			if (xit == 1) {goto skipwoop;}
    6794:	80 91 b3 01 	lds	r24, 0x01B3
    6798:	90 91 b4 01 	lds	r25, 0x01B4
    679c:	01 97       	sbiw	r24, 0x01	; 1
    679e:	59 f0       	breq	.+22     	; 0x67b6 <launch_effect+0x4c4>
			effect_box_woopwoop(800,1);
    67a0:	80 e2       	ldi	r24, 0x20	; 32
    67a2:	93 e0       	ldi	r25, 0x03	; 3
    67a4:	61 e0       	ldi	r22, 0x01	; 1
    67a6:	70 e0       	ldi	r23, 0x00	; 0
    67a8:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <effect_box_woopwoop>
    67ac:	04 c0       	rjmp	.+8      	; 0x67b6 <launch_effect+0x4c4>
skipwoop:
while (xit == 1) {delay_ms (500);}
    67ae:	84 ef       	ldi	r24, 0xF4	; 244
    67b0:	91 e0       	ldi	r25, 0x01	; 1
    67b2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    67b6:	80 91 b3 01 	lds	r24, 0x01B3
    67ba:	90 91 b4 01 	lds	r25, 0x01B4
    67be:	01 97       	sbiw	r24, 0x01	; 1
    67c0:	b1 f3       	breq	.-20     	; 0x67ae <launch_effect+0x4bc>
    67c2:	7d c3       	rjmp	.+1786   	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 11:
			effect_planboing2 (AXIS_Z, 600);
    67c4:	8a e7       	ldi	r24, 0x7A	; 122
    67c6:	90 e0       	ldi	r25, 0x00	; 0
    67c8:	68 e5       	ldi	r22, 0x58	; 88
    67ca:	72 e0       	ldi	r23, 0x02	; 2
    67cc:	0e 94 b4 20 	call	0x4168	; 0x4168 <effect_planboing2>
if (xit == 1) {goto skipboing;}
    67d0:	80 91 b3 01 	lds	r24, 0x01B3
    67d4:	90 91 b4 01 	lds	r25, 0x01B4
    67d8:	01 97       	sbiw	r24, 0x01	; 1
    67da:	09 f4       	brne	.+2      	; 0x67de <launch_effect+0x4ec>
    67dc:	89 c0       	rjmp	.+274    	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing2 (AXIS_X, 600);
    67de:	88 e7       	ldi	r24, 0x78	; 120
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	68 e5       	ldi	r22, 0x58	; 88
    67e4:	72 e0       	ldi	r23, 0x02	; 2
    67e6:	0e 94 b4 20 	call	0x4168	; 0x4168 <effect_planboing2>
if (xit == 1) {goto skipboing;}
    67ea:	80 91 b3 01 	lds	r24, 0x01B3
    67ee:	90 91 b4 01 	lds	r25, 0x01B4
    67f2:	01 97       	sbiw	r24, 0x01	; 1
    67f4:	09 f4       	brne	.+2      	; 0x67f8 <launch_effect+0x506>
    67f6:	7c c0       	rjmp	.+248    	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing2 (AXIS_Y, 600);
    67f8:	89 e7       	ldi	r24, 0x79	; 121
    67fa:	90 e0       	ldi	r25, 0x00	; 0
    67fc:	68 e5       	ldi	r22, 0x58	; 88
    67fe:	72 e0       	ldi	r23, 0x02	; 2
    6800:	0e 94 b4 20 	call	0x4168	; 0x4168 <effect_planboing2>
if (xit == 1) {goto skipboing;}
    6804:	80 91 b3 01 	lds	r24, 0x01B3
    6808:	90 91 b4 01 	lds	r25, 0x01B4
    680c:	01 97       	sbiw	r24, 0x01	; 1
    680e:	09 f4       	brne	.+2      	; 0x6812 <launch_effect+0x520>
    6810:	6f c0       	rjmp	.+222    	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing2 (AXIS_Z, 600);
    6812:	8a e7       	ldi	r24, 0x7A	; 122
    6814:	90 e0       	ldi	r25, 0x00	; 0
    6816:	68 e5       	ldi	r22, 0x58	; 88
    6818:	72 e0       	ldi	r23, 0x02	; 2
    681a:	0e 94 b4 20 	call	0x4168	; 0x4168 <effect_planboing2>
if (xit == 1) {goto skipboing;}
    681e:	80 91 b3 01 	lds	r24, 0x01B3
    6822:	90 91 b4 01 	lds	r25, 0x01B4
    6826:	01 97       	sbiw	r24, 0x01	; 1
    6828:	09 f4       	brne	.+2      	; 0x682c <launch_effect+0x53a>
    682a:	62 c0       	rjmp	.+196    	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing2 (AXIS_X, 600);
    682c:	88 e7       	ldi	r24, 0x78	; 120
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	68 e5       	ldi	r22, 0x58	; 88
    6832:	72 e0       	ldi	r23, 0x02	; 2
    6834:	0e 94 b4 20 	call	0x4168	; 0x4168 <effect_planboing2>
if (xit == 1) {goto skipboing;}
    6838:	80 91 b3 01 	lds	r24, 0x01B3
    683c:	90 91 b4 01 	lds	r25, 0x01B4
    6840:	01 97       	sbiw	r24, 0x01	; 1
    6842:	09 f4       	brne	.+2      	; 0x6846 <launch_effect+0x554>
    6844:	55 c0       	rjmp	.+170    	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing2 (AXIS_Y, 600);
    6846:	89 e7       	ldi	r24, 0x79	; 121
    6848:	90 e0       	ldi	r25, 0x00	; 0
    684a:	68 e5       	ldi	r22, 0x58	; 88
    684c:	72 e0       	ldi	r23, 0x02	; 2
    684e:	0e 94 b4 20 	call	0x4168	; 0x4168 <effect_planboing2>
if (xit == 1) {goto skipboing;}
    6852:	80 91 b3 01 	lds	r24, 0x01B3
    6856:	90 91 b4 01 	lds	r25, 0x01B4
    685a:	01 97       	sbiw	r24, 0x01	; 1
    685c:	09 f4       	brne	.+2      	; 0x6860 <launch_effect+0x56e>
    685e:	48 c0       	rjmp	.+144    	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing (AXIS_Z, 600);
    6860:	8a e7       	ldi	r24, 0x7A	; 122
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	68 e5       	ldi	r22, 0x58	; 88
    6866:	72 e0       	ldi	r23, 0x02	; 2
    6868:	0e 94 da 20 	call	0x41b4	; 0x41b4 <effect_planboing>
if (xit == 1) {goto skipboing;}
    686c:	80 91 b3 01 	lds	r24, 0x01B3
    6870:	90 91 b4 01 	lds	r25, 0x01B4
    6874:	01 97       	sbiw	r24, 0x01	; 1
    6876:	09 f4       	brne	.+2      	; 0x687a <launch_effect+0x588>
    6878:	3b c0       	rjmp	.+118    	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing (AXIS_X, 600);
    687a:	88 e7       	ldi	r24, 0x78	; 120
    687c:	90 e0       	ldi	r25, 0x00	; 0
    687e:	68 e5       	ldi	r22, 0x58	; 88
    6880:	72 e0       	ldi	r23, 0x02	; 2
    6882:	0e 94 da 20 	call	0x41b4	; 0x41b4 <effect_planboing>
if (xit == 1) {goto skipboing;}
    6886:	80 91 b3 01 	lds	r24, 0x01B3
    688a:	90 91 b4 01 	lds	r25, 0x01B4
    688e:	01 97       	sbiw	r24, 0x01	; 1
    6890:	79 f1       	breq	.+94     	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing (AXIS_Y, 600);
    6892:	89 e7       	ldi	r24, 0x79	; 121
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	68 e5       	ldi	r22, 0x58	; 88
    6898:	72 e0       	ldi	r23, 0x02	; 2
    689a:	0e 94 da 20 	call	0x41b4	; 0x41b4 <effect_planboing>
if (xit == 1) {goto skipboing;}
    689e:	80 91 b3 01 	lds	r24, 0x01B3
    68a2:	90 91 b4 01 	lds	r25, 0x01B4
    68a6:	01 97       	sbiw	r24, 0x01	; 1
    68a8:	19 f1       	breq	.+70     	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing (AXIS_Z, 600);
    68aa:	8a e7       	ldi	r24, 0x7A	; 122
    68ac:	90 e0       	ldi	r25, 0x00	; 0
    68ae:	68 e5       	ldi	r22, 0x58	; 88
    68b0:	72 e0       	ldi	r23, 0x02	; 2
    68b2:	0e 94 da 20 	call	0x41b4	; 0x41b4 <effect_planboing>
if (xit == 1) {goto skipboing;}
    68b6:	80 91 b3 01 	lds	r24, 0x01B3
    68ba:	90 91 b4 01 	lds	r25, 0x01B4
    68be:	01 97       	sbiw	r24, 0x01	; 1
    68c0:	b9 f0       	breq	.+46     	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing (AXIS_X, 600);
    68c2:	88 e7       	ldi	r24, 0x78	; 120
    68c4:	90 e0       	ldi	r25, 0x00	; 0
    68c6:	68 e5       	ldi	r22, 0x58	; 88
    68c8:	72 e0       	ldi	r23, 0x02	; 2
    68ca:	0e 94 da 20 	call	0x41b4	; 0x41b4 <effect_planboing>
if (xit == 1) {goto skipboing;}
    68ce:	80 91 b3 01 	lds	r24, 0x01B3
    68d2:	90 91 b4 01 	lds	r25, 0x01B4
    68d6:	01 97       	sbiw	r24, 0x01	; 1
    68d8:	59 f0       	breq	.+22     	; 0x68f0 <launch_effect+0x5fe>
			effect_planboing (AXIS_Y, 600);
    68da:	89 e7       	ldi	r24, 0x79	; 121
    68dc:	90 e0       	ldi	r25, 0x00	; 0
    68de:	68 e5       	ldi	r22, 0x58	; 88
    68e0:	72 e0       	ldi	r23, 0x02	; 2
    68e2:	0e 94 da 20 	call	0x41b4	; 0x41b4 <effect_planboing>
    68e6:	04 c0       	rjmp	.+8      	; 0x68f0 <launch_effect+0x5fe>
skipboing:
while (xit == 1) {delay_ms (500);}
    68e8:	84 ef       	ldi	r24, 0xF4	; 244
    68ea:	91 e0       	ldi	r25, 0x01	; 1
    68ec:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    68f0:	80 91 b3 01 	lds	r24, 0x01B3
    68f4:	90 91 b4 01 	lds	r25, 0x01B4
    68f8:	01 97       	sbiw	r24, 0x01	; 1
    68fa:	b1 f3       	breq	.-20     	; 0x68e8 <launch_effect+0x5f6>
    68fc:	d8 c2       	rjmp	.+1456   	; 0x6eae <launch_effect+0xbbc>
			fill(0x00);
			break;
		
		case 12:
			fill(0x00);
    68fe:	80 e0       	ldi	r24, 0x00	; 0
    6900:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
			effect_telcstairs(0,800,0xff);
    6904:	80 e0       	ldi	r24, 0x00	; 0
    6906:	90 e0       	ldi	r25, 0x00	; 0
    6908:	60 e2       	ldi	r22, 0x20	; 32
    690a:	73 e0       	ldi	r23, 0x03	; 3
    690c:	4f ef       	ldi	r20, 0xFF	; 255
    690e:	50 e0       	ldi	r21, 0x00	; 0
    6910:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <effect_telcstairs>
			effect_telcstairs(0,800,0x00);
    6914:	80 e0       	ldi	r24, 0x00	; 0
    6916:	90 e0       	ldi	r25, 0x00	; 0
    6918:	60 e2       	ldi	r22, 0x20	; 32
    691a:	73 e0       	ldi	r23, 0x03	; 3
    691c:	40 e0       	ldi	r20, 0x00	; 0
    691e:	50 e0       	ldi	r21, 0x00	; 0
    6920:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    6924:	81 e0       	ldi	r24, 0x01	; 1
    6926:	90 e0       	ldi	r25, 0x00	; 0
    6928:	60 e2       	ldi	r22, 0x20	; 32
    692a:	73 e0       	ldi	r23, 0x03	; 3
    692c:	4f ef       	ldi	r20, 0xFF	; 255
    692e:	50 e0       	ldi	r21, 0x00	; 0
    6930:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <effect_telcstairs>
			effect_telcstairs(1,800,0x00);
    6934:	81 e0       	ldi	r24, 0x01	; 1
    6936:	90 e0       	ldi	r25, 0x00	; 0
    6938:	60 e2       	ldi	r22, 0x20	; 32
    693a:	73 e0       	ldi	r23, 0x03	; 3
    693c:	40 e0       	ldi	r20, 0x00	; 0
    693e:	50 e0       	ldi	r21, 0x00	; 0
    6940:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <effect_telcstairs>
    6944:	bc c2       	rjmp	.+1400   	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 13:
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    6946:	8a e7       	ldi	r24, 0x7A	; 122
    6948:	66 e2       	ldi	r22, 0x26	; 38
    694a:	72 e0       	ldi	r23, 0x02	; 2
    694c:	48 e8       	ldi	r20, 0x88	; 136
    694e:	53 e1       	ldi	r21, 0x13	; 19
    6950:	20 e0       	ldi	r18, 0x00	; 0
    6952:	30 e0       	ldi	r19, 0x00	; 0
    6954:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <effect_axis_updown_randsuspend>
if (xit == 1) {goto skipdown;}
    6958:	80 91 b3 01 	lds	r24, 0x01B3
    695c:	90 91 b4 01 	lds	r25, 0x01B4
    6960:	01 97       	sbiw	r24, 0x01	; 1
    6962:	09 f4       	brne	.+2      	; 0x6966 <launch_effect+0x674>
    6964:	6a c0       	rjmp	.+212    	; 0x6a3a <launch_effect+0x748>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    6966:	8a e7       	ldi	r24, 0x7A	; 122
    6968:	66 e2       	ldi	r22, 0x26	; 38
    696a:	72 e0       	ldi	r23, 0x02	; 2
    696c:	48 e8       	ldi	r20, 0x88	; 136
    696e:	53 e1       	ldi	r21, 0x13	; 19
    6970:	21 e0       	ldi	r18, 0x01	; 1
    6972:	30 e0       	ldi	r19, 0x00	; 0
    6974:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <effect_axis_updown_randsuspend>
if (xit == 1) {goto skipdown;}
    6978:	80 91 b3 01 	lds	r24, 0x01B3
    697c:	90 91 b4 01 	lds	r25, 0x01B4
    6980:	01 97       	sbiw	r24, 0x01	; 1
    6982:	09 f4       	brne	.+2      	; 0x6986 <launch_effect+0x694>
    6984:	5a c0       	rjmp	.+180    	; 0x6a3a <launch_effect+0x748>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    6986:	8a e7       	ldi	r24, 0x7A	; 122
    6988:	66 e2       	ldi	r22, 0x26	; 38
    698a:	72 e0       	ldi	r23, 0x02	; 2
    698c:	48 e8       	ldi	r20, 0x88	; 136
    698e:	53 e1       	ldi	r21, 0x13	; 19
    6990:	20 e0       	ldi	r18, 0x00	; 0
    6992:	30 e0       	ldi	r19, 0x00	; 0
    6994:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <effect_axis_updown_randsuspend>
if (xit == 1) {goto skipdown;}
    6998:	80 91 b3 01 	lds	r24, 0x01B3
    699c:	90 91 b4 01 	lds	r25, 0x01B4
    69a0:	01 97       	sbiw	r24, 0x01	; 1
    69a2:	09 f4       	brne	.+2      	; 0x69a6 <launch_effect+0x6b4>
    69a4:	4a c0       	rjmp	.+148    	; 0x6a3a <launch_effect+0x748>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    69a6:	8a e7       	ldi	r24, 0x7A	; 122
    69a8:	66 e2       	ldi	r22, 0x26	; 38
    69aa:	72 e0       	ldi	r23, 0x02	; 2
    69ac:	48 e8       	ldi	r20, 0x88	; 136
    69ae:	53 e1       	ldi	r21, 0x13	; 19
    69b0:	21 e0       	ldi	r18, 0x01	; 1
    69b2:	30 e0       	ldi	r19, 0x00	; 0
    69b4:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <effect_axis_updown_randsuspend>
if (xit == 1) {goto skipdown;}
    69b8:	80 91 b3 01 	lds	r24, 0x01B3
    69bc:	90 91 b4 01 	lds	r25, 0x01B4
    69c0:	01 97       	sbiw	r24, 0x01	; 1
    69c2:	d9 f1       	breq	.+118    	; 0x6a3a <launch_effect+0x748>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,0);
    69c4:	88 e7       	ldi	r24, 0x78	; 120
    69c6:	66 e2       	ldi	r22, 0x26	; 38
    69c8:	72 e0       	ldi	r23, 0x02	; 2
    69ca:	48 e8       	ldi	r20, 0x88	; 136
    69cc:	53 e1       	ldi	r21, 0x13	; 19
    69ce:	20 e0       	ldi	r18, 0x00	; 0
    69d0:	30 e0       	ldi	r19, 0x00	; 0
    69d2:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <effect_axis_updown_randsuspend>
if (xit == 1) {goto skipdown;}
    69d6:	80 91 b3 01 	lds	r24, 0x01B3
    69da:	90 91 b4 01 	lds	r25, 0x01B4
    69de:	01 97       	sbiw	r24, 0x01	; 1
    69e0:	61 f1       	breq	.+88     	; 0x6a3a <launch_effect+0x748>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,1);
    69e2:	88 e7       	ldi	r24, 0x78	; 120
    69e4:	66 e2       	ldi	r22, 0x26	; 38
    69e6:	72 e0       	ldi	r23, 0x02	; 2
    69e8:	48 e8       	ldi	r20, 0x88	; 136
    69ea:	53 e1       	ldi	r21, 0x13	; 19
    69ec:	21 e0       	ldi	r18, 0x01	; 1
    69ee:	30 e0       	ldi	r19, 0x00	; 0
    69f0:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <effect_axis_updown_randsuspend>
if (xit == 1) {goto skipdown;}
    69f4:	80 91 b3 01 	lds	r24, 0x01B3
    69f8:	90 91 b4 01 	lds	r25, 0x01B4
    69fc:	01 97       	sbiw	r24, 0x01	; 1
    69fe:	e9 f0       	breq	.+58     	; 0x6a3a <launch_effect+0x748>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,0);
    6a00:	89 e7       	ldi	r24, 0x79	; 121
    6a02:	66 e2       	ldi	r22, 0x26	; 38
    6a04:	72 e0       	ldi	r23, 0x02	; 2
    6a06:	48 e8       	ldi	r20, 0x88	; 136
    6a08:	53 e1       	ldi	r21, 0x13	; 19
    6a0a:	20 e0       	ldi	r18, 0x00	; 0
    6a0c:	30 e0       	ldi	r19, 0x00	; 0
    6a0e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <effect_axis_updown_randsuspend>
if (xit == 1) {goto skipdown;}
    6a12:	80 91 b3 01 	lds	r24, 0x01B3
    6a16:	90 91 b4 01 	lds	r25, 0x01B4
    6a1a:	01 97       	sbiw	r24, 0x01	; 1
    6a1c:	71 f0       	breq	.+28     	; 0x6a3a <launch_effect+0x748>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,1);
    6a1e:	89 e7       	ldi	r24, 0x79	; 121
    6a20:	66 e2       	ldi	r22, 0x26	; 38
    6a22:	72 e0       	ldi	r23, 0x02	; 2
    6a24:	48 e8       	ldi	r20, 0x88	; 136
    6a26:	53 e1       	ldi	r21, 0x13	; 19
    6a28:	21 e0       	ldi	r18, 0x01	; 1
    6a2a:	30 e0       	ldi	r19, 0x00	; 0
    6a2c:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <effect_axis_updown_randsuspend>
    6a30:	04 c0       	rjmp	.+8      	; 0x6a3a <launch_effect+0x748>
skipdown:
while (xit == 1) {delay_ms (500);}
    6a32:	84 ef       	ldi	r24, 0xF4	; 244
    6a34:	91 e0       	ldi	r25, 0x01	; 1
    6a36:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6a3a:	80 91 b3 01 	lds	r24, 0x01B3
    6a3e:	90 91 b4 01 	lds	r25, 0x01B4
    6a42:	01 97       	sbiw	r24, 0x01	; 1
    6a44:	b1 f3       	breq	.-20     	; 0x6a32 <launch_effect+0x740>
    6a46:	3b c2       	rjmp	.+1142   	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 14:
			effect_loadbar(700);
    6a48:	8c eb       	ldi	r24, 0xBC	; 188
    6a4a:	92 e0       	ldi	r25, 0x02	; 2
    6a4c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <effect_loadbar>
    6a50:	04 c0       	rjmp	.+8      	; 0x6a5a <launch_effect+0x768>
while (xit == 1) {delay_ms (500);}
    6a52:	84 ef       	ldi	r24, 0xF4	; 244
    6a54:	91 e0       	ldi	r25, 0x01	; 1
    6a56:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6a5a:	80 91 b3 01 	lds	r24, 0x01B3
    6a5e:	90 91 b4 01 	lds	r25, 0x01B4
    6a62:	01 97       	sbiw	r24, 0x01	; 1
    6a64:	b1 f3       	breq	.-20     	; 0x6a52 <launch_effect+0x760>
    6a66:	2b c2       	rjmp	.+1110   	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 15:
			effect_wormsqueeze (1, AXIS_Z, 1, 100, 1000);
    6a68:	81 e0       	ldi	r24, 0x01	; 1
    6a6a:	90 e0       	ldi	r25, 0x00	; 0
    6a6c:	6a e7       	ldi	r22, 0x7A	; 122
    6a6e:	70 e0       	ldi	r23, 0x00	; 0
    6a70:	41 e0       	ldi	r20, 0x01	; 1
    6a72:	50 e0       	ldi	r21, 0x00	; 0
    6a74:	24 e6       	ldi	r18, 0x64	; 100
    6a76:	30 e0       	ldi	r19, 0x00	; 0
    6a78:	08 ee       	ldi	r16, 0xE8	; 232
    6a7a:	13 e0       	ldi	r17, 0x03	; 3
    6a7c:	0e 94 01 1a 	call	0x3402	; 0x3402 <effect_wormsqueeze>
    6a80:	04 c0       	rjmp	.+8      	; 0x6a8a <launch_effect+0x798>
while (xit == 1) {delay_ms (500);}
    6a82:	84 ef       	ldi	r24, 0xF4	; 244
    6a84:	91 e0       	ldi	r25, 0x01	; 1
    6a86:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6a8a:	80 91 b3 01 	lds	r24, 0x01B3
    6a8e:	90 91 b4 01 	lds	r25, 0x01B4
    6a92:	01 97       	sbiw	r24, 0x01	; 1
    6a94:	b1 f3       	breq	.-20     	; 0x6a82 <launch_effect+0x790>
    6a96:	13 c2       	rjmp	.+1062   	; 0x6ebe <launch_effect+0xbcc>
			break;
			
			
		case 16:
			effect_stringfly2("SUPERTECH-IT DOT COM    SUPERTECH-IT DOT COM");
    6a98:	8b e4       	ldi	r24, 0x4B	; 75
    6a9a:	91 e0       	ldi	r25, 0x01	; 1
    6a9c:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
    6aa0:	04 c0       	rjmp	.+8      	; 0x6aaa <launch_effect+0x7b8>
while (xit == 1) {delay_ms (500);}
    6aa2:	84 ef       	ldi	r24, 0xF4	; 244
    6aa4:	91 e0       	ldi	r25, 0x01	; 1
    6aa6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6aaa:	80 91 b3 01 	lds	r24, 0x01B3
    6aae:	90 91 b4 01 	lds	r25, 0x01B4
    6ab2:	01 97       	sbiw	r24, 0x01	; 1
    6ab4:	b1 f3       	breq	.-20     	; 0x6aa2 <launch_effect+0x7b0>
    6ab6:	03 c2       	rjmp	.+1030   	; 0x6ebe <launch_effect+0xbcc>
			break;
			
					
		case 17:
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,1);
    6ab8:	8a e7       	ldi	r24, 0x7A	; 122
    6aba:	60 e0       	ldi	r22, 0x00	; 0
    6abc:	70 e0       	ldi	r23, 0x00	; 0
    6abe:	48 ec       	ldi	r20, 0xC8	; 200
    6ac0:	50 e0       	ldi	r21, 0x00	; 0
    6ac2:	21 e0       	ldi	r18, 0x01	; 1
    6ac4:	30 e0       	ldi	r19, 0x00	; 0
    6ac6:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <effect_boxside_randsend_parallel>
			delay_ms(1500);
    6aca:	8c ed       	ldi	r24, 0xDC	; 220
    6acc:	95 e0       	ldi	r25, 0x05	; 5
    6ace:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,1);
    6ad2:	8a e7       	ldi	r24, 0x7A	; 122
    6ad4:	61 e0       	ldi	r22, 0x01	; 1
    6ad6:	70 e0       	ldi	r23, 0x00	; 0
    6ad8:	48 ec       	ldi	r20, 0xC8	; 200
    6ada:	50 e0       	ldi	r21, 0x00	; 0
    6adc:	21 e0       	ldi	r18, 0x01	; 1
    6ade:	30 e0       	ldi	r19, 0x00	; 0
    6ae0:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <effect_boxside_randsend_parallel>
			delay_ms(1500);
    6ae4:	8c ed       	ldi	r24, 0xDC	; 220
    6ae6:	95 e0       	ldi	r25, 0x05	; 5
    6ae8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,2);
    6aec:	8a e7       	ldi	r24, 0x7A	; 122
    6aee:	60 e0       	ldi	r22, 0x00	; 0
    6af0:	70 e0       	ldi	r23, 0x00	; 0
    6af2:	48 ec       	ldi	r20, 0xC8	; 200
    6af4:	50 e0       	ldi	r21, 0x00	; 0
    6af6:	22 e0       	ldi	r18, 0x02	; 2
    6af8:	30 e0       	ldi	r19, 0x00	; 0
    6afa:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <effect_boxside_randsend_parallel>
			delay_ms(1500);
    6afe:	8c ed       	ldi	r24, 0xDC	; 220
    6b00:	95 e0       	ldi	r25, 0x05	; 5
    6b02:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,2);
    6b06:	8a e7       	ldi	r24, 0x7A	; 122
    6b08:	61 e0       	ldi	r22, 0x01	; 1
    6b0a:	70 e0       	ldi	r23, 0x00	; 0
    6b0c:	48 ec       	ldi	r20, 0xC8	; 200
    6b0e:	50 e0       	ldi	r21, 0x00	; 0
    6b10:	22 e0       	ldi	r18, 0x02	; 2
    6b12:	30 e0       	ldi	r19, 0x00	; 0
    6b14:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <effect_boxside_randsend_parallel>
			delay_ms(1500);
    6b18:	8c ed       	ldi	r24, 0xDC	; 220
    6b1a:	95 e0       	ldi	r25, 0x05	; 5
    6b1c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Y, 0 , 200,1);
    6b20:	89 e7       	ldi	r24, 0x79	; 121
    6b22:	60 e0       	ldi	r22, 0x00	; 0
    6b24:	70 e0       	ldi	r23, 0x00	; 0
    6b26:	48 ec       	ldi	r20, 0xC8	; 200
    6b28:	50 e0       	ldi	r21, 0x00	; 0
    6b2a:	21 e0       	ldi	r18, 0x01	; 1
    6b2c:	30 e0       	ldi	r19, 0x00	; 0
    6b2e:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <effect_boxside_randsend_parallel>
			delay_ms(1500);
    6b32:	8c ed       	ldi	r24, 0xDC	; 220
    6b34:	95 e0       	ldi	r25, 0x05	; 5
    6b36:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Y, 1 , 200,1);
    6b3a:	89 e7       	ldi	r24, 0x79	; 121
    6b3c:	61 e0       	ldi	r22, 0x01	; 1
    6b3e:	70 e0       	ldi	r23, 0x00	; 0
    6b40:	48 ec       	ldi	r20, 0xC8	; 200
    6b42:	50 e0       	ldi	r21, 0x00	; 0
    6b44:	21 e0       	ldi	r18, 0x01	; 1
    6b46:	30 e0       	ldi	r19, 0x00	; 0
    6b48:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <effect_boxside_randsend_parallel>
			delay_ms(1500);
    6b4c:	8c ed       	ldi	r24, 0xDC	; 220
    6b4e:	95 e0       	ldi	r25, 0x05	; 5
    6b50:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6b54:	b4 c1       	rjmp	.+872    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 18:
			boingboing(250, 600, 0x01, 0x02);
    6b56:	8a ef       	ldi	r24, 0xFA	; 250
    6b58:	90 e0       	ldi	r25, 0x00	; 0
    6b5a:	68 e5       	ldi	r22, 0x58	; 88
    6b5c:	72 e0       	ldi	r23, 0x02	; 2
    6b5e:	41 e0       	ldi	r20, 0x01	; 1
    6b60:	22 e0       	ldi	r18, 0x02	; 2
    6b62:	0e 94 cd 1c 	call	0x399a	; 0x399a <boingboing>
    6b66:	04 c0       	rjmp	.+8      	; 0x6b70 <launch_effect+0x87e>
while (xit == 1) {delay_ms (500);}
    6b68:	84 ef       	ldi	r24, 0xF4	; 244
    6b6a:	91 e0       	ldi	r25, 0x01	; 1
    6b6c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6b70:	80 91 b3 01 	lds	r24, 0x01B3
    6b74:	90 91 b4 01 	lds	r25, 0x01B4
    6b78:	01 97       	sbiw	r24, 0x01	; 1
    6b7a:	b1 f3       	breq	.-20     	; 0x6b68 <launch_effect+0x876>
    6b7c:	a0 c1       	rjmp	.+832    	; 0x6ebe <launch_effect+0xbcc>
    6b7e:	c7 e0       	ldi	r28, 0x07	; 7
    6b80:	d0 e0       	ldi	r29, 0x00	; 0
			break;
			
		case 19:
for (i=7;i<9;i++){
	effect_smileyspin(4,1000,x);
    6b82:	84 e0       	ldi	r24, 0x04	; 4
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	68 ee       	ldi	r22, 0xE8	; 232
    6b88:	73 e0       	ldi	r23, 0x03	; 3
    6b8a:	40 e0       	ldi	r20, 0x00	; 0
    6b8c:	0e 94 ab 12 	call	0x2556	; 0x2556 <effect_smileyspin>
if (xit == 1) {i=9;}
    6b90:	80 91 b3 01 	lds	r24, 0x01B3
    6b94:	90 91 b4 01 	lds	r25, 0x01B4
    6b98:	01 97       	sbiw	r24, 0x01	; 1
    6b9a:	19 f4       	brne	.+6      	; 0x6ba2 <launch_effect+0x8b0>
    6b9c:	89 e0       	ldi	r24, 0x09	; 9
    6b9e:	90 e0       	ldi	r25, 0x00	; 0
    6ba0:	01 c0       	rjmp	.+2      	; 0x6ba4 <launch_effect+0x8b2>
    6ba2:	ce 01       	movw	r24, r28
    6ba4:	c8 e0       	ldi	r28, 0x08	; 8
    6ba6:	d0 e0       	ldi	r29, 0x00	; 0
			boingboing(250, 600, 0x01, 0x02);
while (xit == 1) {delay_ms (500);}
			break;
			
		case 19:
for (i=7;i<9;i++){
    6ba8:	07 97       	sbiw	r24, 0x07	; 7
    6baa:	59 f3       	breq	.-42     	; 0x6b82 <launch_effect+0x890>
    6bac:	04 c0       	rjmp	.+8      	; 0x6bb6 <launch_effect+0x8c4>
	effect_smileyspin(4,1000,x);
if (xit == 1) {i=9;}

			}
while (xit == 1) {delay_ms (500);}
    6bae:	84 ef       	ldi	r24, 0xF4	; 244
    6bb0:	91 e0       	ldi	r25, 0x01	; 1
    6bb2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6bb6:	80 91 b3 01 	lds	r24, 0x01B3
    6bba:	90 91 b4 01 	lds	r25, 0x01B4
    6bbe:	01 97       	sbiw	r24, 0x01	; 1
    6bc0:	b1 f3       	breq	.-20     	; 0x6bae <launch_effect+0x8bc>
    6bc2:	7d c1       	rjmp	.+762    	; 0x6ebe <launch_effect+0xbcc>

			break;
			
		case 20:
			effect_pathspiral(200,500);
    6bc4:	88 ec       	ldi	r24, 0xC8	; 200
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	64 ef       	ldi	r22, 0xF4	; 244
    6bca:	71 e0       	ldi	r23, 0x01	; 1
    6bcc:	0e 94 ef 11 	call	0x23de	; 0x23de <effect_pathspiral>
    6bd0:	04 c0       	rjmp	.+8      	; 0x6bda <launch_effect+0x8e8>
while (xit == 1) {delay_ms (500);}
    6bd2:	84 ef       	ldi	r24, 0xF4	; 244
    6bd4:	91 e0       	ldi	r25, 0x01	; 1
    6bd6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6bda:	80 91 b3 01 	lds	r24, 0x01B3
    6bde:	90 91 b4 01 	lds	r25, 0x01B4
    6be2:	01 97       	sbiw	r24, 0x01	; 1
    6be4:	b1 f3       	breq	.-20     	; 0x6bd2 <launch_effect+0x8e0>
    6be6:	6b c1       	rjmp	.+726    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 21:
			effect_path_bitmap(700,2,3);
    6be8:	8c eb       	ldi	r24, 0xBC	; 188
    6bea:	92 e0       	ldi	r25, 0x02	; 2
    6bec:	62 e0       	ldi	r22, 0x02	; 2
    6bee:	43 e0       	ldi	r20, 0x03	; 3
    6bf0:	50 e0       	ldi	r21, 0x00	; 0
    6bf2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <effect_path_bitmap>
    6bf6:	04 c0       	rjmp	.+8      	; 0x6c00 <launch_effect+0x90e>
while (xit == 1) {delay_ms (500);}
    6bf8:	84 ef       	ldi	r24, 0xF4	; 244
    6bfa:	91 e0       	ldi	r25, 0x01	; 1
    6bfc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6c00:	80 91 b3 01 	lds	r24, 0x01B3
    6c04:	90 91 b4 01 	lds	r25, 0x01B4
    6c08:	01 97       	sbiw	r24, 0x01	; 1
    6c0a:	b1 f3       	breq	.-20     	; 0x6bf8 <launch_effect+0x906>
    6c0c:	58 c1       	rjmp	.+688    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 22:
			effect_smileyspin(2,1000,1);
    6c0e:	82 e0       	ldi	r24, 0x02	; 2
    6c10:	90 e0       	ldi	r25, 0x00	; 0
    6c12:	68 ee       	ldi	r22, 0xE8	; 232
    6c14:	73 e0       	ldi	r23, 0x03	; 3
    6c16:	41 e0       	ldi	r20, 0x01	; 1
    6c18:	0e 94 ab 12 	call	0x2556	; 0x2556 <effect_smileyspin>
    6c1c:	04 c0       	rjmp	.+8      	; 0x6c26 <launch_effect+0x934>
while (xit == 1) {delay_ms (500);}
    6c1e:	84 ef       	ldi	r24, 0xF4	; 244
    6c20:	91 e0       	ldi	r25, 0x01	; 1
    6c22:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6c26:	80 91 b3 01 	lds	r24, 0x01B3
    6c2a:	90 91 b4 01 	lds	r25, 0x01B4
    6c2e:	01 97       	sbiw	r24, 0x01	; 1
    6c30:	b1 f3       	breq	.-20     	; 0x6c1e <launch_effect+0x92c>
    6c32:	45 c1       	rjmp	.+650    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 23:
			effect_path_text(1000,"SUPERTECH-IT DOT COM  SUPERTECH-IT DOT COM");
    6c34:	88 ee       	ldi	r24, 0xE8	; 232
    6c36:	93 e0       	ldi	r25, 0x03	; 3
    6c38:	68 e7       	ldi	r22, 0x78	; 120
    6c3a:	71 e0       	ldi	r23, 0x01	; 1
    6c3c:	0e 94 46 11 	call	0x228c	; 0x228c <effect_path_text>
    6c40:	04 c0       	rjmp	.+8      	; 0x6c4a <launch_effect+0x958>
			// effect_path_text(1000,"LED    CUBE");
			// effect_path_text(1000,"LED    CUBE");
while (xit == 1) {delay_ms (500);}
    6c42:	84 ef       	ldi	r24, 0xF4	; 244
    6c44:	91 e0       	ldi	r25, 0x01	; 1
    6c46:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6c4a:	80 91 b3 01 	lds	r24, 0x01B3
    6c4e:	90 91 b4 01 	lds	r25, 0x01B4
    6c52:	01 97       	sbiw	r24, 0x01	; 1
    6c54:	b1 f3       	breq	.-20     	; 0x6c42 <launch_effect+0x950>
    6c56:	33 c1       	rjmp	.+614    	; 0x6ebe <launch_effect+0xbcc>
			break;
	
		case 24:
			effect_rand_patharound(200,500);
    6c58:	88 ec       	ldi	r24, 0xC8	; 200
    6c5a:	90 e0       	ldi	r25, 0x00	; 0
    6c5c:	64 ef       	ldi	r22, 0xF4	; 244
    6c5e:	71 e0       	ldi	r23, 0x01	; 1
    6c60:	0e 94 3c 12 	call	0x2478	; 0x2478 <effect_rand_patharound>
    6c64:	04 c0       	rjmp	.+8      	; 0x6c6e <launch_effect+0x97c>
while (xit == 1) {delay_ms (500);}
    6c66:	84 ef       	ldi	r24, 0xF4	; 244
    6c68:	91 e0       	ldi	r25, 0x01	; 1
    6c6a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6c6e:	80 91 b3 01 	lds	r24, 0x01B3
    6c72:	90 91 b4 01 	lds	r25, 0x01B4
    6c76:	01 97       	sbiw	r24, 0x01	; 1
    6c78:	b1 f3       	breq	.-20     	; 0x6c66 <launch_effect+0x974>
    6c7a:	21 c1       	rjmp	.+578    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 25:
			//effect_wormsqueeze (1, AXIS_Z, -1, 100, 1000);
			effect_blinky2();
    6c7c:	0e 94 a0 19 	call	0x3340	; 0x3340 <effect_blinky2>
    6c80:	04 c0       	rjmp	.+8      	; 0x6c8a <launch_effect+0x998>
while (xit == 1) {delay_ms (500);}
    6c82:	84 ef       	ldi	r24, 0xF4	; 244
    6c84:	91 e0       	ldi	r25, 0x01	; 1
    6c86:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6c8a:	80 91 b3 01 	lds	r24, 0x01B3
    6c8e:	90 91 b4 01 	lds	r25, 0x01B4
    6c92:	01 97       	sbiw	r24, 0x01	; 1
    6c94:	b1 f3       	breq	.-20     	; 0x6c82 <launch_effect+0x990>
    6c96:	13 c1       	rjmp	.+550    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 26:
			effect_smileyspin(2,1000,2);
    6c98:	82 e0       	ldi	r24, 0x02	; 2
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	68 ee       	ldi	r22, 0xE8	; 232
    6c9e:	73 e0       	ldi	r23, 0x03	; 3
    6ca0:	42 e0       	ldi	r20, 0x02	; 2
    6ca2:	0e 94 ab 12 	call	0x2556	; 0x2556 <effect_smileyspin>
    6ca6:	04 c0       	rjmp	.+8      	; 0x6cb0 <launch_effect+0x9be>
while (xit == 1) {delay_ms (500);}
    6ca8:	84 ef       	ldi	r24, 0xF4	; 244
    6caa:	91 e0       	ldi	r25, 0x01	; 1
    6cac:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6cb0:	80 91 b3 01 	lds	r24, 0x01B3
    6cb4:	90 91 b4 01 	lds	r25, 0x01B4
    6cb8:	01 97       	sbiw	r24, 0x01	; 1
    6cba:	b1 f3       	breq	.-20     	; 0x6ca8 <launch_effect+0x9b6>
    6cbc:	00 c1       	rjmp	.+512    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 27:
			effect_random_sparkle();
    6cbe:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <effect_random_sparkle>
    6cc2:	04 c0       	rjmp	.+8      	; 0x6ccc <launch_effect+0x9da>
while (xit == 1) {delay_ms (500);}
    6cc4:	84 ef       	ldi	r24, 0xF4	; 244
    6cc6:	91 e0       	ldi	r25, 0x01	; 1
    6cc8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6ccc:	80 91 b3 01 	lds	r24, 0x01B3
    6cd0:	90 91 b4 01 	lds	r25, 0x01B4
    6cd4:	01 97       	sbiw	r24, 0x01	; 1
    6cd6:	b1 f3       	breq	.-20     	; 0x6cc4 <launch_effect+0x9d2>
    6cd8:	f2 c0       	rjmp	.+484    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 28:
			effect_wormsqueeze (1, AXIS_Z, -1, 100, 1000);
    6cda:	81 e0       	ldi	r24, 0x01	; 1
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	6a e7       	ldi	r22, 0x7A	; 122
    6ce0:	70 e0       	ldi	r23, 0x00	; 0
    6ce2:	4f ef       	ldi	r20, 0xFF	; 255
    6ce4:	5f ef       	ldi	r21, 0xFF	; 255
    6ce6:	24 e6       	ldi	r18, 0x64	; 100
    6ce8:	30 e0       	ldi	r19, 0x00	; 0
    6cea:	08 ee       	ldi	r16, 0xE8	; 232
    6cec:	13 e0       	ldi	r17, 0x03	; 3
    6cee:	0e 94 01 1a 	call	0x3402	; 0x3402 <effect_wormsqueeze>
    6cf2:	04 c0       	rjmp	.+8      	; 0x6cfc <launch_effect+0xa0a>
while (xit == 1) {delay_ms (500);}
    6cf4:	84 ef       	ldi	r24, 0xF4	; 244
    6cf6:	91 e0       	ldi	r25, 0x01	; 1
    6cf8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6cfc:	80 91 b3 01 	lds	r24, 0x01B3
    6d00:	90 91 b4 01 	lds	r25, 0x01B4
    6d04:	01 97       	sbiw	r24, 0x01	; 1
    6d06:	b1 f3       	breq	.-20     	; 0x6cf4 <launch_effect+0xa02>
    6d08:	da c0       	rjmp	.+436    	; 0x6ebe <launch_effect+0xbcc>
			break;
		
		case 29:
			boingboing(250, 600, 0x01, 0x03);
    6d0a:	8a ef       	ldi	r24, 0xFA	; 250
    6d0c:	90 e0       	ldi	r25, 0x00	; 0
    6d0e:	68 e5       	ldi	r22, 0x58	; 88
    6d10:	72 e0       	ldi	r23, 0x02	; 2
    6d12:	41 e0       	ldi	r20, 0x01	; 1
    6d14:	23 e0       	ldi	r18, 0x03	; 3
    6d16:	0e 94 cd 1c 	call	0x399a	; 0x399a <boingboing>
    6d1a:	04 c0       	rjmp	.+8      	; 0x6d24 <launch_effect+0xa32>
while (xit == 1) {delay_ms (500);}
    6d1c:	84 ef       	ldi	r24, 0xF4	; 244
    6d1e:	91 e0       	ldi	r25, 0x01	; 1
    6d20:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6d24:	80 91 b3 01 	lds	r24, 0x01B3
    6d28:	90 91 b4 01 	lds	r25, 0x01B4
    6d2c:	01 97       	sbiw	r24, 0x01	; 1
    6d2e:	b1 f3       	breq	.-20     	; 0x6d1c <launch_effect+0xa2a>
    6d30:	c6 c0       	rjmp	.+396    	; 0x6ebe <launch_effect+0xbcc>
			break;
		
		case 30:
			effect_filip_filop(100);
    6d32:	84 e6       	ldi	r24, 0x64	; 100
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <effect_filip_filop>
    6d3a:	04 c0       	rjmp	.+8      	; 0x6d44 <launch_effect+0xa52>
while (xit == 1) {delay_ms (500);}
    6d3c:	84 ef       	ldi	r24, 0xF4	; 244
    6d3e:	91 e0       	ldi	r25, 0x01	; 1
    6d40:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6d44:	80 91 b3 01 	lds	r24, 0x01B3
    6d48:	90 91 b4 01 	lds	r25, 0x01B4
    6d4c:	01 97       	sbiw	r24, 0x01	; 1
    6d4e:	b1 f3       	breq	.-20     	; 0x6d3c <launch_effect+0xa4a>
    6d50:	b6 c0       	rjmp	.+364    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 31:
		    int_ripples(600,300);
    6d52:	88 e5       	ldi	r24, 0x58	; 88
    6d54:	92 e0       	ldi	r25, 0x02	; 2
    6d56:	6c e2       	ldi	r22, 0x2C	; 44
    6d58:	71 e0       	ldi	r23, 0x01	; 1
    6d5a:	0e 94 30 24 	call	0x4860	; 0x4860 <int_ripples>
    6d5e:	04 c0       	rjmp	.+8      	; 0x6d68 <launch_effect+0xa76>
while (xit == 1) {delay_ms (500);}
    6d60:	84 ef       	ldi	r24, 0xF4	; 244
    6d62:	91 e0       	ldi	r25, 0x01	; 1
    6d64:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6d68:	80 91 b3 01 	lds	r24, 0x01B3
    6d6c:	90 91 b4 01 	lds	r25, 0x01B4
    6d70:	01 97       	sbiw	r24, 0x01	; 1
    6d72:	b1 f3       	breq	.-20     	; 0x6d60 <launch_effect+0xa6e>
			mirror_ripples (600,300);
    6d74:	88 e5       	ldi	r24, 0x58	; 88
    6d76:	92 e0       	ldi	r25, 0x02	; 2
    6d78:	6c e2       	ldi	r22, 0x2C	; 44
    6d7a:	71 e0       	ldi	r23, 0x01	; 1
    6d7c:	0e 94 6e 22 	call	0x44dc	; 0x44dc <mirror_ripples>
    6d80:	04 c0       	rjmp	.+8      	; 0x6d8a <launch_effect+0xa98>
while (xit == 1) {delay_ms (500);}
    6d82:	84 ef       	ldi	r24, 0xF4	; 244
    6d84:	91 e0       	ldi	r25, 0x01	; 1
    6d86:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6d8a:	80 91 b3 01 	lds	r24, 0x01B3
    6d8e:	90 91 b4 01 	lds	r25, 0x01B4
    6d92:	01 97       	sbiw	r24, 0x01	; 1
    6d94:	b1 f3       	breq	.-20     	; 0x6d82 <launch_effect+0xa90>
			side_ripples (600,300);
    6d96:	88 e5       	ldi	r24, 0x58	; 88
    6d98:	92 e0       	ldi	r25, 0x02	; 2
    6d9a:	6c e2       	ldi	r22, 0x2C	; 44
    6d9c:	71 e0       	ldi	r23, 0x01	; 1
    6d9e:	0e 94 4f 23 	call	0x469e	; 0x469e <side_ripples>
    6da2:	04 c0       	rjmp	.+8      	; 0x6dac <launch_effect+0xaba>
while (xit == 1) {delay_ms (500);}
    6da4:	84 ef       	ldi	r24, 0xF4	; 244
    6da6:	91 e0       	ldi	r25, 0x01	; 1
    6da8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6dac:	80 91 b3 01 	lds	r24, 0x01B3
    6db0:	90 91 b4 01 	lds	r25, 0x01B4
    6db4:	01 97       	sbiw	r24, 0x01	; 1
    6db6:	b1 f3       	breq	.-20     	; 0x6da4 <launch_effect+0xab2>
			quad_ripples (100,2000);
    6db8:	84 e6       	ldi	r24, 0x64	; 100
    6dba:	90 e0       	ldi	r25, 0x00	; 0
    6dbc:	60 ed       	ldi	r22, 0xD0	; 208
    6dbe:	77 e0       	ldi	r23, 0x07	; 7
    6dc0:	0e 94 63 21 	call	0x42c6	; 0x42c6 <quad_ripples>
    6dc4:	04 c0       	rjmp	.+8      	; 0x6dce <launch_effect+0xadc>
while (xit == 1) {delay_ms (500);}
    6dc6:	84 ef       	ldi	r24, 0xF4	; 244
    6dc8:	91 e0       	ldi	r25, 0x01	; 1
    6dca:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6dce:	80 91 b3 01 	lds	r24, 0x01B3
    6dd2:	90 91 b4 01 	lds	r25, 0x01B4
    6dd6:	01 97       	sbiw	r24, 0x01	; 1
    6dd8:	b1 f3       	breq	.-20     	; 0x6dc6 <launch_effect+0xad4>
    6dda:	71 c0       	rjmp	.+226    	; 0x6ebe <launch_effect+0xbcc>
			break;

		case 32:
			int_sidewaves(800,25);
    6ddc:	80 e2       	ldi	r24, 0x20	; 32
    6dde:	93 e0       	ldi	r25, 0x03	; 3
    6de0:	69 e1       	ldi	r22, 0x19	; 25
    6de2:	70 e0       	ldi	r23, 0x00	; 0
    6de4:	0e 94 17 28 	call	0x502e	; 0x502e <int_sidewaves>
    6de8:	04 c0       	rjmp	.+8      	; 0x6df2 <launch_effect+0xb00>
while (xit == 1) {delay_ms (500);}
    6dea:	84 ef       	ldi	r24, 0xF4	; 244
    6dec:	91 e0       	ldi	r25, 0x01	; 1
    6dee:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6df2:	80 91 b3 01 	lds	r24, 0x01B3
    6df6:	90 91 b4 01 	lds	r25, 0x01B4
    6dfa:	01 97       	sbiw	r24, 0x01	; 1
    6dfc:	b1 f3       	breq	.-20     	; 0x6dea <launch_effect+0xaf8>
    6dfe:	5f c0       	rjmp	.+190    	; 0x6ebe <launch_effect+0xbcc>
			break;
			
		case 33:
			// effect_cubix(100,1);
			// effect_cubix(100,2);
			effect_cubix(100,3);
    6e00:	84 e6       	ldi	r24, 0x64	; 100
    6e02:	90 e0       	ldi	r25, 0x00	; 0
    6e04:	63 e0       	ldi	r22, 0x03	; 3
    6e06:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <effect_cubix>
    6e0a:	04 c0       	rjmp	.+8      	; 0x6e14 <launch_effect+0xb22>
while (xit == 1) {delay_ms (500);}
    6e0c:	84 ef       	ldi	r24, 0xF4	; 244
    6e0e:	91 e0       	ldi	r25, 0x01	; 1
    6e10:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6e14:	80 91 b3 01 	lds	r24, 0x01B3
    6e18:	90 91 b4 01 	lds	r25, 0x01B4
    6e1c:	01 97       	sbiw	r24, 0x01	; 1
    6e1e:	b1 f3       	breq	.-20     	; 0x6e0c <launch_effect+0xb1a>
    6e20:	4e c0       	rjmp	.+156    	; 0x6ebe <launch_effect+0xbcc>
			break;
		case 34:
			fireworks(10,30);
    6e22:	8a e0       	ldi	r24, 0x0A	; 10
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	6e e1       	ldi	r22, 0x1E	; 30
    6e28:	70 e0       	ldi	r23, 0x00	; 0
    6e2a:	0e 94 30 29 	call	0x5260	; 0x5260 <fireworks>
    6e2e:	04 c0       	rjmp	.+8      	; 0x6e38 <launch_effect+0xb46>
while (xit == 1) {delay_ms (500);}
    6e30:	84 ef       	ldi	r24, 0xF4	; 244
    6e32:	91 e0       	ldi	r25, 0x01	; 1
    6e34:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>
    6e38:	80 91 b3 01 	lds	r24, 0x01B3
    6e3c:	90 91 b4 01 	lds	r25, 0x01B4
    6e40:	01 97       	sbiw	r24, 0x01	; 1
    6e42:	b1 f3       	breq	.-20     	; 0x6e30 <launch_effect+0xb3e>
    6e44:	3c c0       	rjmp	.+120    	; 0x6ebe <launch_effect+0xbcc>
			break;
		case 35:
			fill(0x00);
    6e46:	80 e0       	ldi	r24, 0x00	; 0
    6e48:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    6e4c:	c0 e0       	ldi	r28, 0x00	; 0
    6e4e:	d0 e0       	ldi	r29, 0x00	; 0
			for (i = 0; i < 10;i++)
			{
				setvoxel(rand()%4+2,rand()%4+2,rand()%4+2);
    6e50:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    6e54:	8c 01       	movw	r16, r24
    6e56:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    6e5a:	7c 01       	movw	r14, r24
    6e5c:	0e 94 56 3c 	call	0x78ac	; 0x78ac <rand>
    6e60:	fc 01       	movw	r30, r24
    6e62:	c8 01       	movw	r24, r16
    6e64:	64 e0       	ldi	r22, 0x04	; 4
    6e66:	70 e0       	ldi	r23, 0x00	; 0
    6e68:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    6e6c:	8c 01       	movw	r16, r24
    6e6e:	0e 5f       	subi	r16, 0xFE	; 254
    6e70:	1f 4f       	sbci	r17, 0xFF	; 255
    6e72:	c7 01       	movw	r24, r14
    6e74:	64 e0       	ldi	r22, 0x04	; 4
    6e76:	70 e0       	ldi	r23, 0x00	; 0
    6e78:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    6e7c:	9c 01       	movw	r18, r24
    6e7e:	2e 5f       	subi	r18, 0xFE	; 254
    6e80:	3f 4f       	sbci	r19, 0xFF	; 255
    6e82:	cf 01       	movw	r24, r30
    6e84:	64 e0       	ldi	r22, 0x04	; 4
    6e86:	70 e0       	ldi	r23, 0x00	; 0
    6e88:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divmodhi4>
    6e8c:	ac 01       	movw	r20, r24
    6e8e:	4e 5f       	subi	r20, 0xFE	; 254
    6e90:	5f 4f       	sbci	r21, 0xFF	; 255
    6e92:	c8 01       	movw	r24, r16
    6e94:	b9 01       	movw	r22, r18
    6e96:	0e 94 2c 07 	call	0xe58	; 0xe58 <setvoxel>
			fireworks(10,30);
while (xit == 1) {delay_ms (500);}
			break;
		case 35:
			fill(0x00);
			for (i = 0; i < 10;i++)
    6e9a:	21 96       	adiw	r28, 0x01	; 1
    6e9c:	ca 30       	cpi	r28, 0x0A	; 10
    6e9e:	d1 05       	cpc	r29, r1
    6ea0:	b9 f6       	brne	.-82     	; 0x6e50 <launch_effect+0xb5e>
			{
				setvoxel(rand()%4+2,rand()%4+2,rand()%4+2);
			}
	
			gol_play(200, 700);
    6ea2:	88 ec       	ldi	r24, 0xC8	; 200
    6ea4:	90 e0       	ldi	r25, 0x00	; 0
    6ea6:	6c eb       	ldi	r22, 0xBC	; 188
    6ea8:	72 e0       	ldi	r23, 0x02	; 2
    6eaa:	0e 94 2e 38 	call	0x705c	; 0x705c <gol_play>
			fill(0x00);
    6eae:	80 e0       	ldi	r24, 0x00	; 0
    6eb0:	0e 94 30 0a 	call	0x1460	; 0x1460 <fill>
    6eb4:	04 c0       	rjmp	.+8      	; 0x6ebe <launch_effect+0xbcc>
			break;
		// In case the effect number is out of range:
		default:
			effect_stringfly2("FAIL");
    6eb6:	83 ea       	ldi	r24, 0xA3	; 163
    6eb8:	91 e0       	ldi	r25, 0x01	; 1
    6eba:	0e 94 57 1b 	call	0x36ae	; 0x36ae <effect_stringfly2>
			break;

	}
}
    6ebe:	df 91       	pop	r29
    6ec0:	cf 91       	pop	r28
    6ec2:	1f 91       	pop	r17
    6ec4:	0f 91       	pop	r16
    6ec6:	ff 90       	pop	r15
    6ec8:	ef 90       	pop	r14
    6eca:	08 95       	ret

00006ecc <gol_count_changes>:
		}
	}
}

unsigned char gol_count_changes (void)
{
    6ecc:	40 e0       	ldi	r20, 0x00	; 0
    6ece:	50 e0       	ldi	r21, 0x00	; 0
    6ed0:	18 c0       	rjmp	.+48     	; 0x6f02 <gol_count_changes+0x36>
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
		{
			if (fb[x][y] != cube[x][y])
    6ed2:	fb 01       	movw	r30, r22
    6ed4:	e2 0f       	add	r30, r18
    6ed6:	f3 1f       	adc	r31, r19
    6ed8:	df 01       	movw	r26, r30
    6eda:	a9 54       	subi	r26, 0x49	; 73
    6edc:	be 4f       	sbci	r27, 0xFE	; 254
    6ede:	9c 91       	ld	r25, X
    6ee0:	e9 50       	subi	r30, 0x09	; 9
    6ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    6ee4:	80 81       	ld	r24, Z
    6ee6:	98 17       	cp	r25, r24
    6ee8:	a9 f4       	brne	.+42     	; 0x6f14 <gol_count_changes+0x48>
    6eea:	2f 5f       	subi	r18, 0xFF	; 255
    6eec:	3f 4f       	sbci	r19, 0xFF	; 255
{
	unsigned char x,y;
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
    6eee:	28 30       	cpi	r18, 0x08	; 8
    6ef0:	31 05       	cpc	r19, r1
    6ef2:	79 f7       	brne	.-34     	; 0x6ed2 <gol_count_changes+0x6>
    6ef4:	4f 5f       	subi	r20, 0xFF	; 255
    6ef6:	5f 4f       	sbci	r21, 0xFF	; 255

unsigned char gol_count_changes (void)
{
	unsigned char x,y;
	
	for (x = 0; x < GOL_X; x++)
    6ef8:	48 30       	cpi	r20, 0x08	; 8
    6efa:	51 05       	cpc	r21, r1
    6efc:	11 f4       	brne	.+4      	; 0x6f02 <gol_count_changes+0x36>
    6efe:	80 e0       	ldi	r24, 0x00	; 0
    6f00:	08 95       	ret
    6f02:	20 e0       	ldi	r18, 0x00	; 0
    6f04:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y = 0; y < GOL_Y; y++)
		{
			if (fb[x][y] != cube[x][y])
    6f06:	ba 01       	movw	r22, r20
    6f08:	83 e0       	ldi	r24, 0x03	; 3
    6f0a:	66 0f       	add	r22, r22
    6f0c:	77 1f       	adc	r23, r23
    6f0e:	8a 95       	dec	r24
    6f10:	e1 f7       	brne	.-8      	; 0x6f0a <gol_count_changes+0x3e>
    6f12:	df cf       	rjmp	.-66     	; 0x6ed2 <gol_count_changes+0x6>

unsigned char gol_count_changes (void)
{
	unsigned char x,y;
	
	for (x = 0; x < GOL_X; x++)
    6f14:	81 e0       	ldi	r24, 0x01	; 1
			if (fb[x][y] != cube[x][y])
				return 1;
		}
	}
	return 0;
}
    6f16:	08 95       	ret

00006f18 <gol_nextgen>:
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    6f18:	5f 92       	push	r5
    6f1a:	6f 92       	push	r6
    6f1c:	7f 92       	push	r7
    6f1e:	8f 92       	push	r8
    6f20:	9f 92       	push	r9
    6f22:	af 92       	push	r10
    6f24:	bf 92       	push	r11
    6f26:	cf 92       	push	r12
    6f28:	df 92       	push	r13
    6f2a:	ef 92       	push	r14
    6f2c:	ff 92       	push	r15
    6f2e:	0f 93       	push	r16
    6f30:	1f 93       	push	r17
    6f32:	cf 93       	push	r28
    6f34:	df 93       	push	r29
	signed char x,y,z;
	unsigned char neigh;
	unsigned char xbits,nxbits;
	signed char ix, iy, iz; // offset 1 in each direction in each dimension
	signed char nx, ny, nz; // neighbours address.
	tmpfill(0x00);
    6f36:	80 e0       	ldi	r24, 0x00	; 0
    6f38:	0e 94 4d 0a 	call	0x149a	; 0x149a <tmpfill>
    6f3c:	c0 e0       	ldi	r28, 0x00	; 0
    6f3e:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (x = 0; x < 8; x++)
	{
		xbits=(1<<x);
    6f40:	21 e0       	ldi	r18, 0x01	; 1
    6f42:	82 2e       	mov	r8, r18
    6f44:	91 2c       	mov	r9, r1
    6f46:	74 01       	movw	r14, r8
    6f48:	0c 2e       	mov	r0, r28
    6f4a:	02 c0       	rjmp	.+4      	; 0x6f50 <gol_nextgen+0x38>
    6f4c:	ee 0c       	add	r14, r14
    6f4e:	ff 1c       	adc	r15, r15
    6f50:	0a 94       	dec	r0
    6f52:	e2 f7       	brpl	.-8      	; 0x6f4c <gol_nextgen+0x34>
    6f54:	be 2c       	mov	r11, r14
    6f56:	a0 e0       	ldi	r26, 0x00	; 0
    6f58:	b0 e0       	ldi	r27, 0x00	; 0
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    6f5a:	5c 2e       	mov	r5, r28
    6f5c:	5a 94       	dec	r5
		{
			for (z = 0; z < 8; z++)
			{
				neigh = 0;
				// unwrapped call from gol_count_neighbours
				for (ix = -1; ix < 2; ix++)
    6f5e:	92 e0       	ldi	r25, 0x02	; 2
    6f60:	69 2e       	mov	r6, r25
    6f62:	6c 0e       	add	r6, r28
    6f64:	5e c0       	rjmp	.+188    	; 0x7022 <gol_nextgen+0x10a>
				{
					nx = (x+ix);
					if (!(nx & 0x08)) // Either 0x08 or 0xFF will have 4th bit set.
    6f66:	81 2f       	mov	r24, r17
    6f68:	99 27       	eor	r25, r25
    6f6a:	87 fd       	sbrc	r24, 7
    6f6c:	90 95       	com	r25
    6f6e:	83 fd       	sbrc	r24, 3
    6f70:	28 c0       	rjmp	.+80     	; 0x6fc2 <gol_nextgen+0xaa>
					{
						nxbits=(1 << nx);
    6f72:	94 01       	movw	r18, r8
    6f74:	02 c0       	rjmp	.+4      	; 0x6f7a <gol_nextgen+0x62>
    6f76:	22 0f       	add	r18, r18
    6f78:	33 1f       	adc	r19, r19
    6f7a:	8a 95       	dec	r24
    6f7c:	e2 f7       	brpl	.-8      	; 0x6f76 <gol_nextgen+0x5e>
    6f7e:	92 2f       	mov	r25, r18
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    6f80:	37 2d       	mov	r19, r7
					{
						nxbits=(1 << nx);
						for (iy = -1; iy < 2; iy++)
						{
							ny = (y+iy);
							if (!(ny & 0x08))
    6f82:	63 2f       	mov	r22, r19
    6f84:	77 27       	eor	r23, r23
    6f86:	67 fd       	sbrc	r22, 7
    6f88:	70 95       	com	r23
    6f8a:	63 fd       	sbrc	r22, 3
    6f8c:	17 c0       	rjmp	.+46     	; 0x6fbc <gol_nextgen+0xa4>
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    6f8e:	2c 2d       	mov	r18, r12
							if (!(ny & 0x08))
							{
								for (iz = -1; iz < 2; iz++)
								{
									nz = (z+iz);
									if (!(nz & 0x08))
    6f90:	e2 2f       	mov	r30, r18
    6f92:	ff 27       	eor	r31, r31
    6f94:	e7 fd       	sbrc	r30, 7
    6f96:	f0 95       	com	r31
    6f98:	e3 fd       	sbrc	r30, 3
    6f9a:	0d c0       	rjmp	.+26     	; 0x6fb6 <gol_nextgen+0x9e>
										if (cube[nz][ny] & nxbits)
    6f9c:	83 e0       	ldi	r24, 0x03	; 3
    6f9e:	ee 0f       	add	r30, r30
    6fa0:	ff 1f       	adc	r31, r31
    6fa2:	8a 95       	dec	r24
    6fa4:	e1 f7       	brne	.-8      	; 0x6f9e <gol_nextgen+0x86>
    6fa6:	e6 0f       	add	r30, r22
    6fa8:	f7 1f       	adc	r31, r23
    6faa:	e9 50       	subi	r30, 0x09	; 9
    6fac:	fe 4f       	sbci	r31, 0xFE	; 254
    6fae:	80 81       	ld	r24, Z
    6fb0:	89 23       	and	r24, r25
    6fb2:	09 f0       	breq	.+2      	; 0x6fb6 <gol_nextgen+0x9e>
											neigh++;
    6fb4:	0f 5f       	subi	r16, 0xFF	; 255
    6fb6:	2f 5f       	subi	r18, 0xFF	; 255
						for (iy = -1; iy < 2; iy++)
						{
							ny = (y+iy);
							if (!(ny & 0x08))
							{
								for (iz = -1; iz < 2; iz++)
    6fb8:	2d 15       	cp	r18, r13
    6fba:	51 f7       	brne	.-44     	; 0x6f90 <gol_nextgen+0x78>
    6fbc:	3f 5f       	subi	r19, 0xFF	; 255
				{
					nx = (x+ix);
					if (!(nx & 0x08)) // Either 0x08 or 0xFF will have 4th bit set.
					{
						nxbits=(1 << nx);
						for (iy = -1; iy < 2; iy++)
    6fbe:	3a 15       	cp	r19, r10
    6fc0:	01 f7       	brne	.-64     	; 0x6f82 <gol_nextgen+0x6a>
    6fc2:	1f 5f       	subi	r17, 0xFF	; 255
		{
			for (z = 0; z < 8; z++)
			{
				neigh = 0;
				// unwrapped call from gol_count_neighbours
				for (ix = -1; ix < 2; ix++)
    6fc4:	16 15       	cp	r17, r6
    6fc6:	79 f6       	brne	.-98     	; 0x6f66 <gol_nextgen+0x4e>
							}
						}
					}
				}
				// Current voxel is alive.
				if (cube[z][y] & (1 << x))
    6fc8:	9a 01       	movw	r18, r20
    6fca:	63 e0       	ldi	r22, 0x03	; 3
    6fcc:	22 0f       	add	r18, r18
    6fce:	33 1f       	adc	r19, r19
    6fd0:	6a 95       	dec	r22
    6fd2:	e1 f7       	brne	.-8      	; 0x6fcc <gol_nextgen+0xb4>
    6fd4:	2a 0f       	add	r18, r26
    6fd6:	3b 1f       	adc	r19, r27
    6fd8:	f9 01       	movw	r30, r18
    6fda:	e9 50       	subi	r30, 0x09	; 9
    6fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    6fde:	80 81       	ld	r24, Z
    6fe0:	90 e0       	ldi	r25, 0x00	; 0
    6fe2:	8e 21       	and	r24, r14
    6fe4:	9f 21       	and	r25, r15
    6fe6:	89 2b       	or	r24, r25
    6fe8:	19 f0       	breq	.+6      	; 0x6ff0 <gol_nextgen+0xd8>
				{
					if (neigh > GOL_TERMINATE_LONELY && neigh < GOL_TERMINATE_CROWDED)
    6fea:	05 30       	cpi	r16, 0x05	; 5
    6fec:	49 f4       	brne	.+18     	; 0x7000 <gol_nextgen+0xe8>
    6fee:	02 c0       	rjmp	.+4      	; 0x6ff4 <gol_nextgen+0xdc>
						fb[z][y] |= xbits;
				// Current voxel is dead.
				}
				else
				{
					if (neigh >= GOL_CREATE_MIN && neigh <= GOL_CREATE_MAX)
    6ff0:	04 30       	cpi	r16, 0x04	; 4
    6ff2:	31 f4       	brne	.+12     	; 0x7000 <gol_nextgen+0xe8>
						fb[z][y] |= xbits;
    6ff4:	f9 01       	movw	r30, r18
    6ff6:	e9 54       	subi	r30, 0x49	; 73
    6ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    6ffa:	80 81       	ld	r24, Z
    6ffc:	8b 29       	or	r24, r11
    6ffe:	80 83       	st	Z, r24
    7000:	4f 5f       	subi	r20, 0xFF	; 255
    7002:	5f 4f       	sbci	r21, 0xFF	; 255
	for (x = 0; x < 8; x++)
	{
		xbits=(1<<x);
		for (y = 0; y < 8; y++)
		{
			for (z = 0; z < 8; z++)
    7004:	48 30       	cpi	r20, 0x08	; 8
    7006:	51 05       	cpc	r21, r1
    7008:	41 f0       	breq	.+16     	; 0x701a <gol_nextgen+0x102>
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    700a:	15 2d       	mov	r17, r5
    700c:	00 e0       	ldi	r16, 0x00	; 0
    700e:	c4 2e       	mov	r12, r20
    7010:	ca 94       	dec	r12
						for (iy = -1; iy < 2; iy++)
						{
							ny = (y+iy);
							if (!(ny & 0x08))
							{
								for (iz = -1; iz < 2; iz++)
    7012:	22 e0       	ldi	r18, 0x02	; 2
    7014:	d2 2e       	mov	r13, r18
    7016:	d4 0e       	add	r13, r20
    7018:	a6 cf       	rjmp	.-180    	; 0x6f66 <gol_nextgen+0x4e>
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    701a:	11 96       	adiw	r26, 0x01	; 1
	tmpfill(0x00);
	
	for (x = 0; x < 8; x++)
	{
		xbits=(1<<x);
		for (y = 0; y < 8; y++)
    701c:	a8 30       	cpi	r26, 0x08	; 8
    701e:	b1 05       	cpc	r27, r1
    7020:	41 f0       	breq	.+16     	; 0x7032 <gol_nextgen+0x11a>
    7022:	40 e0       	ldi	r20, 0x00	; 0
    7024:	50 e0       	ldi	r21, 0x00	; 0
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    7026:	7a 2e       	mov	r7, r26
    7028:	7a 94       	dec	r7
				{
					nx = (x+ix);
					if (!(nx & 0x08)) // Either 0x08 or 0xFF will have 4th bit set.
					{
						nxbits=(1 << nx);
						for (iy = -1; iy < 2; iy++)
    702a:	92 e0       	ldi	r25, 0x02	; 2
    702c:	a9 2e       	mov	r10, r25
    702e:	aa 0e       	add	r10, r26
    7030:	ec cf       	rjmp	.-40     	; 0x700a <gol_nextgen+0xf2>
	tmpfill(0x00);
	
	for (x = 0; x < 8; x++)
	{
		xbits=(1<<x);
		for (y = 0; y < 8; y++)
    7032:	21 96       	adiw	r28, 0x01	; 1
	unsigned char xbits,nxbits;
	signed char ix, iy, iz; // offset 1 in each direction in each dimension
	signed char nx, ny, nz; // neighbours address.
	tmpfill(0x00);
	
	for (x = 0; x < 8; x++)
    7034:	c8 30       	cpi	r28, 0x08	; 8
    7036:	d1 05       	cpc	r29, r1
    7038:	09 f0       	breq	.+2      	; 0x703c <gol_nextgen+0x124>
    703a:	85 cf       	rjmp	.-246    	; 0x6f46 <gol_nextgen+0x2e>
						fb[z][y] |= xbits;
				}
			}
		}
	}
}
    703c:	df 91       	pop	r29
    703e:	cf 91       	pop	r28
    7040:	1f 91       	pop	r17
    7042:	0f 91       	pop	r16
    7044:	ff 90       	pop	r15
    7046:	ef 90       	pop	r14
    7048:	df 90       	pop	r13
    704a:	cf 90       	pop	r12
    704c:	bf 90       	pop	r11
    704e:	af 90       	pop	r10
    7050:	9f 90       	pop	r9
    7052:	8f 90       	pop	r8
    7054:	7f 90       	pop	r7
    7056:	6f 90       	pop	r6
    7058:	5f 90       	pop	r5
    705a:	08 95       	ret

0000705c <gol_play>:
#define GOL_WRAP 0x01



void gol_play (int iterations, uint16_t delay)
{
    705c:	df 92       	push	r13
    705e:	ef 92       	push	r14
    7060:	ff 92       	push	r15
    7062:	0f 93       	push	r16
    7064:	1f 93       	push	r17
    7066:	cf 93       	push	r28
    7068:	df 93       	push	r29
    706a:	7c 01       	movw	r14, r24
    706c:	8b 01       	movw	r16, r22
    706e:	c0 e0       	ldi	r28, 0x00	; 0
    7070:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	
	for (i = 0; i < iterations; i++)
	{
		LED_PORT ^= LED_GREEN;
    7072:	38 e0       	ldi	r19, 0x08	; 8
    7074:	d3 2e       	mov	r13, r19
    7076:	14 c0       	rjmp	.+40     	; 0x70a0 <gol_play+0x44>
    7078:	82 b3       	in	r24, 0x12	; 18
    707a:	8d 25       	eor	r24, r13
    707c:	82 bb       	out	0x12, r24	; 18
	
		gol_nextgen();
    707e:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <gol_nextgen>
		if (!(i & 7))// Check every 8th cycle for end of life.
    7082:	ce 01       	movw	r24, r28
    7084:	87 70       	andi	r24, 0x07	; 7
    7086:	90 70       	andi	r25, 0x00	; 0
    7088:	89 2b       	or	r24, r25
    708a:	21 f4       	brne	.+8      	; 0x7094 <gol_play+0x38>
		{
			if (gol_count_changes() == 0)
    708c:	0e 94 66 37 	call	0x6ecc	; 0x6ecc <gol_count_changes>
    7090:	88 23       	and	r24, r24
    7092:	49 f0       	breq	.+18     	; 0x70a6 <gol_play+0x4a>
				return;
		}
		tmp2cube();
    7094:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <tmp2cube>
		
		delay_ms(delay);
    7098:	c8 01       	movw	r24, r16
    709a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <delay_ms>

void gol_play (int iterations, uint16_t delay)
{
	int i;
	
	for (i = 0; i < iterations; i++)
    709e:	21 96       	adiw	r28, 0x01	; 1
    70a0:	ce 15       	cp	r28, r14
    70a2:	df 05       	cpc	r29, r15
    70a4:	4c f3       	brlt	.-46     	; 0x7078 <gol_play+0x1c>
		
		delay_ms(delay);
		
		//led_red(1);
	}
}
    70a6:	df 91       	pop	r29
    70a8:	cf 91       	pop	r28
    70aa:	1f 91       	pop	r17
    70ac:	0f 91       	pop	r16
    70ae:	ff 90       	pop	r15
    70b0:	ef 90       	pop	r14
    70b2:	df 90       	pop	r13
    70b4:	08 95       	ret

000070b6 <totty_sin>:
		LUT[i]=sine*181.0;
	}
}

int totty_sin(unsigned char LUT[65],int sin_of)
{
    70b6:	ac 01       	movw	r20, r24
	unsigned char inv=0;
	if (sin_of<0)
    70b8:	77 fd       	sbrc	r23, 7
    70ba:	02 c0       	rjmp	.+4      	; 0x70c0 <totty_sin+0xa>
    70bc:	20 e0       	ldi	r18, 0x00	; 0
    70be:	04 c0       	rjmp	.+8      	; 0x70c8 <totty_sin+0x12>
	{
		sin_of=-sin_of;
    70c0:	70 95       	com	r23
    70c2:	61 95       	neg	r22
    70c4:	7f 4f       	sbci	r23, 0xFF	; 255
    70c6:	21 e0       	ldi	r18, 0x01	; 1
		inv=1;
	}
	sin_of&=0x7f; //127
    70c8:	6f 77       	andi	r22, 0x7F	; 127
    70ca:	70 70       	andi	r23, 0x00	; 0
	if (sin_of>64)
    70cc:	61 34       	cpi	r22, 0x41	; 65
    70ce:	71 05       	cpc	r23, r1
    70d0:	2c f0       	brlt	.+10     	; 0x70dc <totty_sin+0x26>
	{
		sin_of-=64;
    70d2:	60 54       	subi	r22, 0x40	; 64
    70d4:	70 40       	sbci	r23, 0x00	; 0
		inv=1-inv;
    70d6:	81 e0       	ldi	r24, 0x01	; 1
    70d8:	82 1b       	sub	r24, r18
    70da:	28 2f       	mov	r18, r24
    70dc:	fa 01       	movw	r30, r20
    70de:	e6 0f       	add	r30, r22
    70e0:	f7 1f       	adc	r31, r23
	}
	if (inv)
    70e2:	22 23       	and	r18, r18
    70e4:	39 f0       	breq	.+14     	; 0x70f4 <totty_sin+0x3e>
		return -LUT[sin_of];
    70e6:	80 81       	ld	r24, Z
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	66 27       	eor	r22, r22
    70ec:	77 27       	eor	r23, r23
    70ee:	68 1b       	sub	r22, r24
    70f0:	79 0b       	sbc	r23, r25
    70f2:	03 c0       	rjmp	.+6      	; 0x70fa <totty_sin+0x44>
	else
		return LUT[sin_of];
    70f4:	80 81       	ld	r24, Z
    70f6:	68 2f       	mov	r22, r24
    70f8:	70 e0       	ldi	r23, 0x00	; 0
}
    70fa:	cb 01       	movw	r24, r22
    70fc:	08 95       	ret

000070fe <totty_cos>:

int totty_cos(unsigned char LUT[65],int cos_of)
{
	unsigned char inv=0;
	cos_of+=32;// Simply rotate by 90 degrees for COS
    70fe:	60 5e       	subi	r22, 0xE0	; 224
    7100:	7f 4f       	sbci	r23, 0xFF	; 255
	cos_of&=0x7f;//127
    7102:	6f 77       	andi	r22, 0x7F	; 127
    7104:	70 70       	andi	r23, 0x00	; 0
    7106:	fc 01       	movw	r30, r24
    7108:	e6 0f       	add	r30, r22
    710a:	f7 1f       	adc	r31, r23
	if (cos_of>64)
    710c:	61 34       	cpi	r22, 0x41	; 65
    710e:	71 05       	cpc	r23, r1
    7110:	4c f0       	brlt	.+18     	; 0x7124 <totty_cos+0x26>
	{
		cos_of-=64;
		inv=1;
	}
	if (inv)
		return -LUT[cos_of];
    7112:	e0 54       	subi	r30, 0x40	; 64
    7114:	f0 40       	sbci	r31, 0x00	; 0
    7116:	80 81       	ld	r24, Z
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	22 27       	eor	r18, r18
    711c:	33 27       	eor	r19, r19
    711e:	28 1b       	sub	r18, r24
    7120:	39 0b       	sbc	r19, r25
    7122:	03 c0       	rjmp	.+6      	; 0x712a <totty_cos+0x2c>
	else
		return LUT[cos_of];
    7124:	80 81       	ld	r24, Z
    7126:	28 2f       	mov	r18, r24
    7128:	30 e0       	ldi	r19, 0x00	; 0
}
    712a:	c9 01       	movw	r24, r18
    712c:	08 95       	ret

0000712e <init_LUT>:
#include "tottymath.h"

void init_LUT(unsigned char LUT[65])
{
    712e:	ef 92       	push	r14
    7130:	ff 92       	push	r15
    7132:	0f 93       	push	r16
    7134:	1f 93       	push	r17
    7136:	cf 93       	push	r28
    7138:	df 93       	push	r29
    713a:	7c 01       	movw	r14, r24
    713c:	c0 e0       	ldi	r28, 0x00	; 0
    713e:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	float sin_of,sine;
	for (i=0;i<65;i++)
	{
		sin_of=i*PI/64; // Just need half a sin wave
		sine=sin(sin_of);
    7140:	be 01       	movw	r22, r28
    7142:	88 27       	eor	r24, r24
    7144:	77 fd       	sbrc	r23, 7
    7146:	80 95       	com	r24
    7148:	98 2f       	mov	r25, r24
    714a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__floatsisf>
    714e:	2b ed       	ldi	r18, 0xDB	; 219
    7150:	3f e0       	ldi	r19, 0x0F	; 15
    7152:	49 e4       	ldi	r20, 0x49	; 73
    7154:	50 e4       	ldi	r21, 0x40	; 64
    7156:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    715a:	20 e0       	ldi	r18, 0x00	; 0
    715c:	30 e0       	ldi	r19, 0x00	; 0
    715e:	40 e8       	ldi	r20, 0x80	; 128
    7160:	5c e3       	ldi	r21, 0x3C	; 60
    7162:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    7166:	0e 94 24 3b 	call	0x7648	; 0x7648 <sin>
		// Use 181.0 as this squared is <32767, so we can multiply two sin or cos without overflowing an int.
		LUT[i]=sine*181.0;
    716a:	87 01       	movw	r16, r14
    716c:	0c 0f       	add	r16, r28
    716e:	1d 1f       	adc	r17, r29
    7170:	20 e0       	ldi	r18, 0x00	; 0
    7172:	30 e0       	ldi	r19, 0x00	; 0
    7174:	45 e3       	ldi	r20, 0x35	; 53
    7176:	53 e4       	ldi	r21, 0x43	; 67
    7178:	0e 94 c1 3a 	call	0x7582	; 0x7582 <__mulsf3>
    717c:	0e 94 a6 39 	call	0x734c	; 0x734c <__fixunssfsi>
    7180:	f8 01       	movw	r30, r16
    7182:	60 83       	st	Z, r22
    7184:	21 96       	adiw	r28, 0x01	; 1

void init_LUT(unsigned char LUT[65])
{
	unsigned char i;
	float sin_of,sine;
	for (i=0;i<65;i++)
    7186:	c1 34       	cpi	r28, 0x41	; 65
    7188:	d1 05       	cpc	r29, r1
    718a:	d1 f6       	brne	.-76     	; 0x7140 <init_LUT+0x12>
		sin_of=i*PI/64; // Just need half a sin wave
		sine=sin(sin_of);
		// Use 181.0 as this squared is <32767, so we can multiply two sin or cos without overflowing an int.
		LUT[i]=sine*181.0;
	}
}
    718c:	df 91       	pop	r29
    718e:	cf 91       	pop	r28
    7190:	1f 91       	pop	r17
    7192:	0f 91       	pop	r16
    7194:	ff 90       	pop	r15
    7196:	ef 90       	pop	r14
    7198:	08 95       	ret

0000719a <__subsf3>:
    719a:	50 58       	subi	r21, 0x80	; 128

0000719c <__addsf3>:
    719c:	bb 27       	eor	r27, r27
    719e:	aa 27       	eor	r26, r26
    71a0:	0e d0       	rcall	.+28     	; 0x71be <__addsf3x>
    71a2:	a0 c1       	rjmp	.+832    	; 0x74e4 <__fp_round>
    71a4:	69 d1       	rcall	.+722    	; 0x7478 <__fp_pscA>
    71a6:	30 f0       	brcs	.+12     	; 0x71b4 <__addsf3+0x18>
    71a8:	6e d1       	rcall	.+732    	; 0x7486 <__fp_pscB>
    71aa:	20 f0       	brcs	.+8      	; 0x71b4 <__addsf3+0x18>
    71ac:	31 f4       	brne	.+12     	; 0x71ba <__addsf3+0x1e>
    71ae:	9f 3f       	cpi	r25, 0xFF	; 255
    71b0:	11 f4       	brne	.+4      	; 0x71b6 <__addsf3+0x1a>
    71b2:	1e f4       	brtc	.+6      	; 0x71ba <__addsf3+0x1e>
    71b4:	5e c1       	rjmp	.+700    	; 0x7472 <__fp_nan>
    71b6:	0e f4       	brtc	.+2      	; 0x71ba <__addsf3+0x1e>
    71b8:	e0 95       	com	r30
    71ba:	e7 fb       	bst	r30, 7
    71bc:	54 c1       	rjmp	.+680    	; 0x7466 <__fp_inf>

000071be <__addsf3x>:
    71be:	e9 2f       	mov	r30, r25
    71c0:	b3 d1       	rcall	.+870    	; 0x7528 <__fp_split3>
    71c2:	80 f3       	brcs	.-32     	; 0x71a4 <__addsf3+0x8>
    71c4:	ba 17       	cp	r27, r26
    71c6:	62 07       	cpc	r22, r18
    71c8:	73 07       	cpc	r23, r19
    71ca:	84 07       	cpc	r24, r20
    71cc:	95 07       	cpc	r25, r21
    71ce:	18 f0       	brcs	.+6      	; 0x71d6 <__addsf3x+0x18>
    71d0:	71 f4       	brne	.+28     	; 0x71ee <__addsf3x+0x30>
    71d2:	9e f5       	brtc	.+102    	; 0x723a <__addsf3x+0x7c>
    71d4:	cb c1       	rjmp	.+918    	; 0x756c <__fp_zero>
    71d6:	0e f4       	brtc	.+2      	; 0x71da <__addsf3x+0x1c>
    71d8:	e0 95       	com	r30
    71da:	0b 2e       	mov	r0, r27
    71dc:	ba 2f       	mov	r27, r26
    71de:	a0 2d       	mov	r26, r0
    71e0:	0b 01       	movw	r0, r22
    71e2:	b9 01       	movw	r22, r18
    71e4:	90 01       	movw	r18, r0
    71e6:	0c 01       	movw	r0, r24
    71e8:	ca 01       	movw	r24, r20
    71ea:	a0 01       	movw	r20, r0
    71ec:	11 24       	eor	r1, r1
    71ee:	ff 27       	eor	r31, r31
    71f0:	59 1b       	sub	r21, r25
    71f2:	99 f0       	breq	.+38     	; 0x721a <__addsf3x+0x5c>
    71f4:	59 3f       	cpi	r21, 0xF9	; 249
    71f6:	50 f4       	brcc	.+20     	; 0x720c <__addsf3x+0x4e>
    71f8:	50 3e       	cpi	r21, 0xE0	; 224
    71fa:	68 f1       	brcs	.+90     	; 0x7256 <__addsf3x+0x98>
    71fc:	1a 16       	cp	r1, r26
    71fe:	f0 40       	sbci	r31, 0x00	; 0
    7200:	a2 2f       	mov	r26, r18
    7202:	23 2f       	mov	r18, r19
    7204:	34 2f       	mov	r19, r20
    7206:	44 27       	eor	r20, r20
    7208:	58 5f       	subi	r21, 0xF8	; 248
    720a:	f3 cf       	rjmp	.-26     	; 0x71f2 <__addsf3x+0x34>
    720c:	46 95       	lsr	r20
    720e:	37 95       	ror	r19
    7210:	27 95       	ror	r18
    7212:	a7 95       	ror	r26
    7214:	f0 40       	sbci	r31, 0x00	; 0
    7216:	53 95       	inc	r21
    7218:	c9 f7       	brne	.-14     	; 0x720c <__addsf3x+0x4e>
    721a:	7e f4       	brtc	.+30     	; 0x723a <__addsf3x+0x7c>
    721c:	1f 16       	cp	r1, r31
    721e:	ba 0b       	sbc	r27, r26
    7220:	62 0b       	sbc	r22, r18
    7222:	73 0b       	sbc	r23, r19
    7224:	84 0b       	sbc	r24, r20
    7226:	ba f0       	brmi	.+46     	; 0x7256 <__addsf3x+0x98>
    7228:	91 50       	subi	r25, 0x01	; 1
    722a:	a1 f0       	breq	.+40     	; 0x7254 <__addsf3x+0x96>
    722c:	ff 0f       	add	r31, r31
    722e:	bb 1f       	adc	r27, r27
    7230:	66 1f       	adc	r22, r22
    7232:	77 1f       	adc	r23, r23
    7234:	88 1f       	adc	r24, r24
    7236:	c2 f7       	brpl	.-16     	; 0x7228 <__addsf3x+0x6a>
    7238:	0e c0       	rjmp	.+28     	; 0x7256 <__addsf3x+0x98>
    723a:	ba 0f       	add	r27, r26
    723c:	62 1f       	adc	r22, r18
    723e:	73 1f       	adc	r23, r19
    7240:	84 1f       	adc	r24, r20
    7242:	48 f4       	brcc	.+18     	; 0x7256 <__addsf3x+0x98>
    7244:	87 95       	ror	r24
    7246:	77 95       	ror	r23
    7248:	67 95       	ror	r22
    724a:	b7 95       	ror	r27
    724c:	f7 95       	ror	r31
    724e:	9e 3f       	cpi	r25, 0xFE	; 254
    7250:	08 f0       	brcs	.+2      	; 0x7254 <__addsf3x+0x96>
    7252:	b3 cf       	rjmp	.-154    	; 0x71ba <__addsf3+0x1e>
    7254:	93 95       	inc	r25
    7256:	88 0f       	add	r24, r24
    7258:	08 f0       	brcs	.+2      	; 0x725c <__addsf3x+0x9e>
    725a:	99 27       	eor	r25, r25
    725c:	ee 0f       	add	r30, r30
    725e:	97 95       	ror	r25
    7260:	87 95       	ror	r24
    7262:	08 95       	ret

00007264 <__cmpsf2>:
    7264:	dc d0       	rcall	.+440    	; 0x741e <__fp_cmp>
    7266:	08 f4       	brcc	.+2      	; 0x726a <__cmpsf2+0x6>
    7268:	81 e0       	ldi	r24, 0x01	; 1
    726a:	08 95       	ret

0000726c <cos>:
    726c:	14 d1       	rcall	.+552    	; 0x7496 <__fp_rempio2>
    726e:	e3 95       	inc	r30
    7270:	4a c1       	rjmp	.+660    	; 0x7506 <__fp_sinus>

00007272 <__divsf3>:
    7272:	0c d0       	rcall	.+24     	; 0x728c <__divsf3x>
    7274:	37 c1       	rjmp	.+622    	; 0x74e4 <__fp_round>
    7276:	07 d1       	rcall	.+526    	; 0x7486 <__fp_pscB>
    7278:	40 f0       	brcs	.+16     	; 0x728a <__divsf3+0x18>
    727a:	fe d0       	rcall	.+508    	; 0x7478 <__fp_pscA>
    727c:	30 f0       	brcs	.+12     	; 0x728a <__divsf3+0x18>
    727e:	21 f4       	brne	.+8      	; 0x7288 <__divsf3+0x16>
    7280:	5f 3f       	cpi	r21, 0xFF	; 255
    7282:	19 f0       	breq	.+6      	; 0x728a <__divsf3+0x18>
    7284:	f0 c0       	rjmp	.+480    	; 0x7466 <__fp_inf>
    7286:	51 11       	cpse	r21, r1
    7288:	72 c1       	rjmp	.+740    	; 0x756e <__fp_szero>
    728a:	f3 c0       	rjmp	.+486    	; 0x7472 <__fp_nan>

0000728c <__divsf3x>:
    728c:	4d d1       	rcall	.+666    	; 0x7528 <__fp_split3>
    728e:	98 f3       	brcs	.-26     	; 0x7276 <__divsf3+0x4>

00007290 <__divsf3_pse>:
    7290:	99 23       	and	r25, r25
    7292:	c9 f3       	breq	.-14     	; 0x7286 <__divsf3+0x14>
    7294:	55 23       	and	r21, r21
    7296:	b1 f3       	breq	.-20     	; 0x7284 <__divsf3+0x12>
    7298:	95 1b       	sub	r25, r21
    729a:	55 0b       	sbc	r21, r21
    729c:	bb 27       	eor	r27, r27
    729e:	aa 27       	eor	r26, r26
    72a0:	62 17       	cp	r22, r18
    72a2:	73 07       	cpc	r23, r19
    72a4:	84 07       	cpc	r24, r20
    72a6:	38 f0       	brcs	.+14     	; 0x72b6 <__divsf3_pse+0x26>
    72a8:	9f 5f       	subi	r25, 0xFF	; 255
    72aa:	5f 4f       	sbci	r21, 0xFF	; 255
    72ac:	22 0f       	add	r18, r18
    72ae:	33 1f       	adc	r19, r19
    72b0:	44 1f       	adc	r20, r20
    72b2:	aa 1f       	adc	r26, r26
    72b4:	a9 f3       	breq	.-22     	; 0x72a0 <__divsf3_pse+0x10>
    72b6:	33 d0       	rcall	.+102    	; 0x731e <__divsf3_pse+0x8e>
    72b8:	0e 2e       	mov	r0, r30
    72ba:	3a f0       	brmi	.+14     	; 0x72ca <__divsf3_pse+0x3a>
    72bc:	e0 e8       	ldi	r30, 0x80	; 128
    72be:	30 d0       	rcall	.+96     	; 0x7320 <__divsf3_pse+0x90>
    72c0:	91 50       	subi	r25, 0x01	; 1
    72c2:	50 40       	sbci	r21, 0x00	; 0
    72c4:	e6 95       	lsr	r30
    72c6:	00 1c       	adc	r0, r0
    72c8:	ca f7       	brpl	.-14     	; 0x72bc <__divsf3_pse+0x2c>
    72ca:	29 d0       	rcall	.+82     	; 0x731e <__divsf3_pse+0x8e>
    72cc:	fe 2f       	mov	r31, r30
    72ce:	27 d0       	rcall	.+78     	; 0x731e <__divsf3_pse+0x8e>
    72d0:	66 0f       	add	r22, r22
    72d2:	77 1f       	adc	r23, r23
    72d4:	88 1f       	adc	r24, r24
    72d6:	bb 1f       	adc	r27, r27
    72d8:	26 17       	cp	r18, r22
    72da:	37 07       	cpc	r19, r23
    72dc:	48 07       	cpc	r20, r24
    72de:	ab 07       	cpc	r26, r27
    72e0:	b0 e8       	ldi	r27, 0x80	; 128
    72e2:	09 f0       	breq	.+2      	; 0x72e6 <__divsf3_pse+0x56>
    72e4:	bb 0b       	sbc	r27, r27
    72e6:	80 2d       	mov	r24, r0
    72e8:	bf 01       	movw	r22, r30
    72ea:	ff 27       	eor	r31, r31
    72ec:	93 58       	subi	r25, 0x83	; 131
    72ee:	5f 4f       	sbci	r21, 0xFF	; 255
    72f0:	2a f0       	brmi	.+10     	; 0x72fc <__divsf3_pse+0x6c>
    72f2:	9e 3f       	cpi	r25, 0xFE	; 254
    72f4:	51 05       	cpc	r21, r1
    72f6:	68 f0       	brcs	.+26     	; 0x7312 <__divsf3_pse+0x82>
    72f8:	b6 c0       	rjmp	.+364    	; 0x7466 <__fp_inf>
    72fa:	39 c1       	rjmp	.+626    	; 0x756e <__fp_szero>
    72fc:	5f 3f       	cpi	r21, 0xFF	; 255
    72fe:	ec f3       	brlt	.-6      	; 0x72fa <__divsf3_pse+0x6a>
    7300:	98 3e       	cpi	r25, 0xE8	; 232
    7302:	dc f3       	brlt	.-10     	; 0x72fa <__divsf3_pse+0x6a>
    7304:	86 95       	lsr	r24
    7306:	77 95       	ror	r23
    7308:	67 95       	ror	r22
    730a:	b7 95       	ror	r27
    730c:	f7 95       	ror	r31
    730e:	9f 5f       	subi	r25, 0xFF	; 255
    7310:	c9 f7       	brne	.-14     	; 0x7304 <__divsf3_pse+0x74>
    7312:	88 0f       	add	r24, r24
    7314:	91 1d       	adc	r25, r1
    7316:	96 95       	lsr	r25
    7318:	87 95       	ror	r24
    731a:	97 f9       	bld	r25, 7
    731c:	08 95       	ret
    731e:	e1 e0       	ldi	r30, 0x01	; 1
    7320:	66 0f       	add	r22, r22
    7322:	77 1f       	adc	r23, r23
    7324:	88 1f       	adc	r24, r24
    7326:	bb 1f       	adc	r27, r27
    7328:	62 17       	cp	r22, r18
    732a:	73 07       	cpc	r23, r19
    732c:	84 07       	cpc	r24, r20
    732e:	ba 07       	cpc	r27, r26
    7330:	20 f0       	brcs	.+8      	; 0x733a <__divsf3_pse+0xaa>
    7332:	62 1b       	sub	r22, r18
    7334:	73 0b       	sbc	r23, r19
    7336:	84 0b       	sbc	r24, r20
    7338:	ba 0b       	sbc	r27, r26
    733a:	ee 1f       	adc	r30, r30
    733c:	88 f7       	brcc	.-30     	; 0x7320 <__divsf3_pse+0x90>
    733e:	e0 95       	com	r30
    7340:	08 95       	ret

00007342 <__fixsfsi>:
    7342:	04 d0       	rcall	.+8      	; 0x734c <__fixunssfsi>
    7344:	68 94       	set
    7346:	b1 11       	cpse	r27, r1
    7348:	12 c1       	rjmp	.+548    	; 0x756e <__fp_szero>
    734a:	08 95       	ret

0000734c <__fixunssfsi>:
    734c:	f5 d0       	rcall	.+490    	; 0x7538 <__fp_splitA>
    734e:	88 f0       	brcs	.+34     	; 0x7372 <__fixunssfsi+0x26>
    7350:	9f 57       	subi	r25, 0x7F	; 127
    7352:	90 f0       	brcs	.+36     	; 0x7378 <__fixunssfsi+0x2c>
    7354:	b9 2f       	mov	r27, r25
    7356:	99 27       	eor	r25, r25
    7358:	b7 51       	subi	r27, 0x17	; 23
    735a:	a0 f0       	brcs	.+40     	; 0x7384 <__fixunssfsi+0x38>
    735c:	d1 f0       	breq	.+52     	; 0x7392 <__fixunssfsi+0x46>
    735e:	66 0f       	add	r22, r22
    7360:	77 1f       	adc	r23, r23
    7362:	88 1f       	adc	r24, r24
    7364:	99 1f       	adc	r25, r25
    7366:	1a f0       	brmi	.+6      	; 0x736e <__fixunssfsi+0x22>
    7368:	ba 95       	dec	r27
    736a:	c9 f7       	brne	.-14     	; 0x735e <__fixunssfsi+0x12>
    736c:	12 c0       	rjmp	.+36     	; 0x7392 <__fixunssfsi+0x46>
    736e:	b1 30       	cpi	r27, 0x01	; 1
    7370:	81 f0       	breq	.+32     	; 0x7392 <__fixunssfsi+0x46>
    7372:	fc d0       	rcall	.+504    	; 0x756c <__fp_zero>
    7374:	b1 e0       	ldi	r27, 0x01	; 1
    7376:	08 95       	ret
    7378:	f9 c0       	rjmp	.+498    	; 0x756c <__fp_zero>
    737a:	67 2f       	mov	r22, r23
    737c:	78 2f       	mov	r23, r24
    737e:	88 27       	eor	r24, r24
    7380:	b8 5f       	subi	r27, 0xF8	; 248
    7382:	39 f0       	breq	.+14     	; 0x7392 <__fixunssfsi+0x46>
    7384:	b9 3f       	cpi	r27, 0xF9	; 249
    7386:	cc f3       	brlt	.-14     	; 0x737a <__fixunssfsi+0x2e>
    7388:	86 95       	lsr	r24
    738a:	77 95       	ror	r23
    738c:	67 95       	ror	r22
    738e:	b3 95       	inc	r27
    7390:	d9 f7       	brne	.-10     	; 0x7388 <__fixunssfsi+0x3c>
    7392:	3e f4       	brtc	.+14     	; 0x73a2 <__fixunssfsi+0x56>
    7394:	90 95       	com	r25
    7396:	80 95       	com	r24
    7398:	70 95       	com	r23
    739a:	61 95       	neg	r22
    739c:	7f 4f       	sbci	r23, 0xFF	; 255
    739e:	8f 4f       	sbci	r24, 0xFF	; 255
    73a0:	9f 4f       	sbci	r25, 0xFF	; 255
    73a2:	08 95       	ret

000073a4 <__floatunsisf>:
    73a4:	e8 94       	clt
    73a6:	09 c0       	rjmp	.+18     	; 0x73ba <__floatsisf+0x12>

000073a8 <__floatsisf>:
    73a8:	97 fb       	bst	r25, 7
    73aa:	3e f4       	brtc	.+14     	; 0x73ba <__floatsisf+0x12>
    73ac:	90 95       	com	r25
    73ae:	80 95       	com	r24
    73b0:	70 95       	com	r23
    73b2:	61 95       	neg	r22
    73b4:	7f 4f       	sbci	r23, 0xFF	; 255
    73b6:	8f 4f       	sbci	r24, 0xFF	; 255
    73b8:	9f 4f       	sbci	r25, 0xFF	; 255
    73ba:	99 23       	and	r25, r25
    73bc:	a9 f0       	breq	.+42     	; 0x73e8 <__floatsisf+0x40>
    73be:	f9 2f       	mov	r31, r25
    73c0:	96 e9       	ldi	r25, 0x96	; 150
    73c2:	bb 27       	eor	r27, r27
    73c4:	93 95       	inc	r25
    73c6:	f6 95       	lsr	r31
    73c8:	87 95       	ror	r24
    73ca:	77 95       	ror	r23
    73cc:	67 95       	ror	r22
    73ce:	b7 95       	ror	r27
    73d0:	f1 11       	cpse	r31, r1
    73d2:	f8 cf       	rjmp	.-16     	; 0x73c4 <__floatsisf+0x1c>
    73d4:	fa f4       	brpl	.+62     	; 0x7414 <__floatsisf+0x6c>
    73d6:	bb 0f       	add	r27, r27
    73d8:	11 f4       	brne	.+4      	; 0x73de <__floatsisf+0x36>
    73da:	60 ff       	sbrs	r22, 0
    73dc:	1b c0       	rjmp	.+54     	; 0x7414 <__floatsisf+0x6c>
    73de:	6f 5f       	subi	r22, 0xFF	; 255
    73e0:	7f 4f       	sbci	r23, 0xFF	; 255
    73e2:	8f 4f       	sbci	r24, 0xFF	; 255
    73e4:	9f 4f       	sbci	r25, 0xFF	; 255
    73e6:	16 c0       	rjmp	.+44     	; 0x7414 <__floatsisf+0x6c>
    73e8:	88 23       	and	r24, r24
    73ea:	11 f0       	breq	.+4      	; 0x73f0 <__floatsisf+0x48>
    73ec:	96 e9       	ldi	r25, 0x96	; 150
    73ee:	11 c0       	rjmp	.+34     	; 0x7412 <__floatsisf+0x6a>
    73f0:	77 23       	and	r23, r23
    73f2:	21 f0       	breq	.+8      	; 0x73fc <__floatsisf+0x54>
    73f4:	9e e8       	ldi	r25, 0x8E	; 142
    73f6:	87 2f       	mov	r24, r23
    73f8:	76 2f       	mov	r23, r22
    73fa:	05 c0       	rjmp	.+10     	; 0x7406 <__floatsisf+0x5e>
    73fc:	66 23       	and	r22, r22
    73fe:	71 f0       	breq	.+28     	; 0x741c <__floatsisf+0x74>
    7400:	96 e8       	ldi	r25, 0x86	; 134
    7402:	86 2f       	mov	r24, r22
    7404:	70 e0       	ldi	r23, 0x00	; 0
    7406:	60 e0       	ldi	r22, 0x00	; 0
    7408:	2a f0       	brmi	.+10     	; 0x7414 <__floatsisf+0x6c>
    740a:	9a 95       	dec	r25
    740c:	66 0f       	add	r22, r22
    740e:	77 1f       	adc	r23, r23
    7410:	88 1f       	adc	r24, r24
    7412:	da f7       	brpl	.-10     	; 0x740a <__floatsisf+0x62>
    7414:	88 0f       	add	r24, r24
    7416:	96 95       	lsr	r25
    7418:	87 95       	ror	r24
    741a:	97 f9       	bld	r25, 7
    741c:	08 95       	ret

0000741e <__fp_cmp>:
    741e:	99 0f       	add	r25, r25
    7420:	00 08       	sbc	r0, r0
    7422:	55 0f       	add	r21, r21
    7424:	aa 0b       	sbc	r26, r26
    7426:	e0 e8       	ldi	r30, 0x80	; 128
    7428:	fe ef       	ldi	r31, 0xFE	; 254
    742a:	16 16       	cp	r1, r22
    742c:	17 06       	cpc	r1, r23
    742e:	e8 07       	cpc	r30, r24
    7430:	f9 07       	cpc	r31, r25
    7432:	c0 f0       	brcs	.+48     	; 0x7464 <__fp_cmp+0x46>
    7434:	12 16       	cp	r1, r18
    7436:	13 06       	cpc	r1, r19
    7438:	e4 07       	cpc	r30, r20
    743a:	f5 07       	cpc	r31, r21
    743c:	98 f0       	brcs	.+38     	; 0x7464 <__fp_cmp+0x46>
    743e:	62 1b       	sub	r22, r18
    7440:	73 0b       	sbc	r23, r19
    7442:	84 0b       	sbc	r24, r20
    7444:	95 0b       	sbc	r25, r21
    7446:	39 f4       	brne	.+14     	; 0x7456 <__fp_cmp+0x38>
    7448:	0a 26       	eor	r0, r26
    744a:	61 f0       	breq	.+24     	; 0x7464 <__fp_cmp+0x46>
    744c:	23 2b       	or	r18, r19
    744e:	24 2b       	or	r18, r20
    7450:	25 2b       	or	r18, r21
    7452:	21 f4       	brne	.+8      	; 0x745c <__fp_cmp+0x3e>
    7454:	08 95       	ret
    7456:	0a 26       	eor	r0, r26
    7458:	09 f4       	brne	.+2      	; 0x745c <__fp_cmp+0x3e>
    745a:	a1 40       	sbci	r26, 0x01	; 1
    745c:	a6 95       	lsr	r26
    745e:	8f ef       	ldi	r24, 0xFF	; 255
    7460:	81 1d       	adc	r24, r1
    7462:	81 1d       	adc	r24, r1
    7464:	08 95       	ret

00007466 <__fp_inf>:
    7466:	97 f9       	bld	r25, 7
    7468:	9f 67       	ori	r25, 0x7F	; 127
    746a:	80 e8       	ldi	r24, 0x80	; 128
    746c:	70 e0       	ldi	r23, 0x00	; 0
    746e:	60 e0       	ldi	r22, 0x00	; 0
    7470:	08 95       	ret

00007472 <__fp_nan>:
    7472:	9f ef       	ldi	r25, 0xFF	; 255
    7474:	80 ec       	ldi	r24, 0xC0	; 192
    7476:	08 95       	ret

00007478 <__fp_pscA>:
    7478:	00 24       	eor	r0, r0
    747a:	0a 94       	dec	r0
    747c:	16 16       	cp	r1, r22
    747e:	17 06       	cpc	r1, r23
    7480:	18 06       	cpc	r1, r24
    7482:	09 06       	cpc	r0, r25
    7484:	08 95       	ret

00007486 <__fp_pscB>:
    7486:	00 24       	eor	r0, r0
    7488:	0a 94       	dec	r0
    748a:	12 16       	cp	r1, r18
    748c:	13 06       	cpc	r1, r19
    748e:	14 06       	cpc	r1, r20
    7490:	05 06       	cpc	r0, r21
    7492:	08 95       	ret
    7494:	ee cf       	rjmp	.-36     	; 0x7472 <__fp_nan>

00007496 <__fp_rempio2>:
    7496:	50 d0       	rcall	.+160    	; 0x7538 <__fp_splitA>
    7498:	e8 f3       	brcs	.-6      	; 0x7494 <__fp_pscB+0xe>
    749a:	e8 94       	clt
    749c:	e0 e0       	ldi	r30, 0x00	; 0
    749e:	bb 27       	eor	r27, r27
    74a0:	9f 57       	subi	r25, 0x7F	; 127
    74a2:	f0 f0       	brcs	.+60     	; 0x74e0 <__fp_rempio2+0x4a>
    74a4:	2a ed       	ldi	r18, 0xDA	; 218
    74a6:	3f e0       	ldi	r19, 0x0F	; 15
    74a8:	49 ec       	ldi	r20, 0xC9	; 201
    74aa:	06 c0       	rjmp	.+12     	; 0x74b8 <__fp_rempio2+0x22>
    74ac:	ee 0f       	add	r30, r30
    74ae:	bb 0f       	add	r27, r27
    74b0:	66 1f       	adc	r22, r22
    74b2:	77 1f       	adc	r23, r23
    74b4:	88 1f       	adc	r24, r24
    74b6:	28 f0       	brcs	.+10     	; 0x74c2 <__fp_rempio2+0x2c>
    74b8:	b2 3a       	cpi	r27, 0xA2	; 162
    74ba:	62 07       	cpc	r22, r18
    74bc:	73 07       	cpc	r23, r19
    74be:	84 07       	cpc	r24, r20
    74c0:	28 f0       	brcs	.+10     	; 0x74cc <__fp_rempio2+0x36>
    74c2:	b2 5a       	subi	r27, 0xA2	; 162
    74c4:	62 0b       	sbc	r22, r18
    74c6:	73 0b       	sbc	r23, r19
    74c8:	84 0b       	sbc	r24, r20
    74ca:	e3 95       	inc	r30
    74cc:	9a 95       	dec	r25
    74ce:	72 f7       	brpl	.-36     	; 0x74ac <__fp_rempio2+0x16>
    74d0:	80 38       	cpi	r24, 0x80	; 128
    74d2:	30 f4       	brcc	.+12     	; 0x74e0 <__fp_rempio2+0x4a>
    74d4:	9a 95       	dec	r25
    74d6:	bb 0f       	add	r27, r27
    74d8:	66 1f       	adc	r22, r22
    74da:	77 1f       	adc	r23, r23
    74dc:	88 1f       	adc	r24, r24
    74de:	d2 f7       	brpl	.-12     	; 0x74d4 <__fp_rempio2+0x3e>
    74e0:	90 48       	sbci	r25, 0x80	; 128
    74e2:	1c c1       	rjmp	.+568    	; 0x771c <__fp_mpack_finite>

000074e4 <__fp_round>:
    74e4:	09 2e       	mov	r0, r25
    74e6:	03 94       	inc	r0
    74e8:	00 0c       	add	r0, r0
    74ea:	11 f4       	brne	.+4      	; 0x74f0 <__fp_round+0xc>
    74ec:	88 23       	and	r24, r24
    74ee:	52 f0       	brmi	.+20     	; 0x7504 <__fp_round+0x20>
    74f0:	bb 0f       	add	r27, r27
    74f2:	40 f4       	brcc	.+16     	; 0x7504 <__fp_round+0x20>
    74f4:	bf 2b       	or	r27, r31
    74f6:	11 f4       	brne	.+4      	; 0x74fc <__fp_round+0x18>
    74f8:	60 ff       	sbrs	r22, 0
    74fa:	04 c0       	rjmp	.+8      	; 0x7504 <__fp_round+0x20>
    74fc:	6f 5f       	subi	r22, 0xFF	; 255
    74fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7500:	8f 4f       	sbci	r24, 0xFF	; 255
    7502:	9f 4f       	sbci	r25, 0xFF	; 255
    7504:	08 95       	ret

00007506 <__fp_sinus>:
    7506:	ef 93       	push	r30
    7508:	e0 ff       	sbrs	r30, 0
    750a:	06 c0       	rjmp	.+12     	; 0x7518 <__fp_sinus+0x12>
    750c:	a2 ea       	ldi	r26, 0xA2	; 162
    750e:	2a ed       	ldi	r18, 0xDA	; 218
    7510:	3f e0       	ldi	r19, 0x0F	; 15
    7512:	49 ec       	ldi	r20, 0xC9	; 201
    7514:	5f eb       	ldi	r21, 0xBF	; 191
    7516:	53 de       	rcall	.-858    	; 0x71be <__addsf3x>
    7518:	e5 df       	rcall	.-54     	; 0x74e4 <__fp_round>
    751a:	0f 90       	pop	r0
    751c:	03 94       	inc	r0
    751e:	01 fc       	sbrc	r0, 1
    7520:	90 58       	subi	r25, 0x80	; 128
    7522:	ec e9       	ldi	r30, 0x9C	; 156
    7524:	f0 e0       	ldi	r31, 0x00	; 0
    7526:	0d c1       	rjmp	.+538    	; 0x7742 <__fp_powsodd>

00007528 <__fp_split3>:
    7528:	57 fd       	sbrc	r21, 7
    752a:	90 58       	subi	r25, 0x80	; 128
    752c:	44 0f       	add	r20, r20
    752e:	55 1f       	adc	r21, r21
    7530:	59 f0       	breq	.+22     	; 0x7548 <__fp_splitA+0x10>
    7532:	5f 3f       	cpi	r21, 0xFF	; 255
    7534:	71 f0       	breq	.+28     	; 0x7552 <__fp_splitA+0x1a>
    7536:	47 95       	ror	r20

00007538 <__fp_splitA>:
    7538:	88 0f       	add	r24, r24
    753a:	97 fb       	bst	r25, 7
    753c:	99 1f       	adc	r25, r25
    753e:	61 f0       	breq	.+24     	; 0x7558 <__fp_splitA+0x20>
    7540:	9f 3f       	cpi	r25, 0xFF	; 255
    7542:	79 f0       	breq	.+30     	; 0x7562 <__fp_splitA+0x2a>
    7544:	87 95       	ror	r24
    7546:	08 95       	ret
    7548:	12 16       	cp	r1, r18
    754a:	13 06       	cpc	r1, r19
    754c:	14 06       	cpc	r1, r20
    754e:	55 1f       	adc	r21, r21
    7550:	f2 cf       	rjmp	.-28     	; 0x7536 <__fp_split3+0xe>
    7552:	46 95       	lsr	r20
    7554:	f1 df       	rcall	.-30     	; 0x7538 <__fp_splitA>
    7556:	08 c0       	rjmp	.+16     	; 0x7568 <__fp_splitA+0x30>
    7558:	16 16       	cp	r1, r22
    755a:	17 06       	cpc	r1, r23
    755c:	18 06       	cpc	r1, r24
    755e:	99 1f       	adc	r25, r25
    7560:	f1 cf       	rjmp	.-30     	; 0x7544 <__fp_splitA+0xc>
    7562:	86 95       	lsr	r24
    7564:	71 05       	cpc	r23, r1
    7566:	61 05       	cpc	r22, r1
    7568:	08 94       	sec
    756a:	08 95       	ret

0000756c <__fp_zero>:
    756c:	e8 94       	clt

0000756e <__fp_szero>:
    756e:	bb 27       	eor	r27, r27
    7570:	66 27       	eor	r22, r22
    7572:	77 27       	eor	r23, r23
    7574:	cb 01       	movw	r24, r22
    7576:	97 f9       	bld	r25, 7
    7578:	08 95       	ret

0000757a <__gesf2>:
    757a:	51 df       	rcall	.-350    	; 0x741e <__fp_cmp>
    757c:	08 f4       	brcc	.+2      	; 0x7580 <__gesf2+0x6>
    757e:	8f ef       	ldi	r24, 0xFF	; 255
    7580:	08 95       	ret

00007582 <__mulsf3>:
    7582:	0b d0       	rcall	.+22     	; 0x759a <__mulsf3x>
    7584:	af cf       	rjmp	.-162    	; 0x74e4 <__fp_round>
    7586:	78 df       	rcall	.-272    	; 0x7478 <__fp_pscA>
    7588:	28 f0       	brcs	.+10     	; 0x7594 <__mulsf3+0x12>
    758a:	7d df       	rcall	.-262    	; 0x7486 <__fp_pscB>
    758c:	18 f0       	brcs	.+6      	; 0x7594 <__mulsf3+0x12>
    758e:	95 23       	and	r25, r21
    7590:	09 f0       	breq	.+2      	; 0x7594 <__mulsf3+0x12>
    7592:	69 cf       	rjmp	.-302    	; 0x7466 <__fp_inf>
    7594:	6e cf       	rjmp	.-292    	; 0x7472 <__fp_nan>
    7596:	11 24       	eor	r1, r1
    7598:	ea cf       	rjmp	.-44     	; 0x756e <__fp_szero>

0000759a <__mulsf3x>:
    759a:	c6 df       	rcall	.-116    	; 0x7528 <__fp_split3>
    759c:	a0 f3       	brcs	.-24     	; 0x7586 <__mulsf3+0x4>

0000759e <__mulsf3_pse>:
    759e:	95 9f       	mul	r25, r21
    75a0:	d1 f3       	breq	.-12     	; 0x7596 <__mulsf3+0x14>
    75a2:	95 0f       	add	r25, r21
    75a4:	50 e0       	ldi	r21, 0x00	; 0
    75a6:	55 1f       	adc	r21, r21
    75a8:	62 9f       	mul	r22, r18
    75aa:	f0 01       	movw	r30, r0
    75ac:	72 9f       	mul	r23, r18
    75ae:	bb 27       	eor	r27, r27
    75b0:	f0 0d       	add	r31, r0
    75b2:	b1 1d       	adc	r27, r1
    75b4:	63 9f       	mul	r22, r19
    75b6:	aa 27       	eor	r26, r26
    75b8:	f0 0d       	add	r31, r0
    75ba:	b1 1d       	adc	r27, r1
    75bc:	aa 1f       	adc	r26, r26
    75be:	64 9f       	mul	r22, r20
    75c0:	66 27       	eor	r22, r22
    75c2:	b0 0d       	add	r27, r0
    75c4:	a1 1d       	adc	r26, r1
    75c6:	66 1f       	adc	r22, r22
    75c8:	82 9f       	mul	r24, r18
    75ca:	22 27       	eor	r18, r18
    75cc:	b0 0d       	add	r27, r0
    75ce:	a1 1d       	adc	r26, r1
    75d0:	62 1f       	adc	r22, r18
    75d2:	73 9f       	mul	r23, r19
    75d4:	b0 0d       	add	r27, r0
    75d6:	a1 1d       	adc	r26, r1
    75d8:	62 1f       	adc	r22, r18
    75da:	83 9f       	mul	r24, r19
    75dc:	a0 0d       	add	r26, r0
    75de:	61 1d       	adc	r22, r1
    75e0:	22 1f       	adc	r18, r18
    75e2:	74 9f       	mul	r23, r20
    75e4:	33 27       	eor	r19, r19
    75e6:	a0 0d       	add	r26, r0
    75e8:	61 1d       	adc	r22, r1
    75ea:	23 1f       	adc	r18, r19
    75ec:	84 9f       	mul	r24, r20
    75ee:	60 0d       	add	r22, r0
    75f0:	21 1d       	adc	r18, r1
    75f2:	82 2f       	mov	r24, r18
    75f4:	76 2f       	mov	r23, r22
    75f6:	6a 2f       	mov	r22, r26
    75f8:	11 24       	eor	r1, r1
    75fa:	9f 57       	subi	r25, 0x7F	; 127
    75fc:	50 40       	sbci	r21, 0x00	; 0
    75fe:	8a f0       	brmi	.+34     	; 0x7622 <__mulsf3_pse+0x84>
    7600:	e1 f0       	breq	.+56     	; 0x763a <__mulsf3_pse+0x9c>
    7602:	88 23       	and	r24, r24
    7604:	4a f0       	brmi	.+18     	; 0x7618 <__mulsf3_pse+0x7a>
    7606:	ee 0f       	add	r30, r30
    7608:	ff 1f       	adc	r31, r31
    760a:	bb 1f       	adc	r27, r27
    760c:	66 1f       	adc	r22, r22
    760e:	77 1f       	adc	r23, r23
    7610:	88 1f       	adc	r24, r24
    7612:	91 50       	subi	r25, 0x01	; 1
    7614:	50 40       	sbci	r21, 0x00	; 0
    7616:	a9 f7       	brne	.-22     	; 0x7602 <__mulsf3_pse+0x64>
    7618:	9e 3f       	cpi	r25, 0xFE	; 254
    761a:	51 05       	cpc	r21, r1
    761c:	70 f0       	brcs	.+28     	; 0x763a <__mulsf3_pse+0x9c>
    761e:	23 cf       	rjmp	.-442    	; 0x7466 <__fp_inf>
    7620:	a6 cf       	rjmp	.-180    	; 0x756e <__fp_szero>
    7622:	5f 3f       	cpi	r21, 0xFF	; 255
    7624:	ec f3       	brlt	.-6      	; 0x7620 <__mulsf3_pse+0x82>
    7626:	98 3e       	cpi	r25, 0xE8	; 232
    7628:	dc f3       	brlt	.-10     	; 0x7620 <__mulsf3_pse+0x82>
    762a:	86 95       	lsr	r24
    762c:	77 95       	ror	r23
    762e:	67 95       	ror	r22
    7630:	b7 95       	ror	r27
    7632:	f7 95       	ror	r31
    7634:	e7 95       	ror	r30
    7636:	9f 5f       	subi	r25, 0xFF	; 255
    7638:	c1 f7       	brne	.-16     	; 0x762a <__mulsf3_pse+0x8c>
    763a:	fe 2b       	or	r31, r30
    763c:	88 0f       	add	r24, r24
    763e:	91 1d       	adc	r25, r1
    7640:	96 95       	lsr	r25
    7642:	87 95       	ror	r24
    7644:	97 f9       	bld	r25, 7
    7646:	08 95       	ret

00007648 <sin>:
    7648:	9f 93       	push	r25
    764a:	25 df       	rcall	.-438    	; 0x7496 <__fp_rempio2>
    764c:	0f 90       	pop	r0
    764e:	07 fc       	sbrc	r0, 7
    7650:	ee 5f       	subi	r30, 0xFE	; 254
    7652:	59 cf       	rjmp	.-334    	; 0x7506 <__fp_sinus>
    7654:	11 f4       	brne	.+4      	; 0x765a <sin+0x12>
    7656:	0e f4       	brtc	.+2      	; 0x765a <sin+0x12>
    7658:	0c cf       	rjmp	.-488    	; 0x7472 <__fp_nan>
    765a:	5e c0       	rjmp	.+188    	; 0x7718 <__fp_mpack>

0000765c <sqrt>:
    765c:	6d df       	rcall	.-294    	; 0x7538 <__fp_splitA>
    765e:	d0 f3       	brcs	.-12     	; 0x7654 <sin+0xc>
    7660:	99 23       	and	r25, r25
    7662:	d9 f3       	breq	.-10     	; 0x765a <sin+0x12>
    7664:	ce f3       	brts	.-14     	; 0x7658 <sin+0x10>
    7666:	9f 57       	subi	r25, 0x7F	; 127
    7668:	55 0b       	sbc	r21, r21
    766a:	87 ff       	sbrs	r24, 7
    766c:	63 d0       	rcall	.+198    	; 0x7734 <__fp_norm2>
    766e:	00 24       	eor	r0, r0
    7670:	a0 e6       	ldi	r26, 0x60	; 96
    7672:	40 ea       	ldi	r20, 0xA0	; 160
    7674:	90 01       	movw	r18, r0
    7676:	80 58       	subi	r24, 0x80	; 128
    7678:	56 95       	lsr	r21
    767a:	97 95       	ror	r25
    767c:	28 f4       	brcc	.+10     	; 0x7688 <sqrt+0x2c>
    767e:	80 5c       	subi	r24, 0xC0	; 192
    7680:	66 0f       	add	r22, r22
    7682:	77 1f       	adc	r23, r23
    7684:	88 1f       	adc	r24, r24
    7686:	20 f0       	brcs	.+8      	; 0x7690 <sqrt+0x34>
    7688:	26 17       	cp	r18, r22
    768a:	37 07       	cpc	r19, r23
    768c:	48 07       	cpc	r20, r24
    768e:	30 f4       	brcc	.+12     	; 0x769c <sqrt+0x40>
    7690:	62 1b       	sub	r22, r18
    7692:	73 0b       	sbc	r23, r19
    7694:	84 0b       	sbc	r24, r20
    7696:	20 29       	or	r18, r0
    7698:	31 29       	or	r19, r1
    769a:	4a 2b       	or	r20, r26
    769c:	a6 95       	lsr	r26
    769e:	17 94       	ror	r1
    76a0:	07 94       	ror	r0
    76a2:	20 25       	eor	r18, r0
    76a4:	31 25       	eor	r19, r1
    76a6:	4a 27       	eor	r20, r26
    76a8:	58 f7       	brcc	.-42     	; 0x7680 <sqrt+0x24>
    76aa:	66 0f       	add	r22, r22
    76ac:	77 1f       	adc	r23, r23
    76ae:	88 1f       	adc	r24, r24
    76b0:	20 f0       	brcs	.+8      	; 0x76ba <sqrt+0x5e>
    76b2:	26 17       	cp	r18, r22
    76b4:	37 07       	cpc	r19, r23
    76b6:	48 07       	cpc	r20, r24
    76b8:	30 f4       	brcc	.+12     	; 0x76c6 <sqrt+0x6a>
    76ba:	62 0b       	sbc	r22, r18
    76bc:	73 0b       	sbc	r23, r19
    76be:	84 0b       	sbc	r24, r20
    76c0:	20 0d       	add	r18, r0
    76c2:	31 1d       	adc	r19, r1
    76c4:	41 1d       	adc	r20, r1
    76c6:	a0 95       	com	r26
    76c8:	81 f7       	brne	.-32     	; 0x76aa <sqrt+0x4e>
    76ca:	b9 01       	movw	r22, r18
    76cc:	84 2f       	mov	r24, r20
    76ce:	91 58       	subi	r25, 0x81	; 129
    76d0:	88 0f       	add	r24, r24
    76d2:	96 95       	lsr	r25
    76d4:	87 95       	ror	r24
    76d6:	08 95       	ret

000076d8 <tan>:
    76d8:	df 93       	push	r29
    76da:	d9 2f       	mov	r29, r25
    76dc:	dc de       	rcall	.-584    	; 0x7496 <__fp_rempio2>
    76de:	e6 95       	lsr	r30
    76e0:	d7 95       	ror	r29
    76e2:	2a ed       	ldi	r18, 0xDA	; 218
    76e4:	3f e0       	ldi	r19, 0x0F	; 15
    76e6:	49 e4       	ldi	r20, 0x49	; 73
    76e8:	5f e3       	ldi	r21, 0x3F	; 63
    76ea:	b3 3a       	cpi	r27, 0xA3	; 163
    76ec:	62 07       	cpc	r22, r18
    76ee:	73 07       	cpc	r23, r19
    76f0:	84 07       	cpc	r24, r20
    76f2:	95 07       	cpc	r25, r21
    76f4:	d7 95       	ror	r29
    76f6:	2a f0       	brmi	.+10     	; 0x7702 <tan+0x2a>
    76f8:	a2 ea       	ldi	r26, 0xA2	; 162
    76fa:	49 ec       	ldi	r20, 0xC9	; 201
    76fc:	90 68       	ori	r25, 0x80	; 128
    76fe:	5f dd       	rcall	.-1346   	; 0x71be <__addsf3x>
    7700:	f1 de       	rcall	.-542    	; 0x74e4 <__fp_round>
    7702:	ea eb       	ldi	r30, 0xBA	; 186
    7704:	f0 e0       	ldi	r31, 0x00	; 0
    7706:	1d d0       	rcall	.+58     	; 0x7742 <__fp_powsodd>
    7708:	dd 0f       	add	r29, r29
    770a:	0b f0       	brvs	.+2      	; 0x770e <tan+0x36>
    770c:	2b d0       	rcall	.+86     	; 0x7764 <inverse>
    770e:	dd 0f       	add	r29, r29
    7710:	0b f4       	brvc	.+2      	; 0x7714 <tan+0x3c>
    7712:	90 58       	subi	r25, 0x80	; 128
    7714:	df 91       	pop	r29
    7716:	08 95       	ret

00007718 <__fp_mpack>:
    7718:	9f 3f       	cpi	r25, 0xFF	; 255
    771a:	31 f0       	breq	.+12     	; 0x7728 <__fp_mpack_finite+0xc>

0000771c <__fp_mpack_finite>:
    771c:	91 50       	subi	r25, 0x01	; 1
    771e:	20 f4       	brcc	.+8      	; 0x7728 <__fp_mpack_finite+0xc>
    7720:	87 95       	ror	r24
    7722:	77 95       	ror	r23
    7724:	67 95       	ror	r22
    7726:	b7 95       	ror	r27
    7728:	88 0f       	add	r24, r24
    772a:	91 1d       	adc	r25, r1
    772c:	96 95       	lsr	r25
    772e:	87 95       	ror	r24
    7730:	97 f9       	bld	r25, 7
    7732:	08 95       	ret

00007734 <__fp_norm2>:
    7734:	91 50       	subi	r25, 0x01	; 1
    7736:	50 40       	sbci	r21, 0x00	; 0
    7738:	66 0f       	add	r22, r22
    773a:	77 1f       	adc	r23, r23
    773c:	88 1f       	adc	r24, r24
    773e:	d2 f7       	brpl	.-12     	; 0x7734 <__fp_norm2>
    7740:	08 95       	ret

00007742 <__fp_powsodd>:
    7742:	9f 93       	push	r25
    7744:	8f 93       	push	r24
    7746:	7f 93       	push	r23
    7748:	6f 93       	push	r22
    774a:	ff 93       	push	r31
    774c:	ef 93       	push	r30
    774e:	9b 01       	movw	r18, r22
    7750:	ac 01       	movw	r20, r24
    7752:	17 df       	rcall	.-466    	; 0x7582 <__mulsf3>
    7754:	ef 91       	pop	r30
    7756:	ff 91       	pop	r31
    7758:	0c d0       	rcall	.+24     	; 0x7772 <__fp_powser>
    775a:	2f 91       	pop	r18
    775c:	3f 91       	pop	r19
    775e:	4f 91       	pop	r20
    7760:	5f 91       	pop	r21
    7762:	0f cf       	rjmp	.-482    	; 0x7582 <__mulsf3>

00007764 <inverse>:
    7764:	9b 01       	movw	r18, r22
    7766:	ac 01       	movw	r20, r24
    7768:	60 e0       	ldi	r22, 0x00	; 0
    776a:	70 e0       	ldi	r23, 0x00	; 0
    776c:	80 e8       	ldi	r24, 0x80	; 128
    776e:	9f e3       	ldi	r25, 0x3F	; 63
    7770:	80 cd       	rjmp	.-1280   	; 0x7272 <__divsf3>

00007772 <__fp_powser>:
    7772:	df 93       	push	r29
    7774:	cf 93       	push	r28
    7776:	1f 93       	push	r17
    7778:	0f 93       	push	r16
    777a:	ff 92       	push	r15
    777c:	ef 92       	push	r14
    777e:	df 92       	push	r13
    7780:	7b 01       	movw	r14, r22
    7782:	8c 01       	movw	r16, r24
    7784:	68 94       	set
    7786:	05 c0       	rjmp	.+10     	; 0x7792 <__fp_powser+0x20>
    7788:	da 2e       	mov	r13, r26
    778a:	ef 01       	movw	r28, r30
    778c:	06 df       	rcall	.-500    	; 0x759a <__mulsf3x>
    778e:	fe 01       	movw	r30, r28
    7790:	e8 94       	clt
    7792:	a5 91       	lpm	r26, Z+
    7794:	25 91       	lpm	r18, Z+
    7796:	35 91       	lpm	r19, Z+
    7798:	45 91       	lpm	r20, Z+
    779a:	55 91       	lpm	r21, Z+
    779c:	ae f3       	brts	.-22     	; 0x7788 <__fp_powser+0x16>
    779e:	ef 01       	movw	r28, r30
    77a0:	0e dd       	rcall	.-1508   	; 0x71be <__addsf3x>
    77a2:	fe 01       	movw	r30, r28
    77a4:	97 01       	movw	r18, r14
    77a6:	a8 01       	movw	r20, r16
    77a8:	da 94       	dec	r13
    77aa:	79 f7       	brne	.-34     	; 0x778a <__fp_powser+0x18>
    77ac:	df 90       	pop	r13
    77ae:	ef 90       	pop	r14
    77b0:	ff 90       	pop	r15
    77b2:	0f 91       	pop	r16
    77b4:	1f 91       	pop	r17
    77b6:	cf 91       	pop	r28
    77b8:	df 91       	pop	r29
    77ba:	08 95       	ret

000077bc <__divmodhi4>:
    77bc:	97 fb       	bst	r25, 7
    77be:	09 2e       	mov	r0, r25
    77c0:	07 26       	eor	r0, r23
    77c2:	0a d0       	rcall	.+20     	; 0x77d8 <__divmodhi4_neg1>
    77c4:	77 fd       	sbrc	r23, 7
    77c6:	04 d0       	rcall	.+8      	; 0x77d0 <__divmodhi4_neg2>
    77c8:	0c d0       	rcall	.+24     	; 0x77e2 <__udivmodhi4>
    77ca:	06 d0       	rcall	.+12     	; 0x77d8 <__divmodhi4_neg1>
    77cc:	00 20       	and	r0, r0
    77ce:	1a f4       	brpl	.+6      	; 0x77d6 <__divmodhi4_exit>

000077d0 <__divmodhi4_neg2>:
    77d0:	70 95       	com	r23
    77d2:	61 95       	neg	r22
    77d4:	7f 4f       	sbci	r23, 0xFF	; 255

000077d6 <__divmodhi4_exit>:
    77d6:	08 95       	ret

000077d8 <__divmodhi4_neg1>:
    77d8:	f6 f7       	brtc	.-4      	; 0x77d6 <__divmodhi4_exit>
    77da:	90 95       	com	r25
    77dc:	81 95       	neg	r24
    77de:	9f 4f       	sbci	r25, 0xFF	; 255
    77e0:	08 95       	ret

000077e2 <__udivmodhi4>:
    77e2:	aa 1b       	sub	r26, r26
    77e4:	bb 1b       	sub	r27, r27
    77e6:	51 e1       	ldi	r21, 0x11	; 17
    77e8:	07 c0       	rjmp	.+14     	; 0x77f8 <__udivmodhi4_ep>

000077ea <__udivmodhi4_loop>:
    77ea:	aa 1f       	adc	r26, r26
    77ec:	bb 1f       	adc	r27, r27
    77ee:	a6 17       	cp	r26, r22
    77f0:	b7 07       	cpc	r27, r23
    77f2:	10 f0       	brcs	.+4      	; 0x77f8 <__udivmodhi4_ep>
    77f4:	a6 1b       	sub	r26, r22
    77f6:	b7 0b       	sbc	r27, r23

000077f8 <__udivmodhi4_ep>:
    77f8:	88 1f       	adc	r24, r24
    77fa:	99 1f       	adc	r25, r25
    77fc:	5a 95       	dec	r21
    77fe:	a9 f7       	brne	.-22     	; 0x77ea <__udivmodhi4_loop>
    7800:	80 95       	com	r24
    7802:	90 95       	com	r25
    7804:	bc 01       	movw	r22, r24
    7806:	cd 01       	movw	r24, r26
    7808:	08 95       	ret

0000780a <do_rand>:
    780a:	a0 e0       	ldi	r26, 0x00	; 0
    780c:	b0 e0       	ldi	r27, 0x00	; 0
    780e:	eb e0       	ldi	r30, 0x0B	; 11
    7810:	fc e3       	ldi	r31, 0x3C	; 60
    7812:	0c 94 b0 3c 	jmp	0x7960	; 0x7960 <__prologue_saves__+0x10>
    7816:	ec 01       	movw	r28, r24
    7818:	a8 80       	ld	r10, Y
    781a:	b9 80       	ldd	r11, Y+1	; 0x01
    781c:	ca 80       	ldd	r12, Y+2	; 0x02
    781e:	db 80       	ldd	r13, Y+3	; 0x03
    7820:	a1 14       	cp	r10, r1
    7822:	b1 04       	cpc	r11, r1
    7824:	c1 04       	cpc	r12, r1
    7826:	d1 04       	cpc	r13, r1
    7828:	41 f4       	brne	.+16     	; 0x783a <do_rand+0x30>
    782a:	84 e2       	ldi	r24, 0x24	; 36
    782c:	a8 2e       	mov	r10, r24
    782e:	89 ed       	ldi	r24, 0xD9	; 217
    7830:	b8 2e       	mov	r11, r24
    7832:	8b e5       	ldi	r24, 0x5B	; 91
    7834:	c8 2e       	mov	r12, r24
    7836:	87 e0       	ldi	r24, 0x07	; 7
    7838:	d8 2e       	mov	r13, r24
    783a:	c6 01       	movw	r24, r12
    783c:	b5 01       	movw	r22, r10
    783e:	2d e1       	ldi	r18, 0x1D	; 29
    7840:	33 ef       	ldi	r19, 0xF3	; 243
    7842:	41 e0       	ldi	r20, 0x01	; 1
    7844:	50 e0       	ldi	r21, 0x00	; 0
    7846:	0e 94 8d 3c 	call	0x791a	; 0x791a <__divmodsi4>
    784a:	27 ea       	ldi	r18, 0xA7	; 167
    784c:	31 e4       	ldi	r19, 0x41	; 65
    784e:	40 e0       	ldi	r20, 0x00	; 0
    7850:	50 e0       	ldi	r21, 0x00	; 0
    7852:	0e 94 6e 3c 	call	0x78dc	; 0x78dc <__mulsi3>
    7856:	7b 01       	movw	r14, r22
    7858:	8c 01       	movw	r16, r24
    785a:	c6 01       	movw	r24, r12
    785c:	b5 01       	movw	r22, r10
    785e:	2d e1       	ldi	r18, 0x1D	; 29
    7860:	33 ef       	ldi	r19, 0xF3	; 243
    7862:	41 e0       	ldi	r20, 0x01	; 1
    7864:	50 e0       	ldi	r21, 0x00	; 0
    7866:	0e 94 8d 3c 	call	0x791a	; 0x791a <__divmodsi4>
    786a:	ca 01       	movw	r24, r20
    786c:	b9 01       	movw	r22, r18
    786e:	2c ee       	ldi	r18, 0xEC	; 236
    7870:	34 ef       	ldi	r19, 0xF4	; 244
    7872:	4f ef       	ldi	r20, 0xFF	; 255
    7874:	5f ef       	ldi	r21, 0xFF	; 255
    7876:	0e 94 6e 3c 	call	0x78dc	; 0x78dc <__mulsi3>
    787a:	6e 0d       	add	r22, r14
    787c:	7f 1d       	adc	r23, r15
    787e:	80 1f       	adc	r24, r16
    7880:	91 1f       	adc	r25, r17
    7882:	97 ff       	sbrs	r25, 7
    7884:	04 c0       	rjmp	.+8      	; 0x788e <do_rand+0x84>
    7886:	61 50       	subi	r22, 0x01	; 1
    7888:	70 40       	sbci	r23, 0x00	; 0
    788a:	80 40       	sbci	r24, 0x00	; 0
    788c:	90 48       	sbci	r25, 0x80	; 128
    788e:	68 83       	st	Y, r22
    7890:	79 83       	std	Y+1, r23	; 0x01
    7892:	8a 83       	std	Y+2, r24	; 0x02
    7894:	9b 83       	std	Y+3, r25	; 0x03
    7896:	9b 01       	movw	r18, r22
    7898:	3f 77       	andi	r19, 0x7F	; 127
    789a:	c9 01       	movw	r24, r18
    789c:	cd b7       	in	r28, 0x3d	; 61
    789e:	de b7       	in	r29, 0x3e	; 62
    78a0:	ea e0       	ldi	r30, 0x0A	; 10
    78a2:	0c 94 cc 3c 	jmp	0x7998	; 0x7998 <__epilogue_restores__+0x10>

000078a6 <rand_r>:
    78a6:	0e 94 05 3c 	call	0x780a	; 0x780a <do_rand>
    78aa:	08 95       	ret

000078ac <rand>:
    78ac:	88 ea       	ldi	r24, 0xA8	; 168
    78ae:	91 e0       	ldi	r25, 0x01	; 1
    78b0:	0e 94 05 3c 	call	0x780a	; 0x780a <do_rand>
    78b4:	08 95       	ret

000078b6 <srand>:
    78b6:	a0 e0       	ldi	r26, 0x00	; 0
    78b8:	b0 e0       	ldi	r27, 0x00	; 0
    78ba:	80 93 a8 01 	sts	0x01A8, r24
    78be:	90 93 a9 01 	sts	0x01A9, r25
    78c2:	a0 93 aa 01 	sts	0x01AA, r26
    78c6:	b0 93 ab 01 	sts	0x01AB, r27
    78ca:	08 95       	ret

000078cc <__eerd_byte_m32>:
    78cc:	e1 99       	sbic	0x1c, 1	; 28
    78ce:	fe cf       	rjmp	.-4      	; 0x78cc <__eerd_byte_m32>
    78d0:	9f bb       	out	0x1f, r25	; 31
    78d2:	8e bb       	out	0x1e, r24	; 30
    78d4:	e0 9a       	sbi	0x1c, 0	; 28
    78d6:	99 27       	eor	r25, r25
    78d8:	8d b3       	in	r24, 0x1d	; 29
    78da:	08 95       	ret

000078dc <__mulsi3>:
    78dc:	62 9f       	mul	r22, r18
    78de:	d0 01       	movw	r26, r0
    78e0:	73 9f       	mul	r23, r19
    78e2:	f0 01       	movw	r30, r0
    78e4:	82 9f       	mul	r24, r18
    78e6:	e0 0d       	add	r30, r0
    78e8:	f1 1d       	adc	r31, r1
    78ea:	64 9f       	mul	r22, r20
    78ec:	e0 0d       	add	r30, r0
    78ee:	f1 1d       	adc	r31, r1
    78f0:	92 9f       	mul	r25, r18
    78f2:	f0 0d       	add	r31, r0
    78f4:	83 9f       	mul	r24, r19
    78f6:	f0 0d       	add	r31, r0
    78f8:	74 9f       	mul	r23, r20
    78fa:	f0 0d       	add	r31, r0
    78fc:	65 9f       	mul	r22, r21
    78fe:	f0 0d       	add	r31, r0
    7900:	99 27       	eor	r25, r25
    7902:	72 9f       	mul	r23, r18
    7904:	b0 0d       	add	r27, r0
    7906:	e1 1d       	adc	r30, r1
    7908:	f9 1f       	adc	r31, r25
    790a:	63 9f       	mul	r22, r19
    790c:	b0 0d       	add	r27, r0
    790e:	e1 1d       	adc	r30, r1
    7910:	f9 1f       	adc	r31, r25
    7912:	bd 01       	movw	r22, r26
    7914:	cf 01       	movw	r24, r30
    7916:	11 24       	eor	r1, r1
    7918:	08 95       	ret

0000791a <__divmodsi4>:
    791a:	97 fb       	bst	r25, 7
    791c:	09 2e       	mov	r0, r25
    791e:	05 26       	eor	r0, r21
    7920:	0e d0       	rcall	.+28     	; 0x793e <__divmodsi4_neg1>
    7922:	57 fd       	sbrc	r21, 7
    7924:	04 d0       	rcall	.+8      	; 0x792e <__divmodsi4_neg2>
    7926:	4b d0       	rcall	.+150    	; 0x79be <__udivmodsi4>
    7928:	0a d0       	rcall	.+20     	; 0x793e <__divmodsi4_neg1>
    792a:	00 1c       	adc	r0, r0
    792c:	38 f4       	brcc	.+14     	; 0x793c <__divmodsi4_exit>

0000792e <__divmodsi4_neg2>:
    792e:	50 95       	com	r21
    7930:	40 95       	com	r20
    7932:	30 95       	com	r19
    7934:	21 95       	neg	r18
    7936:	3f 4f       	sbci	r19, 0xFF	; 255
    7938:	4f 4f       	sbci	r20, 0xFF	; 255
    793a:	5f 4f       	sbci	r21, 0xFF	; 255

0000793c <__divmodsi4_exit>:
    793c:	08 95       	ret

0000793e <__divmodsi4_neg1>:
    793e:	f6 f7       	brtc	.-4      	; 0x793c <__divmodsi4_exit>
    7940:	90 95       	com	r25
    7942:	80 95       	com	r24
    7944:	70 95       	com	r23
    7946:	61 95       	neg	r22
    7948:	7f 4f       	sbci	r23, 0xFF	; 255
    794a:	8f 4f       	sbci	r24, 0xFF	; 255
    794c:	9f 4f       	sbci	r25, 0xFF	; 255
    794e:	08 95       	ret

00007950 <__prologue_saves__>:
    7950:	2f 92       	push	r2
    7952:	3f 92       	push	r3
    7954:	4f 92       	push	r4
    7956:	5f 92       	push	r5
    7958:	6f 92       	push	r6
    795a:	7f 92       	push	r7
    795c:	8f 92       	push	r8
    795e:	9f 92       	push	r9
    7960:	af 92       	push	r10
    7962:	bf 92       	push	r11
    7964:	cf 92       	push	r12
    7966:	df 92       	push	r13
    7968:	ef 92       	push	r14
    796a:	ff 92       	push	r15
    796c:	0f 93       	push	r16
    796e:	1f 93       	push	r17
    7970:	cf 93       	push	r28
    7972:	df 93       	push	r29
    7974:	cd b7       	in	r28, 0x3d	; 61
    7976:	de b7       	in	r29, 0x3e	; 62
    7978:	ca 1b       	sub	r28, r26
    797a:	db 0b       	sbc	r29, r27
    797c:	0f b6       	in	r0, 0x3f	; 63
    797e:	f8 94       	cli
    7980:	de bf       	out	0x3e, r29	; 62
    7982:	0f be       	out	0x3f, r0	; 63
    7984:	cd bf       	out	0x3d, r28	; 61
    7986:	09 94       	ijmp

00007988 <__epilogue_restores__>:
    7988:	2a 88       	ldd	r2, Y+18	; 0x12
    798a:	39 88       	ldd	r3, Y+17	; 0x11
    798c:	48 88       	ldd	r4, Y+16	; 0x10
    798e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7990:	6e 84       	ldd	r6, Y+14	; 0x0e
    7992:	7d 84       	ldd	r7, Y+13	; 0x0d
    7994:	8c 84       	ldd	r8, Y+12	; 0x0c
    7996:	9b 84       	ldd	r9, Y+11	; 0x0b
    7998:	aa 84       	ldd	r10, Y+10	; 0x0a
    799a:	b9 84       	ldd	r11, Y+9	; 0x09
    799c:	c8 84       	ldd	r12, Y+8	; 0x08
    799e:	df 80       	ldd	r13, Y+7	; 0x07
    79a0:	ee 80       	ldd	r14, Y+6	; 0x06
    79a2:	fd 80       	ldd	r15, Y+5	; 0x05
    79a4:	0c 81       	ldd	r16, Y+4	; 0x04
    79a6:	1b 81       	ldd	r17, Y+3	; 0x03
    79a8:	aa 81       	ldd	r26, Y+2	; 0x02
    79aa:	b9 81       	ldd	r27, Y+1	; 0x01
    79ac:	ce 0f       	add	r28, r30
    79ae:	d1 1d       	adc	r29, r1
    79b0:	0f b6       	in	r0, 0x3f	; 63
    79b2:	f8 94       	cli
    79b4:	de bf       	out	0x3e, r29	; 62
    79b6:	0f be       	out	0x3f, r0	; 63
    79b8:	cd bf       	out	0x3d, r28	; 61
    79ba:	ed 01       	movw	r28, r26
    79bc:	08 95       	ret

000079be <__udivmodsi4>:
    79be:	a1 e2       	ldi	r26, 0x21	; 33
    79c0:	1a 2e       	mov	r1, r26
    79c2:	aa 1b       	sub	r26, r26
    79c4:	bb 1b       	sub	r27, r27
    79c6:	fd 01       	movw	r30, r26
    79c8:	0d c0       	rjmp	.+26     	; 0x79e4 <__udivmodsi4_ep>

000079ca <__udivmodsi4_loop>:
    79ca:	aa 1f       	adc	r26, r26
    79cc:	bb 1f       	adc	r27, r27
    79ce:	ee 1f       	adc	r30, r30
    79d0:	ff 1f       	adc	r31, r31
    79d2:	a2 17       	cp	r26, r18
    79d4:	b3 07       	cpc	r27, r19
    79d6:	e4 07       	cpc	r30, r20
    79d8:	f5 07       	cpc	r31, r21
    79da:	20 f0       	brcs	.+8      	; 0x79e4 <__udivmodsi4_ep>
    79dc:	a2 1b       	sub	r26, r18
    79de:	b3 0b       	sbc	r27, r19
    79e0:	e4 0b       	sbc	r30, r20
    79e2:	f5 0b       	sbc	r31, r21

000079e4 <__udivmodsi4_ep>:
    79e4:	66 1f       	adc	r22, r22
    79e6:	77 1f       	adc	r23, r23
    79e8:	88 1f       	adc	r24, r24
    79ea:	99 1f       	adc	r25, r25
    79ec:	1a 94       	dec	r1
    79ee:	69 f7       	brne	.-38     	; 0x79ca <__udivmodsi4_loop>
    79f0:	60 95       	com	r22
    79f2:	70 95       	com	r23
    79f4:	80 95       	com	r24
    79f6:	90 95       	com	r25
    79f8:	9b 01       	movw	r18, r22
    79fa:	ac 01       	movw	r20, r24
    79fc:	bd 01       	movw	r22, r26
    79fe:	cf 01       	movw	r24, r30
    7a00:	08 95       	ret

00007a02 <_exit>:
    7a02:	f8 94       	cli

00007a04 <__stop_program>:
    7a04:	ff cf       	rjmp	.-2      	; 0x7a04 <__stop_program>
